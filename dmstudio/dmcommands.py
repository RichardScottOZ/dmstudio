import win32com.client
import files as cv
import pandas as pd
import numpy as np
import os
import glob

class studio(object):

    def __init__(self, version='StudioRM'):

        '''


        '''

        if version == 'StudioRM':
            studio_object = "Datamine.StudioRM.Application"
            self.version = 'StudioRM'
        elif version == 'Studio3':
            studio_object = "DatamineStudio.Application"
            self.version = 'Studio3'
        elif version == 'StudioEM':
            studio_object = "Datamine.StudioEM.Application"
            self.version = 'StudioEM'
        else:
            studio_object = ""
            print 'not a valid Datamine studio version'
            print 'only Studio3, StudioRM and StudioEM are supported'

        self.oScript = win32com.client.Dispatch(studio_object)

    def run_command(self, command):
        self.oScript.Parsecommand(command)

    def parse_infields_list(self, prefix, fields):

        cnt = 1
        field_string = ""
        for field in fields:
            field_string += " *" + prefix + str(cnt) + "=" + field + " "
            cnt+=1

        return field_string;

    def accmlt(self,
               in_='required',
               out='required',
               key1='optional',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               allrecs=0,
               unsorted=0,
               retrieval='optional'):

        """
        ACCMLT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output sub-total file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for totalling. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        allrecs: 
            Accumulation flag (0). If set to 1 then all records will be copied to the output file showing the 
            totals. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        unsorted: 
            Unsorted flag. Default (0). Option Description 0 - An accumulated total is written to the OUT 
            every time the keyfield[s] changes. Hence, if the IN file is sorted on the keyfield[s] there 
            be 1 entry in OUT for each keyfield[s] value. If IN is not sorted on the keyfield[s], there may be 
            entries for the same keyfield[s] value in the OUT file. 1 - The accumulation is over all records 
            the same keyfield[s] value. Hence there will only be 1 entry in OUT for each keyfield[s] value, 
            of whether the IN file is sorted or not. N.B. If UNSORTED=1, the cumulative totals option 
            cannot be used. The process will automatically set ALLRECS to 0 if UNSORTED=1. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "accmlt "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if allrecs != "optional":
            command += " @allrecs=" + str(allrecs) 

        if unsorted != "optional":
            command += " @unsorted=" + str(unsorted) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def adddd(self,
              in_='required',
              out='required',
              retrieval='optional'):

        """
        ADDDD
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Table
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. This may be the same as IN for in-place operation; in this mode, only implicit 
            may be added. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "adddd "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def addmod(self,
               in1='required',
               in2='required',
               out='required',
               tolernce=0.001,
               retrieval='optional'):

        """
        ADDMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Model to be updated (sorted on IJK). Must contain at least the fields XC, YC, ZC, XINC, YINC, 
            XMORIG, YMORIG, ZMORIG, NX, NY, NZ, IJK. 
            Required=Yes
        in2: Input
            Update model (sorted on IJK). 
            Required=Yes

        Output Files:
        -------------

        out: Block Model
            Output model. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        tolernce: 
            Defines the smallest cell that will be included in OUT. Defined as a factor of XINC, YINC, ZINC. 
            = (0.001). 
            Range=0,1
            Values=0,1
            Default=0.001
            Required=No
        """


        command = "addmod "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if tolernce != "optional":
            command += " @tolernce=" + str(tolernce) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def addtri(self,
               wiretr1='required',
               wirept1='required',
               wiretr2='required',
               wirept2='required',
               wiretrou='required',
               wireptou='required',
               retrieval='optional'):

        """
        ADDTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr1: Input
            Input wireframe triangle file 1. 
            Required=Yes
        wirept1: Input
            Input wireframe point file 1. 
            Required=Yes
        wiretr2: Input
            Input wireframe triangle file 2. 
            Required=Yes
        wirept2: Input
            Input wireframe point file 2. 
            Required=Yes

        Output Files:
        -------------

        wiretrou: Wireframe Triangle
            Output wireframe triangle file. 
            Required=Yes
        wireptou: Wireframe Points
            Output wireframe point file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "addtri "


        # Required input error check

        if wiretr1 == "required":
            raise ValueError("wiretr1 is required.")

        command += " &wiretr1=" + wiretr1 


        # Required input error check

        if wirept1 == "required":
            raise ValueError("wirept1 is required.")

        command += " &wirept1=" + wirept1 


        # Required input error check

        if wiretr2 == "required":
            raise ValueError("wiretr2 is required.")

        command += " &wiretr2=" + wiretr2 


        # Required input error check

        if wirept2 == "required":
            raise ValueError("wirept2 is required.")

        command += " &wirept2=" + wirept2 


        # Required output error check

        if wiretrou == "required":
            raise ValueError("wiretrou is required.")

        command += " &wiretrou=" + wiretrou 


        # Required output error check

        if wireptou == "required":
            raise ValueError("wireptou is required.")

        command += " &wireptou=" + wireptou 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def aed(self,
            in_='required',
            defn='optional',
            apphlp='optional',
            out='optional',
            retrieval='optional'):

        """
        AED
        ---
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Table
            Input file to be edited. If this file does not exist, it will be created: first a definition file 
            be created (named "name".%) into which you enter the required fields, validation info, etc. 
            the definition file is written out and used to define the IN file, into which you enter data. 
            Required=Yes
        defn: Undefined
            Definition file. Must contain the following fields:- FIELD, TYPE, LENGTH, STORED, FORM, 
            FMAX, INCR, VALUES. If neither the input file nor the definition file exist, both will be 
            If the input file does not exist, but a definition file is entered, then the input file will be 
            from the definition file. Whenever a definition file exists, it may be used for validation. If 
            the input and the validation file exist, then input file entries will be validated against the 
            file. 
            Required=No
        apphlp: Input
            Input file containing application specific help information that will be included in the help 
            An alphanumeric field named APPHLP will be expected, with a maximum of 56 characters 
            
            Required=No

        Output Files:
        -------------

        out: Table
            Edited output file. If this is not specified, then the input file will be overwritten. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "aed "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if defn != "optional":
            command += " &defn=" + defn 

        if apphlp != "optional":
            command += " &apphlp=" + apphlp 

        if out != "optional":
            command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def alfnum(self,
               in_='required',
               fieldlst='optional',
               out='required',
               f1='required',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               fieldnam='optional',
               retrieval='optional'):

        """
        ALFNUM
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file containing explicit alphanumeric field(s) to be converted. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output file containing given alphanumeric field(s) converted to numeric. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            Name of alphanumeric field to be converted. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            Optional second explicit alphanumeric field to be converted. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Optional third explicit alphanumeric field to be converted. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Optional fourth explicit alphanumeric field to be converted. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Optional fifth explicit alphanumeric field to be converted. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "alfnum "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def anisoang(self,
                 planstr='optional',
                 sectstr='optional',
                 wiretr='optional',
                 wirept='optional',
                 retrieval='optional'):

        """
        ANISOANG
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        planstr: Input
            String 
            Required=No
        sectstr: Input
            String 
            Required=No
        wiretr: Input
            Wireframe Triangle 
            Required=No
        wirept: Input
            Wireframe Points 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "anisoang "

        if planstr != "optional":
            command += " &planstr=" + planstr 

        if sectstr != "optional":
            command += " &sectstr=" + sectstr 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def anova1(self,
               in_='required',
               value='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        ANOVA1
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file, sorted on required keyfields. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        value: Undefined : Undefined
            Field for analysis of variance. 
            Default=Undefined
            Required=Yes
        key1: Undefined : Undefined
            Keyfield 1 for replicate observations. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "anova1 "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def append(self,
               in1='optional',
               in2='optional',
               out='required',
               sequence=0,
               protodd=0,
               print_=0,
               retrieval='optional'):

        """
        APPEND
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input file 1. This may be a catalogue file. Omit for file prompting. Enter a prototype DD (and set 
            for selection from a catalogue. Otherwise the DD of the first file will be combined with the 
            IN2 file (if any) for the output file DD, and only files matching (or a subset of) this DD will be 
            
            Required=No
        in2: Input
            Input file 2. This may be a catalogue file. Omit for file prompting. Enter a catalogue file (and 
            PROTODD=1) for selection from this catalogue using the prototype on IN1. Otherwise the DD of 
            first file will be combined with the first IN1 entry (if any) for the output file DD, and only 
            matching (or a subset of) this DD will be appended. IN2 files are appended after IN1 files. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output file = file 1 for in place append, if IN1 nor IN2 are NOT catalogue files, both are defined, 
            have identical DDs. If SEQUENCE is set, then the output file will contain extra fields FILENAME 
            or SEQUENCE (N) or both. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        sequence: 
            Option Description 1, add field FILENAME [A,8] into output file containing 2, add field 
            [N] into output file containing 3, add both FILENAME and SEQUENCE fields. No 0 0,3 0,1,2,3 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        protodd: 
            Option Description 1, Use the file on IN1 as a prototype for selection No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            Option Description 1, Show the output file DD after all files have been No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "append "

        if in1 != "optional":
            command += " &in1=" + in1 

        if in2 != "optional":
            command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if sequence != "optional":
            command += " @sequence=" + str(sequence) 

        if protodd != "optional":
            command += " @protodd=" + str(protodd) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def aptotrue(self,
                 in_='required',
                 retrieval='optional'):

        """
        APTOTRUE
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Undefined 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "aptotrue "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def astran(self,
               in_='required',
               xref='required',
               sampleid='optional',
               sprefix=2,
               sdigits=6,
               maxerrs="optional",
               update=0,
               retrieval='optional'):

        """
        ASTRAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input database file. This file must contain a sample identifier field. The default name for 
            field is SAMPLEID. It may be either Numeric or Alphanumeric. In addition, the IN file will 
            a number of other fields: the names of elements and compounds to be matched with fields in the 
            data files. It may also contain fields which are not matched such as BHID, FROM, TO, etc. 
            Required=Yes
        xref: Input
            Required assay name cross-reference file. This file is used to link the names of assay fields in 
            database file to fields in the assay transfer {SIF} file. It is also used to convert results from 
            assay file to database units. Required fields in the XREF file are: ELEMENT -- name of field in 
            IN file. Alphanumeric; two words. UNITS -- units stored in the IN file for the current field. 
            one word. Allowable units are: '%' -- per cent. ppm -- parts per million. ppb -- parts per 
            ASSNAM -- name of field in assay transfer file. Alphanumeric; two words. There must be at least 
            record for each assay field in the IN file. There must be one record for each alias of a given assay 
            An assay transfer file may not reference an assay field more than once for a given job. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        sampleid: Any : IN
            Optional name of sample identifier field in the IN file. Only required if the name of sample 
            field is not "SAMPLEID". 
            Default=SAMPLEID
            Required=No

        Parameters:
        -----------

        sprefix: 
            Optional parameter to specify number of prefix characters. If "SAMPLEID" is numeric, this 
            be 0 if specified, otherwise it must be less than 11. (2) 
            Range=0,11
            Values=0,1,2,3,4,5,6,7,8,9,10,11
            Default=2
            Required=No
        sdigits: 
            Optional parameter to specify number of digits to form numeric portion of "SAMPLEID". If 
            is numeric then SDIGIT must lie between 1 and 6. If "SAMPLEID" is alpha- numeric, SDIGIT must lie 
            0 and 16. (6) 
            Range=0,16
            Values=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
            Default=6
            Required=No
        maxerrs: 
            Maximum number of errors that will be tolerated before processing is aborted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        update: 
            Controls treatment of previously updated samples. Option Description (0) Ignore previously 
            samples. 1 Check previously updated samples but only update 2 As 1 but overwrite any value in the 
            field. No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "astran "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if xref == "required":
            raise ValueError("xref is required.")

        command += " &xref=" + xref 

        if sampleid != "optional":
            command += " *sampleid=" + sampleid 

        if sprefix != "optional":
            command += " @sprefix=" + str(sprefix) 

        if sdigits != "optional":
            command += " @sdigits=" + str(sdigits) 

        if maxerrs != "optional":
            command += " @maxerrs=" + str(maxerrs) 

        if update != "optional":
            command += " @update=" + str(update) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def attchk(self,
               in_='required',
               retrieval='optional'):

        """
        ATTCHK
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Undefined
            Input legend file. The following standard field names are recognized but not all need be 
            in the file :- LEGEND A8 Legend key. DATFIELD A8 Data field in the input file. DATMIN A12 Minimum 
            DATMAX A12 Maximum value. DATEXP A40 Match (regular) expression. ATTFIELD A8 Attribute 
            ATTVALUE A12 Attribute field value. Alternate field names can be supplied to the process by 
            through the symbolic field names eg DATMIN(MIN). 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "attchk "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def attset(self,
               in_='required',
               legend='required',
               out='required',
               datfld1='optional',
               datfld2='optional',
               datfld3='optional',
               datfld4='optional',
               datfld5='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               attrib5='optional',
               mode=0,
               inrange=0,
               retrieval='optional'):

        """
        ATTSET
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Undefined
            Input data file 
            Required=Yes
        legend: Input
            Legend definition file. The following standard field names are expected: LEGEND A8 Legend 
            DATFIELD A8 Data field in input file. DATMIN A12 Minimum value. DATMAX A12 Maximum value. 
            A40 Match regular expression. ATTFIELD A8 Attribute field name. ATTVALUE A12 Attribute field 
            Alternate field names can be supplied to the process by specification through the symbolic 
            names. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing the additional attribute fields. May be the same as the input file but 
            attribute fields will be ignored. 
            Required=Yes

        Fields:
        -------

        datfld1: Undefined : Undefined
            Optional data field. If no DATFIELD field is supplied, then DATFLD1 is used to specify the 
            required data field. Otherwise DATFLD1..5 can be used to select a subset of the data fields. 
            Default=Undefined
            Required=No
        datfld2: Undefined : Undefined
            Second optional data field from those listed in DATFLD. 
            Default=Undefined
            Required=No
        datfld3: Undefined : Undefined
            Third optional data field 
            Default=Undefined
            Required=No
        datfld4: Undefined : Undefined
            Fourth optional data field 
            Default=Undefined
            Required=No
        datfld5: Undefined : Undefined
            Fifth optional data field 
            Default=Undefined
            Required=No
        attrib1: Undefined : Undefined
            First optional attribute field. If no ATTFIELD field is specified, then ATTRIB1 is used to 
            the single required attribute field. Otherwise ATTRIB1..5 can be used to select a subset of the 
            fields. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Second optional attribute field from those listed in ATTFIELD. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Third optional attribute field 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Fourth optional attribute field 
            Default=Undefined
            Required=No
        attrib5: Undefined : Undefined
            Fifth optional attribute field 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        mode: 
            Type of validation to be undertaken(0). Option Description 1 minimum value DATMIN used. 2 
            DATMIN and maximum DATMAX values used. 3 matching expression used. No 0 0,3 0,1,2,3 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        inrange: 
            Type of in-place update (0). Where the attribute field exists in the input file, only those 
            satisfying the range or pattern will be updated if set to 1. All records are output. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "attset "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if legend == "required":
            raise ValueError("legend is required.")

        command += " &legend=" + legend 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if datfld1 != "optional":
            command += " *datfld1=" + datfld1 

        if datfld2 != "optional":
            command += " *datfld2=" + datfld2 

        if datfld3 != "optional":
            command += " *datfld3=" + datfld3 

        if datfld4 != "optional":
            command += " *datfld4=" + datfld4 

        if datfld5 != "optional":
            command += " *datfld5=" + datfld5 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if attrib5 != "optional":
            command += " *attrib5=" + attrib5 

        if mode != "optional":
            command += " @mode=" + str(mode) 

        if inrange != "optional":
            command += " @inrange=" + str(inrange) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def autocr(self,
               in_='required',
               out='required',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               sampdist=0,
               print_=0,
               retrieval='optional'):

        """
        AUTOCR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain sample identity field. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file includes LAG-L, DISTANCE. R-L the auto correlation function and SIGNIC the 
            of the auto correlation function for use in graphical processes. 
            Required=Yes

        Fields:
        -------

        sampid: Undefined : Undefined
            Compulsory sample identifier field. 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First variable for evaluation. If no variables are selected all variables will be processed. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second variable for evaluation. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third variable for evaluation. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth variable for evaluation. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth variable for evaluation. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Six variable for evaluation. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh variable for evaluation. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth variable for evaluation. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth variable for evaluation. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth variable for evaluation. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        sampdist: 
            Option Description (0) Distance between sample points to calculate the No 0 Undefined 
            
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        print: 
            >0 Display results on the screen (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "autocr "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if sampdist != "optional":
            command += " @sampdist=" + str(sampdist) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def backtr(self,
               in1='required',
               refdist='required',
               out='required',
               normval='required',
               origref='required',
               normref='required',
               backval='optional',
               minnorm="optional",
               maxnorm=4,
               minback=0,
               maxback=+,
               lotail=1,
               lopar=1,
               uptail=1,
               uppar=1,
               retrieval='optional'):

        """
        BACKTR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input data file. This must include the normally distributed field NORMVAL that is to be back 
            
            Required=Yes
        refdist: Input
            Input file containing the transformation lookup table. The file must include the field 
            , containing the original data values, and the field NORMREF defining the corresponding 
            score values. 
            Required=Yes

        Output Files:
        -------------

        out: Block Model
            Output file containing the back transformed values. This contains the same data as the IN file, 
            with the added back transformed data field BACKVAL . 
            Required=Yes

        Fields:
        -------

        normval: Undefined : Undefined
            Field in the input data file IN defining the normal score values to be back transformed. 
            Default=Undefined
            Required=Yes
        origref: Undefined : Undefined
            Field in the input REFDIST file defining the original data values. 
            Default=Undefined
            Required=Yes
        normref: Undefined : Undefined
            Field in the input REFDIST file defining the normal score values. 
            Default=Undefined
            Required=Yes
        backval: Undefined : Undefined
            Field to be created in the output file OUT for the back transformed data values. If not specified 
            the field BACKVAL will be created, 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        minnorm: 
            -4 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxnorm: 
            Maximum value of NORMVAL field in IN file to be used for back transformation. 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        minback: 
            Minimum value of BACKVAL field to be created in OUT file. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxback: 
            Maximum value of BACKVAL field to be created in OUT file. 
            Range=Undefined
            Values=Undefined
            Default=+
            Required=No
        lotail: 
            Back-transformation method in the lower tail of the distribution to a minimum grade of MINBACK 
            Linear Power No 1 1,2 1,2 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        lopar: 
            Power parameter used in back-transformation of grades in the lower tail of the distribution to 
            minimum of MINBACK . LOTAIL must be set to 2. 
            Range=0,+
            Values=Undefined
            Default=1
            Required=No
        uptail: 
            Back-transformation method in the upper tail of the distribution to a maximum grade of 
            . Linear Power Hyperbolic No 1 1,4 1,2,4 
            Range=1,4
            Values=1,2,4
            Default=1
            Required=No
        uppar: 
            Power parameter used in back-transformation of grades in the upper tail of the distribution to 
            maximum of MAXGRADE . UPTAIL must be set to 2 or 4. 
            Range=0,+
            Values=Undefined
            Default=1
            Required=No
        """


        command = "backtr "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if refdist == "required":
            raise ValueError("refdist is required.")

        command += " &refdist=" + refdist 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if normval == "required":
            raise ValueError("normval is required.")

        command += " *normval=" + normval 


        # Required field error check

        if origref == "required":
            raise ValueError("origref is required.")

        command += " *origref=" + origref 


        # Required field error check

        if normref == "required":
            raise ValueError("normref is required.")

        command += " *normref=" + normref 

        if backval != "optional":
            command += " *backval=" + backval 

        if minnorm != "optional":
            command += " @minnorm=" + str(minnorm) 

        if maxnorm != "optional":
            command += " @maxnorm=" + str(maxnorm) 

        if minback != "optional":
            command += " @minback=" + str(minback) 

        if maxback != "optional":
            command += " @maxback=" + str(maxback) 

        if lotail != "optional":
            command += " @lotail=" + str(lotail) 

        if lopar != "optional":
            command += " @lopar=" + str(lopar) 

        if uptail != "optional":
            command += " @uptail=" + str(uptail) 

        if uppar != "optional":
            command += " @uppar=" + str(uppar) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def bhcount(self,
                modelin='required',
                sampin='required',
                modelout='required',
                key='required',
                retrieval='optional'):

        """
        BHCOUNT
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modelin: Input
            Input model file. This file is the output MODEL file from ESTIMA 
            Required=Yes
        sampin: Input
            Input sample file. This file is the SAMPOUT file from ESTIMA. The run of ESTIMA which created the 
            must have used the following options: - the key field option was selected. - only one output 
            field was created. 
            Required=Yes

        Output Files:
        -------------

        modelout: Block Model
            Output model file. This is the same as the input model, but with the extra field N-BHID. 
            Required=Yes

        Fields:
        -------

        key: Any : SAMPIN
            Name of the field containing the drillhole identification code. This is the field specified as 
            KEY field when running ESTIMA. This will usually be BHID, which is the default. 
            Default=BHID
            Required=Yes

        Parameters:
        -----------

        """


        command = "bhcount "


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 


        # Required input error check

        if sampin == "required":
            raise ValueError("sampin is required.")

        command += " &sampin=" + sampin 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 


        # Required field error check

        if key == "required":
            raise ValueError("key is required.")

        command += " *key=" + key 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def blkper(self,
               in_='required',
               out='required',
               direct=1,
               startpos="optional",
               stepsize="optional",
               numplane="optional",
               smooth=0,
               connect=1,
               bradjust=0.0,
               retrieval='optional'):

        """
        BLKPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file, which must contain the standard model fields. 
            Required=Yes

        Output Files:
        -------------

        out: String
            Output perimeter file. Perimeter values have the format: PVALUE = nnn.mm where:- nnn = the 
            number. mm = the perimeter number in the plane. XP,YP and ZP are true world coordinates. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        direct: 
            Parameter to specify the plane of the output perimeter: 1 = XY, 2 = XZ, 3 = YZ. 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=Yes
        startpos: 
            Value of the coordinate perpendicular to the output plane for the first plane. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        stepsize: 
            Distance between output planes. This must be positive. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        numplane: 
            Number of output planes. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        smooth: 
            Controls perimeter generation (0): Option Description 0 Join cell corners; 1 Join the 
            of cell sides in order to smooth No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        connect: 
            Controls internal and external perimeter connections. Option Description 0 Do not connect 
            and external perimeter connections. 1 Connect internal perimeters to external perimeters 2 
            only internal perimeters. 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        bradjust: 
            Specifies gap to create between coincident segments in bridged parameters to assist later 
            Only used if @CONNECT=1 
            Range=Undefined
            Values=Undefined
            Default=0.0
            Required=No
        """


        command = "blkper "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required parameter error check

        if direct == "required":
            raise ValueError("direct is required.")

        command += " @direct=" + str(direct) 


        # Required parameter error check

        if startpos == "required":
            raise ValueError("startpos is required.")

        command += " @startpos=" + str(startpos) 


        # Required parameter error check

        if stepsize == "required":
            raise ValueError("stepsize is required.")

        command += " @stepsize=" + str(stepsize) 


        # Required parameter error check

        if numplane == "required":
            raise ValueError("numplane is required.")

        command += " @numplane=" + str(numplane) 

        if smooth != "optional":
            command += " @smooth=" + str(smooth) 

        if connect != "optional":
            command += " @connect=" + str(connect) 

        if bradjust != "optional":
            command += " @bradjust=" + str(bradjust) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def blktri(self,
               in_='required',
               wiretr='required',
               wirept='required',
               class_='optional',
               modcol='optional',
               plane=0,
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               order=0,
               surface=3,
               colour=1,
               retrieval='optional'):

        """
        BLKTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, and IJK. If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, 
            ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3. 
            Required=Yes

        Output Files:
        -------------

        wiretr: Wireframe Triangle
            Output wireframe triangle file. 
            Required=Yes
        wirept: Wireframe Points
            Output wireframe point file. 
            Required=Yes

        Fields:
        -------

        class: Undefined : Undefined
            Field in block model defining multiple zones or seams. 
            Default=Undefined
            Required=No
        modcol: Undefined : Undefined
            A numeric field to be used to allocate (an integer) wireframe colour. It is assumed that colour 
            related to CLASS. If colour varies within a CLASS then the colour corresponding to the first 
            of each CLASS will be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        plane: 
            Plane for interpretation of solid or seam orientation. Values are: 0 - solid model, so plane not 
            1 - XY plane (plan) 2 - XZ plane (East-West section) 3 - YZ plane (North-South section) 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=Yes
        xsubcell: 
            Cell division in X direction. 
            Range=1,20
            Values=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
            Default=1
            Required=Yes
        ysubcell: 
            Cell division in Y direction. 
            Range=1,20
            Values=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
            Default=1
            Required=Yes
        zsubcell: 
            Cell division in Z direction. 
            Range=1,20
            Values=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
            Default=1
            Required=Yes
        order: 
            If non-zero then the process treats values of the CLASS field as an ordered numeric sequence, 
            infers intermediate values to generate a sequence of wireframe seam surfaces.A value of -1 
            that the numeric sequence increases in value with depth, and +1 a decrease with depth. 
            Range=-1,1
            Values=-1,1
            Default=0
            Required=No
        surface: 
            This parameter is used to specify which wireframe surfaces are created: 1 - outer surface 
            model only) 2 - inner surface (Solid model only) 3 - outer and inner surfaces (Solid model only) 4 
            bottom surface 5 -top surface 6 - both bottom and top surfaces All options apply to a solid model 
            but only 4,5 and 6 apply to seams (PLANE=1,2,3). 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=3
            Required=Yes
        colour: 
            Colour for output wireframe.Only used if a colour field is not specified for MODCOL. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "blktri "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required output error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if class_ != "optional":
            command += " *class=" + class_ 

        if modcol != "optional":
            command += " *modcol=" + modcol 


        # Required parameter error check

        if plane == "required":
            raise ValueError("plane is required.")

        command += " @plane=" + str(plane) 


        # Required parameter error check

        if xsubcell == "required":
            raise ValueError("xsubcell is required.")

        command += " @xsubcell=" + str(xsubcell) 


        # Required parameter error check

        if ysubcell == "required":
            raise ValueError("ysubcell is required.")

        command += " @ysubcell=" + str(ysubcell) 


        # Required parameter error check

        if zsubcell == "required":
            raise ValueError("zsubcell is required.")

        command += " @zsubcell=" + str(zsubcell) 

        if order != "optional":
            command += " @order=" + str(order) 


        # Required parameter error check

        if surface == "required":
            raise ValueError("surface is required.")

        command += " @surface=" + str(surface) 

        if colour != "optional":
            command += " @colour=" + str(colour) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def canon(self,
              in_='required',
              scores='optional',
              sampid='required',
              f1='optional',
              f2='optional',
              f3='optional',
              f4='optional',
              f5='optional',
              f6='optional',
              f7='optional',
              f8='optional',
              f9='optional',
              f10='optional',
              nleft=1,
              print_=0,
              retrieval='optional'):

        """
        CANON
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        scores: Undefined
            Optional output file for canonical root scores. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Field containing sample identification 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        nleft: 
            Number of fields or variables in left hand part of the variate (1). 
            Range=0,64
            Values=Undefined
            Default=1
            Required=No
        print: 
            > 0 Display results on the screen (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "canon "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if scores != "optional":
            command += " &scores=" + scores 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if nleft != "optional":
            command += " @nleft=" + str(nleft) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def cdtran(self,
               in_='required',
               protorot='optional',
               out='required',
               x='required',
               y='required',
               z='required',
               newx='required',
               newy='required',
               newz='required',
               angle1=0,
               angle2=0,
               angle3=0,
               rotaxis1=3,
               rotaxis2=1,
               rotaxis3=3,
               x0=0,
               y0=0,
               z0=0,
               xr0=0,
               yr0=0,
               zr0=0,
               factor=1,
               inverse=0,
               print_=0,
               retrieval='optional'):

        """
        CDTRAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain at least X , Y and Z explicit numeric fields. 
            Required=Yes
        protorot: Input
            Optional file containing the rotation and translation parameters stored as the default of 
            fields ANGLE1, ANGLE2, ANGLE3, X0, Y0, Z0, XMORIG, YMORIG, ZMORIG, ROTAXIS1, ROTAXIS2 and 
            Fields XMORIG, YMORIG and ZMORIG correspond to parameters XR0, YR0 and ZR0. The other nine 
            have the same name as the corresponding parameters. If this file is specified and has valid 
            for all twelve fields then the parameter entries for rotation and translation are ignored. 
            file can be created using the Rotated Model option in the process PROTOM . Data will then be 
            into the local (rotated) coordinate system of the model. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output file. Will contain all input file fields + NEWX , NEWY and NEWZ. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            X co-ordinate field in input file. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Y co-ordinate field in input file. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Z co-ordinate field in input file. 
            Default=Undefined
            Required=Yes
        newx: Undefined : Undefined
            X co-ordinate field in output file. May be the same as X. 
            Default=Undefined
            Required=Yes
        newy: Undefined : Undefined
            Y co-ordinate field in output file. May be the same as Y. 
            Default=Undefined
            Required=Yes
        newz: Undefined : Undefined
            Z co-ordinate field in output file. May be the same as Z. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        angle1: 
            First rotation angle clockwise in degrees, around axis ROTAXIS1. It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        angle2: 
            Second rotation angle clockwise in degrees, around axis ROTAXIS2. It must lie between 360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        angle3: 
            Third rotation angle clockwise in degrees, around axis ROTAXIS3. It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        rotaxis1: 
            Axis around which first rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (3) 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        rotaxis2: 
            Axis around which second rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (1) 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        rotaxis3: 
            Axis around which third rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (3) 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        x0: 
            X co-ordinate of known point in both systems, in unrotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        y0: 
            Y co-ordinate of known point in both systems, in unrotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        z0: 
            Z co-ordinate of known point in both systems, in unrotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xr0: 
            X co-ordinate of known point in both systems, in rotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yr0: 
            Y co-ordinate of known point in both systems, in rotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zr0: 
            Z co-ordinate of known point in both systems, in rotated co-ordinate system. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        factor: 
            The rotated co-ordinate system units will be e.g. 0.3048 for a grid in metres on an unrotated 
            in feet (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        inverse: 
            Option Description 0 ; rotate from [X,Y,Z] through [ANGLE1, ANGLE2,ANGLE3] to 
            1 ; inverse transformation to above; X,Y,Z are in rotated system; NEWX,NEWY,NEWZ in unrotated 
            ANGLE1-3 are same angles as for 0. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >=1; display input and output points for each record (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "cdtran "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if protorot != "optional":
            command += " &protorot=" + protorot 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required field error check

        if newx == "required":
            raise ValueError("newx is required.")

        command += " *newx=" + newx 


        # Required field error check

        if newy == "required":
            raise ValueError("newy is required.")

        command += " *newy=" + newy 


        # Required field error check

        if newz == "required":
            raise ValueError("newz is required.")

        command += " *newz=" + newz 

        if angle1 != "optional":
            command += " @angle1=" + str(angle1) 

        if angle2 != "optional":
            command += " @angle2=" + str(angle2) 

        if angle3 != "optional":
            command += " @angle3=" + str(angle3) 

        if rotaxis1 != "optional":
            command += " @rotaxis1=" + str(rotaxis1) 

        if rotaxis2 != "optional":
            command += " @rotaxis2=" + str(rotaxis2) 

        if rotaxis3 != "optional":
            command += " @rotaxis3=" + str(rotaxis3) 

        if x0 != "optional":
            command += " @x0=" + str(x0) 

        if y0 != "optional":
            command += " @y0=" + str(y0) 

        if z0 != "optional":
            command += " @z0=" + str(z0) 

        if xr0 != "optional":
            command += " @xr0=" + str(xr0) 

        if yr0 != "optional":
            command += " @yr0=" + str(yr0) 

        if zr0 != "optional":
            command += " @zr0=" + str(zr0) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if inverse != "optional":
            command += " @inverse=" + str(inverse) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def cellconf(self,
                 statmod='required',
                 cutoff='optional',
                 conf_tbl='required',
                 conf_plt='optional',
                 cutint=1,
                 cutmax=10,
                 plot_tbl=0,
                 display=1,
                 retrieval='optional'):

        """
        CELLCONF
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        statmod: Input
            Created by the CSMODEL process, this model must include at least one percentile field - PCxx - 
            xx is the numeric percentile value. It must also include the field MEAN - the average of all the 
            values for each cell. 
            Required=Yes
        cutoff: Input
            Allows irregular intervals to be used by specifying cutoff values in this file. 
            Required=No - only used if irregular intervals are required

        Output Files:
        -------------

        conf_tbl: Table
            Output table for displaying confidence for each grade bin defined for successive cutoff 
            
            Required=Yes
        conf_plt: Plot template
            Output plot template for displaying confidence for each grade bin defined for successive 
            values. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        cutint: 
            For regular cutoff grades, this field defines the interval between successive cutoff grades. 
            required if a CUTOFF file has not been specified. 
            Range=0.00001,9999999
            Values=Undefined
            Default=1
            Required=No
        cutmax: 
            For regular cutoff grades, this field defines the maximum cutoff value. Only required if a 
            file has not been specified 
            Range=0.00002,9999999
            Values=Undefined
            Default=10
            Required=No
        plot_tbl: 
            Flag to specify whether a plot data table is output. This contains the data used to create the 
            plot files, and could be used to recreate the plot in other software, such as Excel. The plot data 
            name is the same as the plot file, except that "_P" is replaced by "_T". 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        display: 
            Flag to display whether plot files are displayed as the process is run. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "cellconf "


        # Required input error check

        if statmod == "required":
            raise ValueError("statmod is required.")

        command += " &statmod=" + statmod 

        if cutoff != "optional":
            command += " &cutoff=" + cutoff 


        # Required output error check

        if conf_tbl == "required":
            raise ValueError("conf_tbl is required.")

        command += " &conf_tbl=" + conf_tbl 

        if conf_plt != "optional":
            command += " &conf_plt=" + conf_plt 

        if cutint != "optional":
            command += " @cutint=" + str(cutint) 

        if cutmax != "optional":
            command += " @cutmax=" + str(cutmax) 

        if plot_tbl != "optional":
            command += " @plot_tbl=" + str(plot_tbl) 

        if display != "optional":
            command += " @display=" + str(display) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def chart(self,
              in_='required',
              proto='optional',
              anno='optional',
              out='optional',
              plot='optional',
              x='optional',
              y='optional',
              weight='optional',
              key1='optional',
              key2='optional',
              key3='optional',
              charttyp=1,
              histtyp=1,
              binsize=1,
              binmin=0,
              binmax="optional",
              binmeth=1,
              xtrans=1,
              ytrans=1,
              logmin=0.01,
              frametyp=2,
              xfactor=1,
              yfactor=1,
              linetyp1=1,
              symbol1=92,
              symsize1=3,
              colour1=12,
              linetyp2=0,
              symbol2=0,
              symsize2=3,
              colour2=nan,
              append=0,
              colflag=1,
              legend=nan,
              legchsiz=3,
              tcharsz=3,
              tcolour=12,
              xinc="optional",
              yinc="optional",
              ndx="optional",
              ndy="optional",
              igrid=3,
              fcharsz=3,
              fcolour=12,
              xpaper="optional",
              ypaper="optional",
              xmin="optional",
              xmax="optional",
              ymin="optional",
              ymax="optional",
              xscale="optional",
              yscale="optional",
              progress=1,
              display=1,
              retrieval='optional'):

        """
        CHART
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=No
        anno: Input
            Input file containing annotation for plot axes and title. Must contain the fields XANNO, YANNO 
            TITLE (alpha, explicit).The file should only include one record. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output table. If CHARTTYP =3 this will be a histogram table.Otherwise the table will contain 
            suitable for creating a plot.At least one output file ( PLOT or OUT ) must be specified. 
            Required=No
        plot: Plot
            Output plot file. At least one output file ( PLOT or OUT ) must be specified. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            Field in input file IN to be plotted along the X axis.Not required if probability is to be plotted 
            the X axis XTRANS =4. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Field in input file IN to be plotted along the Y axis. Not required if probability is to be plotted 
            the Y axis YTRANS =4. 
            Default=Undefined
            Required=No
        weight: Undefined : Undefined
            Weighting field in input file IN .Only applicable if histogram ( CHARTTYP =3) has been 
            
            Default=Undefined
            Required=No
        key1: Undefined : Undefined
            First key field in the input IN file. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Second key field in the input IN file. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Third key field in the input IN file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        charttyp: 
            Type of chart.Default (1). Option Description 1 Scattergram 2 Line chart 3 Histogram No 1 1, 3 
            
            Range=1, 3
            Values=1,2,3
            Default=1
            Required=No
        histtyp: 
            Type of histogram - only used if CHARTTYP =3: Option Description 1 histogram using bin plotting 
            cumulative histogram using bin plotting 3 histogram using line plotting 4 cumulative 
            using line plotting 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        binsize: 
            Histogram bin size - only used if CHARTTYP =3.If a log histogram is selected then the bin size 
            still be specified in non-transformed units.The process will then recalculate the bin size, 
            as to create the same number of bins as the normal histogram. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        binmin: 
            Minimum grade for histogram calculation ( CHARTTYP =3).If the grade is less than the minimum 
            BINMETH =1 the sample will be ignored.If the grade is less than the minimum and BINMETH =2 the 
            will be assigned to the bottom bin. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        binmax: 
            Maximum grade for histogram calculation ( CHARTTYP =3).If the grade is greater than or equal to 
            maximum and BINMETH =1 the sample will be ignored.If the grade is greater than or equal to the 
            and BINMETH =2 the sample will be assigned to the top bin.If undefined then the maximum value 
            be set to the maximum sample value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        binmeth: 
            Bin selection method for histogram calculation ( CHARTTYP =3): Option Description 1 if grade 
            less than the minimum or greater than or equal to the maximum then the sample will be ignored. 2 if 
            is less than the minimum or greater than or equal to the maximum then the sample will be assigned 
            the bottom or top bin. 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        xtrans: 
            Transform to be applied to data values plotted on X axis. Default (1). Option Description 1 No 
            - X values plotted 2 Log base 10 of X values 3 Log base e of X values 4 Probability values [phi] 
            from Y values 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        ytrans: 
            Transform to be applied to data values plotted on Y axis. Default (1). Option Description 1 No 
            - Y values plotted 2 Log base 10 of Y values 3 Log base e of Y values 4 Probability values [phi] 
            from X values 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        logmin: 
            If X or Y values are less than LOGMIN they are reset to this value before a log transform is 
            is only relevant if XTRANS or YTRANS are set to 2 or 3. Default (0.01). 
            Range=0.0000001,999999
            Values=nan
            Default=0.01
            Required=No
        frametyp: 
            This parameter defines the type of frame for the plot: Option Description 0 Neither a frame or a 
            will be plotted. 1 Linear scaling will be used irrespective of the values of XTRANS or YTRANS . 2 
            a transform has been selected for either of the axes [ XTRANS >=2 or YTRANS >=2] then the frame 
            include probability and/or log scales as appropriate.Also XINC , YINC , NDX and NDY will be 
            
            Range=0,2
            Values=0,2
            Default=2
            Required=No
        xfactor: 
            Dividing factor applied to X values before any transform using XTRANS .Default (1). 
            Range=nan
            Values=nan
            Default=1
            Required=No
        yfactor: 
            Dividing factor applied to Y values before any transform using YTRANS .Default (1). 
            Range=nan
            Values=nan
            Default=1
            Required=No
        linetyp1: 
            Line type to be used for first key field combination. Default (1). Line Types: Option 
            1 Solid line 2 Bold line 3 Dashed line 4 Dotted line 5 Dot-Dash line 6 Just use symbols at data 
            
            Range=1,6
            Values=1,2,3,4,5,6
            Default=1
            Required=No
        symbol1: 
            Plotted symbol at each point for first key field combination. Default (92). Option 
            91 Circle (o) 92 Cross (+) 93 Cross (x) 94 Triangle 95 Box 96 Diamond 97 Star 98 Pie Segment 
            Range=91,98
            Values=91,92,93,94,95,96,97,98
            Default=92
            Required=No
        symsize1: 
            Symbol size in millimetres for first key field combination (3). Set to 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        colour1: 
            Line and symbol colour number for first key field combination (1). 
            Range=Undefined
            Values=Undefined
            Default=12
            Required=No
        linetyp2: 
            Line type to be used for second and subsequent key field combinations. Default (0). Line Types: 
            Description 0 Different line types for different key field combinations 1 Solid line 2 Bold 
            3 Dashed line 4 Dotted line 5 Dot-Dash line 6 Just use symbols at data points 
            Range=0,6
            Values=0,1,2,3,4,5,6
            Default=0
            Required=No
        symbol2: 
            Plotted symbol at each point for second and subsequent key field combinations. Default (0). 
            Range=0,98
            Values=0,91,92,93,94,95,96,97,98
            Default=0
            Required=No
        symsize2: 
            Symbol size in millimetres for second and subsequent key field combinations (3). Set to 0 for no 
            
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        colour2: 
            Line and symbol colour number for second and subsequent key field combinations. Set to (0) for 
            colours for different key field combinations. 
            Range=nan
            Values=nan
            Default=nan
            Required=No
        append: 
            Plot append flag. Default (0): Option Description 0 Do not append new plot file to existing PLOT 
            1 If PLOT file already exists and is a valid plot file then the new plot will be appended to it. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        colflag: 
            Colour flag. Default (1). Option Description 0 If the field exists in the IN file then it will be 
            1 If the field exists in the IN file then the field value will be used for the plot and 1 and 2 will be 
            =1 and a legend is selected then there should only be one value for each key field combination; 
            extra lines will be inserted into the legend each time the changes within a key field 
            
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        legend: 
            Flag to show if legend is required and legend position.Default (0). Option Description 0 no 
            1 top right 2 bottom right 3 bottom left 4 top left 
            Range=0,4
            Values=0,1,2,3,4
            Default=nan
            Required=No
        legchsiz: 
            Legend character size (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        tcharsz: 
            Title character size in mm. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        tcolour: 
            Title colour. 
            Range=Undefined
            Values=Undefined
            Default=12
            Required=No
        xinc: 
            Grid increment on X axis. Not used if one of the axes has a probability scale. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yinc: 
            Grid increment on Y axis. Not used if one of the axes has a probability scale. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndx: 
            Number of decimal places for annotation on X axis. If undefined then an appropriate number will 
            calculated automatically. 
            Range=0,6
            Values=Undefined
            Default=Undefined
            Required=No
        ndy: 
            Number of decimal places for annotation on Y axis. If undefined then an appropriate number will 
            calculated automatically. 
            Range=0,6
            Values=Undefined
            Default=Undefined
            Required=No
        igrid: 
            Option Description 0 frame only; 1 frame + outwards ticks; 2 frame + crosses at grid 
            3 frame + inwards ticks; 4 grid; 5-9 as 0-4 minus frame. 10 as 4 but annotation parallel to grid 
            11-20 as 1-10 with annotation on right and top as well. Negative values of IGRID give an 
            frame around the full plot area. 
            Range=-20,20
            Values=Undefined
            Default=3
            Required=No
        fcharsz: 
            Frame character size in mm. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        fcolour: 
            Frame colour. 
            Range=Undefined
            Values=Undefined
            Default=12
            Required=No
        xpaper: 
            240 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ypaper: 
            200 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmin: 
            Minimum value of X for plot. In order for this value to be used two parameters from XMIN , XMAX , and 
            andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. In order for this value to be used two parameters from XMIN , XMAX , and 
            andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. In order for this value to be used two parameters from XMIN , XMAX , and 
            andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. In order for this value to be used two parameters from XMIN , XMAX , and 
            andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. In order for this value to be used two parameters from 
            , XMAX , and XSCALE andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. In order for this value to be used two parameters from 
            , XMAX , and XSCALE andtwo parameters from YMIN , YMAX , and YSCALE must be specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        progress: 
            Flag to control amount of output written to Output Window (1). Option Description 0 no output 1 
            messages 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        display: 
            Flag to select whether or not to display plot file. Option Description 0 do not display plot file 
            display plot file 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "chart "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if proto != "optional":
            command += " &proto=" + proto 

        if anno != "optional":
            command += " &anno=" + anno 

        if out != "optional":
            command += " &out=" + out 

        if plot != "optional":
            command += " &plot=" + plot 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if weight != "optional":
            command += " *weight=" + weight 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if charttyp != "optional":
            command += " @charttyp=" + str(charttyp) 

        if histtyp != "optional":
            command += " @histtyp=" + str(histtyp) 

        if binsize != "optional":
            command += " @binsize=" + str(binsize) 

        if binmin != "optional":
            command += " @binmin=" + str(binmin) 

        if binmax != "optional":
            command += " @binmax=" + str(binmax) 

        if binmeth != "optional":
            command += " @binmeth=" + str(binmeth) 

        if xtrans != "optional":
            command += " @xtrans=" + str(xtrans) 

        if ytrans != "optional":
            command += " @ytrans=" + str(ytrans) 

        if logmin != "optional":
            command += " @logmin=" + str(logmin) 

        if frametyp != "optional":
            command += " @frametyp=" + str(frametyp) 

        if xfactor != "optional":
            command += " @xfactor=" + str(xfactor) 

        if yfactor != "optional":
            command += " @yfactor=" + str(yfactor) 

        if linetyp1 != "optional":
            command += " @linetyp1=" + str(linetyp1) 

        if symbol1 != "optional":
            command += " @symbol1=" + str(symbol1) 

        if symsize1 != "optional":
            command += " @symsize1=" + str(symsize1) 

        if colour1 != "optional":
            command += " @colour1=" + str(colour1) 

        if linetyp2 != "optional":
            command += " @linetyp2=" + str(linetyp2) 

        if symbol2 != "optional":
            command += " @symbol2=" + str(symbol2) 

        if symsize2 != "optional":
            command += " @symsize2=" + str(symsize2) 

        if colour2 != "optional":
            command += " @colour2=" + str(colour2) 

        if append != "optional":
            command += " @append=" + str(append) 

        if colflag != "optional":
            command += " @colflag=" + str(colflag) 

        if legend != "optional":
            command += " @legend=" + str(legend) 

        if legchsiz != "optional":
            command += " @legchsiz=" + str(legchsiz) 

        if tcharsz != "optional":
            command += " @tcharsz=" + str(tcharsz) 

        if tcolour != "optional":
            command += " @tcolour=" + str(tcolour) 

        if xinc != "optional":
            command += " @xinc=" + str(xinc) 

        if yinc != "optional":
            command += " @yinc=" + str(yinc) 

        if ndx != "optional":
            command += " @ndx=" + str(ndx) 

        if ndy != "optional":
            command += " @ndy=" + str(ndy) 

        if igrid != "optional":
            command += " @igrid=" + str(igrid) 

        if fcharsz != "optional":
            command += " @fcharsz=" + str(fcharsz) 

        if fcolour != "optional":
            command += " @fcolour=" + str(fcolour) 

        if xpaper != "optional":
            command += " @xpaper=" + str(xpaper) 

        if ypaper != "optional":
            command += " @ypaper=" + str(ypaper) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if progress != "optional":
            command += " @progress=" + str(progress) 

        if display != "optional":
            command += " @display=" + str(display) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def checkit(self):

        """
        CHECKIT
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "checkit "


        self.run_command(command)

    def chktri(self):

        """
        CHKTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "chktri "


        self.run_command(command)

    def closepts(self,
                 holes='optional',
                 points='optional',
                 closhole='optional',
                 closepts='optional',
                 bhstr='optional',
                 ptsstr='optional',
                 bhid='required',
                 x/y/z='optional',
                 retrieval='optional'):

        """
        CLOSEPTS
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        holes: Input
            Input drillhole file within which to find closely spaced points. This file is optional but one 
            either the input HOLES or POINTS file must be specified. If both a HOLES and POINTS file are 
            only the HOLES file is processed. 
            Required=No
        points: Input
            Input points or sample file within which to find closely spaced points. This file is optional 
            one of either the input HOLES or POINTS file must be specified. If both a HOLES and POINTS file are 
            only the HOLES file is processed. 
            Required=No

        Output Files:
        -------------

        closhole: Undefined
            Output file containing a record for each pair of closely spaced collars in the HOLES file. This 
            is ignored if no HOLES file is specified. 
            Required=No
        closepts: Undefined
            Output file containing a record for each pair of closely spaced sample points in the HOLES file, 
            closely spaced points in the POINTS file. 
            Required=No
        bhstr: String
            Output string file containing a two point string for each pair of closely spaced collars in the 
            HOLES file 
            Required=No
        ptsstr: String
            Output string file containing a two point string for each pair of closely spaced 
            in the input HOLES or POINTS file 
            Required=No

        Fields:
        -------

        bhid: Alphanumeric : IN
            Name of the field containing the drillhole identification code or a point identifier field. 
            Default=BHID
            Required=Yes
        x/y/z: Numeric : IN
            Coordinate field in the input HOLES or POINTS file 
            Default=X/Y/Z
            Required=No

        Parameters:
        -----------

        """


        command = "closepts "

        if holes != "optional":
            command += " &holes=" + holes 

        if points != "optional":
            command += " &points=" + points 

        if closhole != "optional":
            command += " &closhole=" + closhole 

        if closepts != "optional":
            command += " &closepts=" + closepts 

        if bhstr != "optional":
            command += " &bhstr=" + bhstr 

        if ptsstr != "optional":
            command += " &ptsstr=" + ptsstr 


        # Required field error check

        if bhid == "required":
            raise ValueError("bhid is required.")

        command += " *bhid=" + bhid 

        if x/y/z != "optional":
            command += " *x/y/z=" + x/y/z 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def clustr(self,
               in_='optional',
               matxin='optional',
               matxfile='optional',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               mattype=0,
               ztran=1,
               retrieval='optional'):

        """
        CLUSTR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Optional raw data input file. 
            Required=No
        matxin: Input
            Optional matrix input file. 
            Required=No

        Output Files:
        -------------

        matxfile: Undefined
            Output file containing similarity or dissimilarity matrix. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Field containing sample identification or variable identification if a matrix input file is 
            
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        mattype: 
            Option Description (0) Product moment correlation matrix. (Similarity Matrix). Note, using 
            value here, must use default value for ZTRAN. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        ztran: 
            Option Description 0 Z Transformation of data not required to calculate matrix. Only 
            for raw data input. (1) Z Transformation of data required to calculate matrix. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "clustr "

        if in_ != "optional":
            command += " &in=" + in_ 

        if matxin != "optional":
            command += " &matxin=" + matxin 

        if matxfile != "optional":
            command += " &matxfile=" + matxfile 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if mattype != "optional":
            command += " @mattype=" + str(mattype) 

        if ztran != "optional":
            command += " @ztran=" + str(ztran) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def cogtri(self,
               wtrin='required',
               wptin='required',
               wtrout='optional',
               wptout='optional',
               ptnout='optional',
               retrieval='optional'):

        """
        COGTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wtrin: Input wireframe triangle file.
            Wireframe Triangle File 
            Required=Yes
        wptin: Input wireframe points file.
            Wireframe Points File 
            Required=Yes

        Output Files:
        -------------

        wtrout: Wireframe Triangle File
            Output wireframe triangle file. This contains all the fields from the input wireframe 
            file and: - XCOG, YCOG, ZCOG: the XYZ coordinates of the centre of each triangle. - if parameter 
            is set to 1 then the fields XP1, YP1, ZP1, XP2, YP2, ZP2, XP3, YP3, ZP3 representing the vertices 
            each triangle will also be included. 
            Required=No
        wptout: Wireframe Points File
            Output wireframe points file. This is a copy of the input wireframe points file. 
            Required=No
        ptnout: Point Data File
            Output point data file containing the following fields: - XPT, YPT, ZPT: the XYZ coordinates of 
            centre of each triangle. - SDIP, DIPDIRN: the dip and dip direction of each triangle, in 
            - SYMBOL, SYMSIZE: the symbol type and symbol size of the rotated symbol. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "cogtri "


        # Required input error check

        if wtrin == "required":
            raise ValueError("wtrin is required.")

        command += " &wtrin=" + wtrin 


        # Required input error check

        if wptin == "required":
            raise ValueError("wptin is required.")

        command += " &wptin=" + wptin 

        if wtrout != "optional":
            command += " &wtrout=" + wtrout 

        if wptout != "optional":
            command += " &wptout=" + wptout 

        if ptnout != "optional":
            command += " &ptnout=" + ptnout 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def combmod(self,
                proto='required',
                in1='required',
                in2='required',
                in3 - 20='optional',
                modelout='required',
                tolernce=0.001,
                retrieval='optional'):

        """
        COMBMOD
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Input block model prototype that defines the extents and parent cell size of the combined 
            Records in this file are ignored. This file is optional. If it is not specified models will be 
            to fill the volume covered by the range of all input files. 
            Required=Yes
        in1: Input
            First input model for combining (sorted on IJK). If no prototype is specified the output 
            model prototype will have the same parent cell size specification as this file and the limits 
            be determined from the combined range of all input files. 
            Required=Yes
        in2: Input
            Second input model for combining (sorted on IJK) 
            Required=Yes
        in3 - 20: Input
            Additional, optional input model files for combining (sorted on IJK) 
            Required=No

        Output Files:
        -------------

        modelout: Model
            Output combined model 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        tolernce: 
            Defines the smallest cell that will be included in OUT. Defined as a factor of XINC, YINC, ZINC. 
            = (0.001). 
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        """


        command = "combmod "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 

        if in3 - 20 != "optional":
            command += " &in3 - 20=" + in3 - 20 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 

        if tolernce != "optional":
            command += " @tolernce=" + str(tolernce) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def compbe(self,
               in_='required',
               out='required',
               bhid='optional',
               from_='optional',
               to='optional',
               density='optional',
               coreloss='optional',
               corerec='optional',
               zone='optional',
               interval="optional",
               mingap=0.05,
               maxgap=0,
               elev=0,
               mincomp="optional",
               maxcomp="optional",
               loss=0,
               print_=0,
               retrieval='optional'):

        """
        COMPBE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Sample data file, sorted on BHID and FROM. Expects fields BHID, FROM, TO, LENGTH, X, Y, Z, A0, B0. 
            Required=Yes

        Output Files:
        -------------

        out: Drillhole
            Composite file. 
            Required=Yes

        Fields:
        -------

        bhid: Any : IN
            Drillhole identifier. 
            Default=BHID
            Required=No
        from: Numeric : IN
            Downhole distance to sample top. 
            Default=FROM
            Required=No
        to: Numeric : IN
            Downhole distance to sample bottom. 
            Default=TO
            Required=No
        density: Numeric : IN
            If present, composites will be density-weighted 
            Default=DENSITY
            Required=No
        coreloss: Numeric : IN
            If present, will be taken as percentage core loss, and treated according to the LOSS parameter. 
            Default=CORELOSS
            Required=No
        corerec: Numeric : IN
            If present, will be taken as percentage core recovery, (100-core loss) and treated according 
            the LOSS parameter. 
            Default=COREREC
            Required=No
        zone: Undefined : Undefined
            Name of field for compositing within. (May be numeric or 4 character alpha). This field must 
            in the IN and will be copied to the OUT file. If specified then new composites will be created each 
            the value of ZONE changes. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        interval: 
            Bench height. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        mingap: 
            Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL. This default value is 
            if the parameter is not specified, or if the value is specified as <=0. A gap of exactly zero is not 
            If you want the composite to be split at every gap, use a very small value for MAXGAP eg 0.0001. 
            Range=Undefined
            Values=Undefined
            Default=0.05
            Required=No
        maxgap: 
            Gap length for termination of composite (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        elev: 
            Reference bench elevation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mincomp: 
            Minimum composite length [0.5 INTERVAL]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxcomp: 
            Maximum composite length [2.0 INTERVAL]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        loss: 
            If core loss or core recovery field is present, controls how it is handled: Option Description 0 
            loss as part of sample. 1 Treat loss as default values. 2 treat as cavity [zero density and 
            
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        print: 
            >2 to display each composite and output file DD (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "compbe "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if from_ != "optional":
            command += " *from=" + from_ 

        if to != "optional":
            command += " *to=" + to 

        if density != "optional":
            command += " *density=" + density 

        if coreloss != "optional":
            command += " *coreloss=" + coreloss 

        if corerec != "optional":
            command += " *corerec=" + corerec 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if interval == "required":
            raise ValueError("interval is required.")

        command += " @interval=" + str(interval) 

        if mingap != "optional":
            command += " @mingap=" + str(mingap) 

        if maxgap != "optional":
            command += " @maxgap=" + str(maxgap) 

        if elev != "optional":
            command += " @elev=" + str(elev) 

        if mincomp != "optional":
            command += " @mincomp=" + str(mincomp) 

        if maxcomp != "optional":
            command += " @maxcomp=" + str(maxcomp) 

        if loss != "optional":
            command += " @loss=" + str(loss) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def compbr(self,
               in_='required',
               out='required',
               value='required',
               bhid='optional',
               from_='optional',
               to='optional',
               density='optional',
               coreloss='optional',
               corerec='optional',
               zone='optional',
               interval="optional",
               cutoff="optional",
               mingap="optional",
               maxgap=0,
               elev=0,
               mincomp="optional",
               maxcomp="optional",
               loss=0,
               print_=0,
               retrieval='optional'):

        """
        COMPBR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Sample data file, sorted on BHID and FROM. Expects fields BHID, FROM, TO, LENGTH, X, Y, Z, A0, B0. 
            Required=Yes

        Output Files:
        -------------

        out: Drillhole
            Composite file. Will include implicit field CUTOFF and explicit fields REC.VAL and FRACTION 
            recovered values. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Field for recovered grade computations. 
            Default=Undefined
            Required=Yes
        bhid: Any : IN
            Drillhole identifier. 
            Default=BHID
            Required=No
        from: Numeric : IN
            Downhole distance to sample top. 
            Default=FROM
            Required=No
        to: Numeric : IN
            Downhole distance to sample bottom. 
            Default=TO
            Required=No
        density: Numeric : IN
            If present, composites will be density-weighted 
            Default=DENSITY
            Required=No
        coreloss: Numeric : IN
            If present, will be taken as percentage core loss, and treated according to the LOSS parameter. 
            Default=CORELOSS
            Required=No
        corerec: Numeric : IN
            If present, will be taken as percentage core recovery, (100-core loss) and treated according 
            the LOSS parameter. 
            Default=COREREC
            Required=No
        zone: Undefined : Undefined
            Name of field for compositing within. (May be numeric or 4 character alpha). This field must 
            in the IN and will be copied to the OUT file. If specified then new composites will be created each 
            the value of ZONE changes. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        interval: 
            Bench height. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        cutoff: 
            Cutoff to be applied to VALUE. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        mingap: 
            Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL. This default value is 
            if the parameter is not specified, or if the value is specified as <=0. A gap of exactly zero is not 
            If you want the composite to be split at every gap, use a very small value for MAXGAP eg 0.0001. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxgap: 
            Gap length for termination of composite (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        elev: 
            Reference bench elevation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mincomp: 
            Minimum composite length [0.5 INTERVAL]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxcomp: 
            Maximum composite length [2.0 INTERVAL]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        loss: 
            If core loss or core recovery field is present, controls how it is handled: Option Description 0 
            loss as part of sample. 1 Treat loss as default values. 2 Treat as cavity [zero density and 
            
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        print: 
            >2 to display each composite and output file DD (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "compbr "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if from_ != "optional":
            command += " *from=" + from_ 

        if to != "optional":
            command += " *to=" + to 

        if density != "optional":
            command += " *density=" + density 

        if coreloss != "optional":
            command += " *coreloss=" + coreloss 

        if corerec != "optional":
            command += " *corerec=" + corerec 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if interval == "required":
            raise ValueError("interval is required.")

        command += " @interval=" + str(interval) 


        # Required parameter error check

        if cutoff == "required":
            raise ValueError("cutoff is required.")

        command += " @cutoff=" + str(cutoff) 

        if mingap != "optional":
            command += " @mingap=" + str(mingap) 

        if maxgap != "optional":
            command += " @maxgap=" + str(maxgap) 

        if elev != "optional":
            command += " @elev=" + str(elev) 

        if mincomp != "optional":
            command += " @mincomp=" + str(mincomp) 

        if maxcomp != "optional":
            command += " @maxcomp=" + str(maxcomp) 

        if loss != "optional":
            command += " @loss=" + str(loss) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def compdh(self,
               in_='required',
               out='required',
               bhid='optional',
               from_='optional',
               to='optional',
               density='optional',
               coreloss='optional',
               corerec='optional',
               zone='optional',
               interval="optional",
               mingap="optional",
               maxgap=0,
               mincomp="optional",
               loss="optional",
               start=0,
               mode=0,
               print_=0,
               retrieval='optional'):

        """
        COMPDH
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Drillhole 
            Required=Yes

        Output Files:
        -------------

        out: Drillhole
            Composite file. 
            Required=Yes

        Fields:
        -------

        bhid: Any : IN
            Drillhole identifier. 
            Default=BHID
            Required=No
        from: Numeric : IN
            Downhole distance to sample top. 
            Default=FROM
            Required=No
        to: Numeric : IN
            Downhole distance to sample bottom. 
            Default=TO
            Required=No
        density: Numeric : IN
            If present, composites will be density- weighted. 
            Default=DENSITY
            Required=No
        coreloss: Numeric : IN
            If present, will be taken as percentage core loss, and treated according to the LOSS parameter. 
            Default=CORELOSS
            Required=No
        corerec: Numeric : IN
            If present, will be taken as percentage core recovery, (100-core loss) and treated according 
            the LOSS parameter. 
            Default=COREREC
            Required=No
        zone: Undefined : Undefined
            Name of field for compositing within. (May be numeric or up to 8 character alpha). This field 
            exists in the IN and will be copied to the OUT file. If specified then new composites will be 
            each time the value of ZONE changes. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        interval: 
            Composite length. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        mingap: 
            Gap length to be ignored. The default gap is calculated as 0.05 INTERVAL. This default value is 
            if the parameter is not specified, or if the value is specified as <=0. A gap of exactly zero is not 
            If you want the composite to be split at every gap, use a very small value for MAXGAP eg 0.0001. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxgap: 
            Gap length for termination of composite (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mincomp: 
            Minimum composite length [0.5 INTERVAL]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        loss: 
            If core loss or core recovery field is present, controls how it is handled: <=0 treat loss as part 
            sample =1 treat loss as default values >=2 treat as cavity [zero density and grades] 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        start: 
            Starting distance down hole (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mode: 
            If MODE is 0, the default, then the maximum composite length will be defined by the INTERVAL 
            and the minimum composite length by the MINCOMP parameter. Thus it is possible for part or all of 
            or more samples to be excluded from the composite. Setting MODE to 1 forces all samples to be 
            in one of the composites by adjusting the composite length, while keeping it as close as 
            to INTERVAL. The maximum possible composite length will then be 1.5*INTERVAL. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            =3 to display each composite and output file DD (0). 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        """


        command = "compdh "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if from_ != "optional":
            command += " *from=" + from_ 

        if to != "optional":
            command += " *to=" + to 

        if density != "optional":
            command += " *density=" + density 

        if coreloss != "optional":
            command += " *coreloss=" + coreloss 

        if corerec != "optional":
            command += " *corerec=" + corerec 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if interval == "required":
            raise ValueError("interval is required.")

        command += " @interval=" + str(interval) 

        if mingap != "optional":
            command += " @mingap=" + str(mingap) 

        if maxgap != "optional":
            command += " @maxgap=" + str(maxgap) 

        if mincomp != "optional":
            command += " @mincomp=" + str(mincomp) 

        if loss != "optional":
            command += " @loss=" + str(loss) 

        if start != "optional":
            command += " @start=" + str(start) 

        if mode != "optional":
            command += " @mode=" + str(mode) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def compse(self,
               in_='required',
               out='required',
               value='required',
               zone='optional',
               owcode='optional',
               cutoff=0,
               minore="optional",
               minglen="optional",
               maxwaste=0,
               minasfr="optional",
               dilute=1,
               narwaste=1,
               anyore2=1,
               retrieval='optional'):

        """
        COMPSE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample file, in BHID and FROM order. This must contain the fields BHID,X,Y,Z,FROM,TO and 
            
            Required=Yes

        Output Files:
        -------------

        out: Drillhole
            Output file of ore and waste composites. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Numeric value field used to control compositing. This may be a grade or a calculated equivalent 
            from grades of different metals. 
            Default=Undefined
            Required=Yes
        zone: Undefined : Undefined
            Name of optional field for compositing within. This field must exist in the input file and can be 
            or alpha. It will be copied to the output file. If specified then new composites will be created 
            time the value of ZONE changes. 
            Default=Undefined
            Required=No
        owcode: Undefined : Undefined
            Output field to contain an Ore/Waste Flag. This will contain values of zero for waste samples 
            values of one (1) for Ore samples. It is possible that some output composite samples will have a 
            value greater than the CUTOFF but be flagged as waste due to internal waste or minimum ore width 
            
            Default=Undefined
            Required=No

        Parameters:
        -----------

        cutoff: 
            Minimum value of VALUE which is considered to be ore (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        minore: 
            Minimum mining width for ore. This must be greater than zero. Output samples must be at least 
            long to be considered as ore, but see also the MINGLEN parameter. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        minglen: 
            Minimum value of sample length multiplied by VALUE that a sample must have to be considered to be 
            The default value is unset ( or zero ). A value of zero is treated as unset. This can be used to treat 
            with a length below the minimum mining width as ore when they have a relatively high grade. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxwaste: 
            Maximum width for internal waste (0.00001). This must be greater than zero. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        minasfr: 
            0.95 
            Range=0,1
            Values=0,1
            Default=Undefined
            Required=Yes
        dilute: 
            Attempt to dilute composites to remove samples with a length less than the minum ore or minimum 
            lengths. =0 : Do not attempt to dilute samples. This is more conservative.. =1 : Attempt to 
            narrow ore samples with adjacent waste and narrow waste samples with adjacent ore. This is the 
            aggressive option and will tend to create longer ore composites of lower grade. 
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        narwaste: 
            Test for carrying narrow waste to be applied to either [1] or both [2] adjacent ores (1). =1 : When 
            samples with configuration: ore - Narrow waste - ore, then proceed if either adjacent ore 
            can carry the internal waste. This is the more aggressive option and will tend to create longer 
            composites of lower grade.. =2 : When compositing samples with configuration: ore - Narrow 
            - ore, then proceed only if both adjacent ore samples can independently carry the internal 
            
            Range=1,2
            Values=1,2
            Default=1
            Required=Yes
        anyore2: 
            When applying rule 2 (see start of this Help file) specify whether narrow waste is composited 
            adjacent narrow ore or wide ore. =0 : When applying Rule 2 composite samples with 
            Narrow ore - Narrow waste - Narrow ore. =1 : When applying Rule 2 composite samples with 
            Any ore - Narrow waste - Any ore. This is the more aggressive option and will tend to create longer 
            composites of lower grade.. 
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        """


        command = "compse "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if zone != "optional":
            command += " *zone=" + zone 

        if owcode != "optional":
            command += " *owcode=" + owcode 


        # Required parameter error check

        if cutoff == "required":
            raise ValueError("cutoff is required.")

        command += " @cutoff=" + str(cutoff) 


        # Required parameter error check

        if minore == "required":
            raise ValueError("minore is required.")

        command += " @minore=" + str(minore) 

        if minglen != "optional":
            command += " @minglen=" + str(minglen) 


        # Required parameter error check

        if maxwaste == "required":
            raise ValueError("maxwaste is required.")

        command += " @maxwaste=" + str(maxwaste) 


        # Required parameter error check

        if minasfr == "required":
            raise ValueError("minasfr is required.")

        command += " @minasfr=" + str(minasfr) 


        # Required parameter error check

        if dilute == "required":
            raise ValueError("dilute is required.")

        command += " @dilute=" + str(dilute) 


        # Required parameter error check

        if narwaste == "required":
            raise ValueError("narwaste is required.")

        command += " @narwaste=" + str(narwaste) 


        # Required parameter error check

        if anyore2 == "required":
            raise ValueError("anyore2 is required.")

        command += " @anyore2=" + str(anyore2) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def comrev(self,
               composit='required',
               tonfac='required',
               outlines='required',
               compmast='required',
               outlmast='required',
               nptsx=20,
               nptsy=20,
               altertf=1,
               alterpr=1,
               altergr=1,
               benchinc=1,
               coordtyp=1,
               loyorig="optional",
               loxorig="optional",
               print_=0,
               retrieval='optional'):

        """
        COMREV
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        composit: Undefined
            Composite file. This is used for extraction of the required composite information. It has the 
            BENCH, BLAST, COMPOSIT, VOLUME, TONNES, CU, FE, MT, P2O5, CO2, TIO2/MT, ZRO2, U3O8, PROFILE, 
            PR, BF, CP, CUB, BN, CC, VALL, T.F., DEST and PROVIS. The Tonnage Factor T.F., the Recovery 
            PROFILE, the TONNES fnd Grade fields may be updated. 
            Required=Yes
        tonfac: Input
            Tonnage Factor file. This must have the fields FE, CO2 and T.F., and must be sorted on fields FE, 
            Each CO2 set of data for a given FE must end with 99. The last record must have an entry with FE=99. 
            Required=Yes
        outlines: Input
            The perimeter outlines corresponding to the composites on file COMPOSIT. This must have the 
            XP, YP, ZP, PTN, PVALUE, PTYPE, P, BENCH and BLAST. All points for a single perimeter must appear 
            in the file. 
            Required=Yes
        compmast: Input
            The Master Composite Value file, containing records for each Composite in the mine. This is 
            for overlays. It must have exactly the same fields as the COMPOSIT file. 
            Required=Yes

        Output Files:
        -------------

        outlmast: Undefined
            The Master Composite Outline file, corresponding to the Value file above. For every outline 
            is accessed during the COMREV process, there should be a corresponding entry in COMPMAST. All 
            for a single perimeter must appear together in the file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        nptsx: 
            Number of points in X direction to be generated during overlay calculations (20). 
            Range=Undefined
            Values=Undefined
            Default=20
            Required=No
        nptsy: 
            Number of points in Y direction to be generated during overlay calculations (20). 
            Range=Undefined
            Values=Undefined
            Default=20
            Required=No
        altertf: 
            Flag controlling Tonnage Factor modifi- cations (1):- Option Description 0 Do not modify 
            Factor. = 1 [Default]. For each composite, show the Bench, Blast, Composite, Cu, P2O5, 
            and Tonnage Factor and ask what modification is required. The choice is [Y] to use Tonnage 
            file; O to use Overlay file; <number> to enter a manual change; N to keep the original value. 2 
            all composite Tonnage Factors automatically from Overlays. 3 Calculate all composite 
            Factors automatically from the Tonnage Factor file; if this fails for any composite, try 
            
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        alterpr: 
            Flag controlling Recovery Profile modifi- cations (1):- Option Description 0 Do not modify 
            Profile. 1 [Default]. For each composite, show the Bench, Blast, Composite, Cu, P2O5, 
            and Recovery Profile and ask what modification is required. The choice is [Y] to use Overlay 
            <number> to enter a manual change; N to keep the original value. 2 Calculate all composite 
            Profiles automatically from Overlays. 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        altergr: 
            Flag controlling Grade Overlays (1); Option Description 0 Do not modify Grades. 1 [Default]. 
            each composite, show the Bench, Blast, Composite, Cu, P2O5, Destination and Recovery Profile 
            ask what modification is required. The choice is [Y] to use Overlay file; N to keep the original 
            2 Calculate all composite Grades automatically from Overlays. 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        benchinc: 
            Bench increment for use in selecting which bench number to use for Overlays. The bench chosen 
            be the current bench of the composite+ BENCHINC. Thus BENCHINC must be set to the required 
            in bench numbers; Option Description 0 Will choose the current bench, 1 will choose the bench 
            (1). 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        coordtyp: 
            Coordinate type: Option Description 0 Conventional rhs. 1 LO coordinate sytsem - South 
            (1). 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        loyorig: 
            -11000 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        loxorig: 
            26000 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        print: 
            Option Description 1 Identify each overlay perimeter found that overlaps the current outline 
            a message, and show the tonnage factor table match found. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "comrev "


        # Required input error check

        if composit == "required":
            raise ValueError("composit is required.")

        command += " &composit=" + composit 


        # Required input error check

        if tonfac == "required":
            raise ValueError("tonfac is required.")

        command += " &tonfac=" + tonfac 


        # Required input error check

        if outlines == "required":
            raise ValueError("outlines is required.")

        command += " &outlines=" + outlines 


        # Required input error check

        if compmast == "required":
            raise ValueError("compmast is required.")

        command += " &compmast=" + compmast 


        # Required output error check

        if outlmast == "required":
            raise ValueError("outlmast is required.")

        command += " &outlmast=" + outlmast 

        if nptsx != "optional":
            command += " @nptsx=" + str(nptsx) 

        if nptsy != "optional":
            command += " @nptsy=" + str(nptsy) 

        if altertf != "optional":
            command += " @altertf=" + str(altertf) 

        if alterpr != "optional":
            command += " @alterpr=" + str(alterpr) 

        if altergr != "optional":
            command += " @altergr=" + str(altergr) 

        if benchinc != "optional":
            command += " @benchinc=" + str(benchinc) 

        if coordtyp != "optional":
            command += " @coordtyp=" + str(coordtyp) 

        if loyorig != "optional":
            command += " @loyorig=" + str(loyorig) 

        if loxorig != "optional":
            command += " @loxorig=" + str(loxorig) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def comval(self,
               composit='required',
               retrieval='optional'):

        """
        COMVAL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        composit: Undefined
            Input/output composite file. This must have the fields BENCH, BLAST, COMPOSIT, VOLUME, 
            CU, FE, MT, P2O5, CO2, TIO2/MT, ZRO2, U3O8, PROFILE, HV, PR, BF, CP, CUB, BN, CC, VALL, T.F., DEST 
            PROVIS. If the input file contains a RECORDNO field, then this will be renumbered. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "comval "


        # Required input error check

        if composit == "required":
            raise ValueError("composit is required.")

        command += " &composit=" + composit 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def conpol(self,
               in_='required',
               perimout='required',
               retrieval='optional'):

        """
        CONPOL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            Output Perimeter file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "conpol "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def contou(self,
               in_='required',
               proto='optional',
               plot='required',
               field='required',
               vmin="optional",
               vmax="optional",
               cint="optional",
               gridint="optional",
               plane='XY',
               position="optional",
               top="optional",
               bottom="optional",
               hilight="optional",
               hi="optional",
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        CONTOU
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK + FIELD field. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. If no plot prototype file, then XMIN, XMAX, YMIN, YMAX taken from the 
            file on IN. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        field: Undefined : Undefined
            Field to be contoured. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        vmin: 
            Minimum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vmax: 
            Maximum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        cint: 
            Contour interval. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        gridint: 
            Grid interval for contouring. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam contour required. Only required if neither POSITION nor 
            appear. Both TOP and BOTTOM set for an isopach. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hilight: 
            Highlight every Nth contour with different colour. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hi: 
            Colour for highlighting. 
            Range=1,64
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "contou "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if proto != "optional":
            command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if field == "required":
            raise ValueError("field is required.")

        command += " *field=" + field 


        # Required parameter error check

        if vmin == "required":
            raise ValueError("vmin is required.")

        command += " @vmin=" + str(vmin) 


        # Required parameter error check

        if vmax == "required":
            raise ValueError("vmax is required.")

        command += " @vmax=" + str(vmax) 


        # Required parameter error check

        if cint == "required":
            raise ValueError("cint is required.")

        command += " @cint=" + str(cint) 


        # Required parameter error check

        if gridint == "required":
            raise ValueError("gridint is required.")

        command += " @gridint=" + str(gridint) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if hilight != "optional":
            command += " @hilight=" + str(hilight) 

        if hi != "optional":
            command += " @hi=" + str(hi) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def contst(self,
               in_='required',
               out='required',
               field='required',
               vmin="optional",
               vmax="optional",
               cint="optional",
               gridint="optional",
               plane='XY',
               position="optional",
               top="optional",
               bottom="optional",
               smpass=1,
               smfactor=0.5,
               smthresh=0.0,
               optype=4,
               hilight="optional",
               hicolour=2,
               colour=1,
               retrieval='optional'):

        """
        CONTST
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK + FIELD field. 
            Required=Yes

        Output Files:
        -------------

        out: String
            Output string file, containing fields XP,YP,ZP, PTN,PVALUE,P. 
            Required=Yes

        Fields:
        -------

        field: Undefined : Undefined
            Field to be contoured. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        vmin: 
            Minimum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vmax: 
            Maximum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        cint: 
            Contour interval. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        gridint: 
            Grid interval for contouring. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        smpass: 
            Number of smoothing passes required (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        smfactor: 
            Smoothing factor in the range 0 [minimum smoothing] to 1 [maximum smoothing] (0.5). 
            Range=0,1
            Values=0,1
            Default=0.5
            Required=No
        smthresh: 
            Smoothing threshold used for operations of types 3,6, and 7 only (0.0). 
            Range=Undefined
            Values=Undefined
            Default=0.0
            Required=No
        optype: 
            Smoothing operation type (4) selected from:- Option Description 1 Laplacian 
            2nd partial derivative) function on surface - used as an indicator of curvature, for example 
            identification of discontinuities. 2 Sq root of sum of 1st partial derivatives, a measure of 
            surface gradient. 3 Adaptive noise reduction for smoothing in areas where difference between 
            grid values exceeds THRESH. 4 Local 5-point mean for smoothing. 5 Local 5-point standard 
            6 Lower thresholding - replace all values below THRESH by the THRESH value. 7 Upper 
            - replace all values above THRESH by the THRESH value. 8 Minkowski dilatation - extend grid 
            by one element using local average value. 
            Range=1,8
            Values=1,2,3,4,5,6,7,8
            Default=4
            Required=No
        hilight: 
            Highlight every Nth contour with different colour. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hicolour: 
            Colour for highlighting (2). 
            Range=1,64
            Values=Undefined
            Default=2
            Required=No
        colour: 
            Default colour for plot (1). 
            Range=1,64
            Values=Undefined
            Default=1
            Required=No
        """


        command = "contst "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if field == "required":
            raise ValueError("field is required.")

        command += " *field=" + field 


        # Required parameter error check

        if vmin == "required":
            raise ValueError("vmin is required.")

        command += " @vmin=" + str(vmin) 


        # Required parameter error check

        if vmax == "required":
            raise ValueError("vmax is required.")

        command += " @vmax=" + str(vmax) 


        # Required parameter error check

        if cint == "required":
            raise ValueError("cint is required.")

        command += " @cint=" + str(cint) 


        # Required parameter error check

        if gridint == "required":
            raise ValueError("gridint is required.")

        command += " @gridint=" + str(gridint) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if smpass != "optional":
            command += " @smpass=" + str(smpass) 

        if smfactor != "optional":
            command += " @smfactor=" + str(smfactor) 

        if smthresh != "optional":
            command += " @smthresh=" + str(smthresh) 

        if optype != "optional":
            command += " @optype=" + str(optype) 

        if hilight != "optional":
            command += " @hilight=" + str(hilight) 

        if hicolour != "optional":
            command += " @hicolour=" + str(hicolour) 

        if colour != "optional":
            command += " @colour=" + str(colour) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def copy(self):

        """
        COPY
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "copy "


        self.run_command(command)

    def copynr(self,
               in_='required',
               out='required',
               base="optional",
               incrment="optional",
               retrieval='optional'):

        """
        COPYNR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file; same as input with addition of field RECORDNO. If RECORDNO already exists in the 
            file, values will be renumbered in the output. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        base: 
            Starting record number (1) [Integer]. 
            Range=nan
            Values=Undefined
            Default=Undefined
            Required=No
        incrment: 
            Record number increment (1) [Integer]. 
            Range=nan
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "copynr "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if base != "optional":
            command += " @base=" + str(base) 

        if incrment != "optional":
            command += " @incrment=" + str(incrment) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def correl(self,
               in_='required',
               fieldlst='optional',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               fieldnam='optional',
               retrieval='optional'):

        """
        CORREL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        f1: Undefined : Undefined
            First field to be correlated. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be correlated. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be correlated. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be correlated. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be correlated. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be correlated. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be correlated. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be correlated. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be correlated. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be correlated. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "correl "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def count(self,
              in_='required',
              out='required',
              key1='required',
              key2='optional',
              key3='optional',
              key4='optional',
              key5='optional',
              key6='optional',
              key7='optional',
              key8='optional',
              key9='optional',
              key10='optional',
              retrieval='optional'):

        """
        COUNT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file, sorted on required keyfields. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            File containing counts. Will contain specified keyfields + field COUNT holding number of 
            combinations found. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for counting. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "count "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def cozone(self,
               in_='required',
               out='optional',
               rockcode='required',
               czxorig="optional",
               czyorig="optional",
               czzorig="optional",
               czmwid="optional",
               czbhht="optional",
               directn="optional",
               print_=0,
               retrieval='optional'):

        """
        COZONE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Model containing rock-type information in the form of a numeric rocktype code. The model must 
            contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, NY, NZ, 
            
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output contact zone model. This will contain the standard 13 model fields plus a field named 
            - the numeric contact zone code. 
            Required=No

        Fields:
        -------

        rockcode: Undefined : Undefined
            Name of field in input model file containing rocktype code. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        czxorig: 
            X co-ordinate of start point for contact zone definition.Default=input model X origin 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        czyorig: 
            Y co-ordinate of start point for contact zone definition.Default=input model Y origin 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        czzorig: 
            Z co-ordinate of start point for contact zone definition.Default=input model Z origin 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        czmwid: 
            Mining width as measured along either X or Y axis direction of model, depending on the DIRECTN 
            Default is the cell size in the direction parallel to the mining face. ie YINC if DIRECTN='X' , 
            if DIRECTN='Y' 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        czbhht: 
            Bench height increment as measured vertically upwards from CZZORIG.Default is Z direction 
            size [ZINC] of the input model 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        directn: 
            'X' 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        print: 
            Option Description 0 for summary of input and total volumes by contact zone. =1 as 0 plus volumes 
            bench (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "cozone "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if out != "optional":
            command += " &out=" + out 


        # Required field error check

        if rockcode == "required":
            raise ValueError("rockcode is required.")

        command += " *rockcode=" + rockcode 

        if czxorig != "optional":
            command += " @czxorig=" + str(czxorig) 

        if czyorig != "optional":
            command += " @czyorig=" + str(czyorig) 

        if czzorig != "optional":
            command += " @czzorig=" + str(czzorig) 

        if czmwid != "optional":
            command += " @czmwid=" + str(czmwid) 

        if czbhht != "optional":
            command += " @czbhht=" + str(czbhht) 

        if directn != "optional":
            command += " @directn=" + str(directn) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def crscor(self,
               in_='required',
               out='required',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               sampdist=0,
               print_=0,
               retrieval='optional'):

        """
        CRSCOR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain a sample identifier field. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file includes LAG-L, DISTANCE, R-L the cross correlation function and SIGNIC the 
            of the cross correlation function for use in graphical processes. 
            Required=Yes

        Fields:
        -------

        sampid: Undefined : Undefined
            Sample identifier field in input file. 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First variable for evaluation. If no variables are selected all variables will be processed. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second variable for evaluation. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third variable for evaluation. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth variable for evaluation. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth variable for evaluation. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth variable for evaluation. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh variable for evaluation. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth variable for evaluation. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth variable for evaluation. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth variable for evaluation. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        sampdist: 
            Option Description (0) Distance between sample points to calculate the cross-correlation 
            If no distance is specified the sample distance is lag distance. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        print: 
            >0 Display results on the screen (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "crscor "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if sampdist != "optional":
            command += " @sampdist=" + str(sampdist) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def csmodel(self,
                points='required',
                quantile='optional',
                cutoff='optional',
                simmod='optional',
                statmod='optional',
                reserves='optional',
                plot='optional',
                grade='required',
                xpppc=0,
                ypppc=0,
                zpppc=0,
                fullcell=1,
                quantile=2,
                cutoff="optional",
                density=1,
                rescsv=0,
                gplot=0,
                tplot=0,
                mplot=0,
                gtplot=0,
                retrieval='optional'):

        """
        CSMODEL
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        points: Input
            Input points file containing simulated points as created by SGSIM. This must include the 
            fields XPT, YPT, ZPT, the grade field GRADE and the simulation (realization) number field 
            It must also include the implicit fields XMORIG1, YMORIG1, ZMORIG1, XINC1, YINC1, ZINC1, NX1, 
            NZ1 defining the grid origin, size and number of points, as well as the fields XPPPC, YPPPC, 
            defining the number of points per parent cell for the output model. These implicit fields will 
            been added automatically by the process SGSIM . 
            Required=Yes
        quantile: Input
            Input file containing list of percentile values defined using field PERCENT. The GRADE value 
            to each PERCENT value is included in the output STAT MOD file. The maximum number of percentiles 
            in the file is 30. If a QUANTILE file is not specified then percentiles at equal intervals can be 
            using parameter QUANTILE . 
            Required=No
        cutoff: Input
            Input file containing list of cutoff grades defined using field COGRADE. The proportion of 
            cell above cutoff, the grade above cutoff and the grade below cutoff are calculated and written 
            the STATMOD file. The maximum number of cutoffs defined in the file is 13 (single precision) or 
            (double precision). If a CUTOFF file is not specified then a single cutoff can be defined using 
            CUTOFF . 
            Required=No

        Output Files:
        -------------

        simmod: Block Model
            Output block model file containing the simulated GRADE values for each cell and each 
            The values are calculated by averaging the simulated points lying within the cell according to 
            number of points per cell defined by the XPPPC , YPPPC and ZPPPC parameters. The SIMMOD file can 
            the same as the STATMOD file. Although SIMMOD and STATMOD are both optional, at least one of the 
            must be defined. 
            Required=No
        statmod: Block Model
            Output block model file containing statistical parameters for each cell. The value of each 
            for each realization is calculated by averaging the simulated points lying within the cell (as 
            by the XPPPC , YPPPC and ZPPPC parameters) and then statistics (mean, variance, etc) are 
            for the simulated cell values for each cell. The statistics are stored in the STATMOD file. The 
            file will also includes the percentile values as defined by the QUANTILE file or the QUANTILE 
            and the proportion and grade of each cell above cutoff for cutoffs defined by the CUTOFF file or 
            CUTOFF parameter. The STATMOD file can be the same as the SIMMOD file. Although SIMMOD and 
            are both optional, at least one of the two must be defined. 
            Required=No
        reserves: Table
            Output file containing total tonnes above cutoff, grade above cutoff and grade below cutoff 
            those cutoffs defined by the CUTOFF file or the CUTOFF parameter. The four fields in the 
            file are CUTOFF, TONABOVE, GRDABOVE and GRDBELOW. If a RESERVES file is specified then the 
            file must also be defined. If parameter FULLCELL=1 then the tonnes and grades apply to the EType 
            for parent cells. The EType is a smoothed estimate and does not therefore correctly represent 
            recovered values for Selective Mining Units (SMUs). If FULLCELL=0 then the tonnes and grade 
            the average of the values for individual simulations. This represents the values for SMUs 
            to the parent cell size. 
            Required=No
        plot: Plot
            Template name for output plot file(s) showing tonnes, grade and/or metal above cutoff (Y axis) 
            cutoff (X axis). The PLOT file template name should be a maximum of 6 characters. One or two 
            are added to this name to create the actual file name, as follows: G - Grade T - Tonnes M - Metal GT - 
            and Tonnes, on same plot The parameters GPLOT , TPLOT , MPLOT and GTPLOT define which plots to 
            A minimum of 2 cutoffs must be defined and a STATMOD file specified in order for the PLOT file(s) 
            be created. 
            Required=No

        Fields:
        -------

        grade: Undefined : Undefined
            Field in the input POINTS sample file defining the simulated grade. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        xpppc: 
            Number of simulated points in the X direction to be averaged into a parent cell. If set to 0 then 
            value of the XPPPC parameter used by command SGSIM for creating the POINTS sample file will be 
            This value is stored as the default value of the XPPPC field in the POINTS file. 
            Range=0,200
            Values=Undefined
            Default=0
            Required=No
        ypppc: 
            Number of simulated points in the Y direction to be averaged into a parent cell. If set to 0 then 
            value of the YPPPC parameter used by command SGSIM for creating the POINTS sample file will be 
            This value is stored as the default value of the YPPPC field in the POINTS file. 
            Range=0,200
            Values=Undefined
            Default=0
            Required=No
        zpppc: 
            Number of simulated points in the Z direction to be averaged into a parent cell. If set to 0 then 
            value of the ZPPPC parameter used by command SGSIM for creating the POINTS sample file will be 
            This value is stored as the default value of the ZPPPC field in the POINTS file. 
            Range=0,200
            Values=Undefined
            Default=0
            Required=No
        fullcell: 
            Flag to show whether the RESERVES files and plots are to be created using full (1) or partial cell 
            Option Description 0 Use partial cell evaluation. 1 Use full cell evaluation. No 1 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        quantile: 
            The number of percentiles minus 1 to be calculated and output in the STATMOD file. For example if 
            = 5 then the 4 percentiles 20%, 40%, 60%, 80% are calculated; if QUANTILE 
            Range=2,30
            Values=Undefined
            Default=2
            Required=No
        cutoff: 
            The cutoff grade. The proportion of each cell above cutoff, the grade above cutoff and the grade 
            cutoff are calculated and written to the STATMOD file. If more than one cutoff is required then 
            cutoffs can be specified in the CUTOFF file. If a CUTOFF file is specified then the CUTOFF 
            will be ignored. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        density: 
            Density. This used for calculating tonnes above cutoff. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        rescsv: 
            Flag to show whether the RESERVES file should be created as a CSV file as well as a Datamine file, 
            that it can be read directly into Excel. The name of the CSV file will be the same as the Datamine 
            but with the extension .csv. Option Description 0 Do not create a CSV file. 1 Create a CSV file. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        gplot: 
            Flag to indicate whether a plot of grade above cutoff v cutoff should be created. The name of the 
            file is defined by the plot file template PLOT , with the additional character G. A minimum of 2 
            must be defined and a STATMOD file specified in order for the plot file to be created. Option 
            0 Do not create plot 1 Create plot; 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        tplot: 
            Flag to indicate whether a plot of tonnes above cutoff v cutoff should be created. The name of the 
            file is defined by the plot file template PLOT , with the additional character T. A minimum of 2 
            must be defined and a STATMOD file specified in order for the plot file to be created. Option 
            0 Do not create plot 1 Create plot 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        mplot: 
            Flag to indicate whether a plot of metal above cutoff v cutoff should be created. The name of the 
            file is defined by the plot file template PLOT , with the additional character M. A minimum of 2 
            must be defined and a STATMOD file specified in order for the plot file to be created. Option 
            0 Do not create plot 1 Create plot 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        gtplot: 
            Flag to indicate whether a plot of grade above cutoff v cutoff and tonnes above cutoff v cutoff 
            be created on the same plot. The name of the plot file is defined by the plot file template PLOT , 
            the additional characters GT. A minimum of 2 cutoffs must be defined and a STATMOD file 
            in order for the plot file to be created. Option Description 0 Do not create plot 1 Create plot 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "csmodel "


        # Required input error check

        if points == "required":
            raise ValueError("points is required.")

        command += " &points=" + points 

        if quantile != "optional":
            command += " &quantile=" + quantile 

        if cutoff != "optional":
            command += " &cutoff=" + cutoff 

        if simmod != "optional":
            command += " &simmod=" + simmod 

        if statmod != "optional":
            command += " &statmod=" + statmod 

        if reserves != "optional":
            command += " &reserves=" + reserves 

        if plot != "optional":
            command += " &plot=" + plot 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if xpppc != "optional":
            command += " @xpppc=" + str(xpppc) 

        if ypppc != "optional":
            command += " @ypppc=" + str(ypppc) 

        if zpppc != "optional":
            command += " @zpppc=" + str(zpppc) 

        if fullcell != "optional":
            command += " @fullcell=" + str(fullcell) 

        if quantile != "optional":
            command += " @quantile=" + str(quantile) 

        if cutoff != "optional":
            command += " @cutoff=" + str(cutoff) 

        if density != "optional":
            command += " @density=" + str(density) 

        if rescsv != "optional":
            command += " @rescsv=" + str(rescsv) 

        if gplot != "optional":
            command += " @gplot=" + str(gplot) 

        if tplot != "optional":
            command += " @tplot=" + str(tplot) 

        if mplot != "optional":
            command += " @mplot=" + str(mplot) 

        if gtplot != "optional":
            command += " @gtplot=" + str(gtplot) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def csowopt(self,
                statmod='required',
                reserves='required',
                oremod='optional',
                plot='optional',
                retrieval='optional'):

        """
        CSOWOPT
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        statmod: Input
            Conditionally simulated block model statistics file. This file will have been created as the 
            STATMOD file by CSMODEL, and must include the fields PAx, GAx and GBx for at least one value of 
            grade x. 
            Required=Yes

        Output Files:
        -------------

        reserves: Table
            Output reserves file containing total tonnes and grade for blocks calculated as ore, 
            by processing cost, metal price and cutoff. 
            Required=Yes
        oremod: Block Model
            Output block model. This file includes flag field OWx which equals 1 if the block is ore and 0 if it 
            waste, for each cutoff x, for processing cost COSTMIN and metal price PRICEMIN . 
            Required=No
        plot: Plot
            Template name for output plot file(s) showing tonnes, grade and/or metal above cutoff (Y axis) 
            cutoff (X axis). The PLOT file template name should be a maximum of 7 characters. A single 
            is added to this name to create the actual file name, as follows: G - Grade T - Tonnes M - Metal The 
            GPLOT , TPLOT and MPLOT define which plots to create. A minimum of 2 cutoffs must have been 
            in order for the PLOT file(s) to be created. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "csowopt "


        # Required input error check

        if statmod == "required":
            raise ValueError("statmod is required.")

        command += " &statmod=" + statmod 


        # Required output error check

        if reserves == "required":
            raise ValueError("reserves is required.")

        command += " &reserves=" + reserves 

        if oremod != "optional":
            command += " &oremod=" + oremod 

        if plot != "optional":
            command += " &plot=" + plot 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def daily(self,
              composit='required',
              loads='required',
              bypad=0,
              year="optional",
              month="optional",
              day="optional",
              ticutoff="optional",
              chalprec=0.86,
              cubanrec=0.60,
              bornrec=0.90,
              chalcrec=0.85,
              retrieval='optional'):

        """
        DAILY
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        composit: Input
            Composite file. This is used for extraction of the required composite information. It has the 
            BENCH, BLAST, COMPOSIT, VOLUME, TONNES, CU, FE, MT, P2O5, CO2, TIO2/MT, ZRO2, U3O8, PROFILE, 
            PR, BF, CP, CUB, BN, CC, VALL, T.F., DEST and PROVIS. This is the Master Composite File. 
            Required=Yes
        loads: Input
            Input loads file. This must have the fields YEAR, MONTH, DAY, BENCH, COMPOSIT, TYPE, TRUCKTYP, 
            The LOADS file is normally set up and maintained by AED from the daily input loads. The fields 
            YEAR : Year number as e.g. 89 for 1989. MONTH : Month number as e.g. 12 for December. DAY : Day 
            as e.g. 21 for 21st. BENCH : Bench number. COMPOSIT: Composite number. TYPE : Ore Type (A4). This 
            only have the values LOTI, HITI or HITA (the last for Autogenous HiTi. TRUCKTYP: Truck Type 
            This may only have the values M36, LH or M36N. LOADS : The number of loads of this ore type taken by 
            truck type from this composite on the date specified. The LOADS file can have information for as 
            days as required. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        bypad: 
            Add reports for pads one to five = 1. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        year: 
            Today's date: year, e.g. 89 for 1989. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        month: 
            Today's date: month e.g. 12 for December. 
            Range=1,12
            Values=Undefined
            Default=Undefined
            Required=Yes
        day: 
            Today's date: day. 
            Range=1,31
            Values=Undefined
            Default=Undefined
            Required=Yes
        ticutoff: 
            TiO2 cut-off for calculation of Tons HiTi in LoTi ore and LoTi in HiTi ore. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        chalprec: 
            Chalcopyrite recovery between 0.0 and 1.0. (0.86) 
            Range=0,1
            Values=0,1
            Default=0.86
            Required=No
        cubanrec: 
            Cubanite recovery between 0.0 and 1.0. (0.60) 
            Range=0,1
            Values=0,1
            Default=0.60
            Required=No
        bornrec: 
            Bornite recovery between 0.0 and 1.0. (0.90) 
            Range=0,1
            Values=0,1
            Default=0.90
            Required=No
        chalcrec: 
            Chalcocite recovery between 0.0 and 1.0. (0.85) 
            Range=0,1
            Values=0,1
            Default=0.85
            Required=No
        """


        command = "daily "


        # Required input error check

        if composit == "required":
            raise ValueError("composit is required.")

        command += " &composit=" + composit 


        # Required input error check

        if loads == "required":
            raise ValueError("loads is required.")

        command += " &loads=" + loads 

        if bypad != "optional":
            command += " @bypad=" + str(bypad) 


        # Required parameter error check

        if year == "required":
            raise ValueError("year is required.")

        command += " @year=" + str(year) 


        # Required parameter error check

        if month == "required":
            raise ValueError("month is required.")

        command += " @month=" + str(month) 


        # Required parameter error check

        if day == "required":
            raise ValueError("day is required.")

        command += " @day=" + str(day) 


        # Required parameter error check

        if ticutoff == "required":
            raise ValueError("ticutoff is required.")

        command += " @ticutoff=" + str(ticutoff) 

        if chalprec != "optional":
            command += " @chalprec=" + str(chalprec) 

        if cubanrec != "optional":
            command += " @cubanrec=" + str(cubanrec) 

        if bornrec != "optional":
            command += " @bornrec=" + str(bornrec) 

        if chalcrec != "optional":
            command += " @chalcrec=" + str(chalcrec) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ddcopy(self):

        """
        DDCOPY
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "ddcopy "


        self.run_command(command)

    def ddlist(self,
               in_='required',
               retrieval='optional'):

        """
        DDLIST
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be displayed. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "ddlist "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def decile(self,
               in_='required',
               priout='required',
               decout='optional',
               splitout='optional',
               retrieval='optional'):

        """
        DECILE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample file 
            Required=Yes

        Output Files:
        -------------

        priout: Undefined
            Output print file containing sample decile information. 
            Required=Yes
        decout: Table File
            Output file containing sample decile information. Not including the top 10% subsplit 
            Required=No
        splitout: Table File
            Output file containing sample decile information. Including the top 10% subsplit 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "decile "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if priout == "required":
            raise ValueError("priout is required.")

        command += " &priout=" + priout 

        if decout != "optional":
            command += " &decout=" + decout 

        if splitout != "optional":
            command += " &splitout=" + splitout 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def declust(self,
                in_='required',
                out='optional',
                wtout='optional',
                wgts_tbl='optional',
                stat_tbl='optional',
                x='required',
                y='required',
                z='required',
                wtfield='optional',
                method=1,
                xgrid="optional",
                ygrid="optional",
                zgrid="optional",
                xorig=0,
                yorig=0,
                zorig=0,
                centre=0,
                retrieval='optional'):

        """
        DECLUST
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data file. This must contain a set of 3D coordinates (eg X,Y,Z) and at least one 
            field. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing declustered samples.At least one of the two output files OUT or WTOUT 
            be selected. 
            Required=No
        wtout: Undefined
            Output file containing declustered weights. This will be a copy of the IN file, but will also 
            the field DCWEIGHT.At least one of the two output files OUT or WTOUT must be selected. 
            Required=No
        wgts_tbl: Undefined
            Output file containing summary statistics for declustered weights. 
            Required=No
        stat_tbl: Undefined
            Output file containing summary statistics for declustered and clustered WTFIELD samples. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of sample data 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y coordinate of sample data 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Z coordinate of sample data 
            Default=Z
            Required=Yes
        wtfield: Undefined : Undefined
            Field to be used for calculating declustered weights.This is only relevant if a WTOUT file has 
            specified and one or more of the grade fields in the IN file contain absent data 
            a WTFIELD field ensures that records containing absent data values for that field will be 
            a WTFIELD field is not specified but a WTOUT file has been selected then the Z field is used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        method: 
            Declustering method if OUT file specified: 1 = random selection within grid (different 
            each run) 2 = pseudo random selection within grid (repeatable) 3 = nearest to grid centre 4 = 
            of samples within grid 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        xgrid: 
            Grid size in X 
            Range=0.00001,+
            Values=Undefined
            Default=Undefined
            Required=Yes
        ygrid: 
            Grid size in Y 
            Range=0.00001,+
            Values=Undefined
            Default=Undefined
            Required=Yes
        zgrid: 
            Grid size in Z 
            Range=0.00001,+
            Values=Undefined
            Default=Undefined
            Required=Yes
        xorig: 
            X coordinate of grid origin 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yorig: 
            Y coordinate of grid origin 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zorig: 
            Z coordinate of grid origin 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        centre: 
            Flag to show whether the X, Y and Z coordinates of the grid centre should be included in the OUT 
            selected the names of the fields in the file will be XCENTRE, YCENTRE and ZCENTRE: 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "declust "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if out != "optional":
            command += " &out=" + out 

        if wtout != "optional":
            command += " &wtout=" + wtout 

        if wgts_tbl != "optional":
            command += " &wgts_tbl=" + wgts_tbl 

        if stat_tbl != "optional":
            command += " &stat_tbl=" + stat_tbl 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if wtfield != "optional":
            command += " *wtfield=" + wtfield 

        if method != "optional":
            command += " @method=" + str(method) 


        # Required parameter error check

        if xgrid == "required":
            raise ValueError("xgrid is required.")

        command += " @xgrid=" + str(xgrid) 


        # Required parameter error check

        if ygrid == "required":
            raise ValueError("ygrid is required.")

        command += " @ygrid=" + str(ygrid) 


        # Required parameter error check

        if zgrid == "required":
            raise ValueError("zgrid is required.")

        command += " @zgrid=" + str(zgrid) 

        if xorig != "optional":
            command += " @xorig=" + str(xorig) 

        if yorig != "optional":
            command += " @yorig=" + str(yorig) 

        if zorig != "optional":
            command += " @zorig=" + str(zorig) 

        if centre != "optional":
            command += " @centre=" + str(centre) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def decode(self,
               in_='required',
               dict='required',
               out='required',
               code='required',
               text='required',
               retrieval='optional'):

        """
        DECODE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be decoded. This contains the field CODE (real name specified below) which is 
            through the dictionary file DICT matching with the CODE field, and writing the equivalent TEXT 
            from the dictionary to the output file as field TEXT. 
            Required=Yes
        dict: Input
            Dictionary file (fields CODE and TEXT). There should be only one occurrence of each CODE value. 
            file MUST be sorted on CODE. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Decoded file. An exact copy of the input file with the decoded field TEXT added. 
            Required=Yes

        Fields:
        -------

        code: Undefined : Undefined
            Field to be translated in input file. 
            Default=Undefined
            Required=Yes
        text: Undefined : Undefined
            Field holding translated text, on output file. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        """


        command = "decode "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if dict == "required":
            raise ValueError("dict is required.")

        command += " &dict=" + dict 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if code == "required":
            raise ValueError("code is required.")

        command += " *code=" + code 


        # Required field error check

        if text == "required":
            raise ValueError("text is required.")

        command += " *text=" + text 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def delete(self,
               in_='required',
               confirm=0,
               retrieval='optional'):

        """
        DELETE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be deleted. If IN is a catalogue file, then all the files in the catalogue will be deleted 
            confirmed. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        confirm: 
            Option Description 1; If IN is a catalogue file, then a request for confirmation will be issued 
            each file in the catalogue. If IN is a individual database file, then confirmation that the file 
            to be deleted is requested. Default: (0). >>> OPERATING ON A CATALOGUE FILE INPUT <<< >>> ARE YOU 
            YOU WISH TO DELETE ALL FILES <<< >>> PRESS <RETURN> TO CONTINUE (OR ! TO TERMINATE) > 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "delete "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if confirm != "optional":
            command += " @confirm=" + str(confirm) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def desurv(self,
               in1='required',
               in2='optional',
               out='required',
               bhid='optional',
               xcollar='optional',
               ycollar='optional',
               zcollar='optional',
               from_='optional',
               to='optional',
               at='optional',
               brg='optional',
               dip='optional',
               survsmth=1,
               print_=0,
               retrieval='optional'):

        """
        DESURV
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Data file of downhole distances, sorted on BHID and FROM. Expects fields BHID, XCOLLAR, 
            ZCOLLAR, FROM, TO; optional BRG, DIP. 
            Required=Yes
        in2: Input
            Survey data file, sorted on BHID and AT. Expects fields BHID, AT, BRG, DIP. If a borehole has 
            Data, then it must include a record for the collar location, i.e. AT=0 
            Required=No

        Output Files:
        -------------

        out: Drillhole
            Output sample data file. 
            Required=Yes

        Fields:
        -------

        bhid: Any : IN1
            Drillhole identifier. 
            Default=BHID
            Required=No
        xcollar: Numeric : IN1
            X co-ordinate of drillhole collar. 
            Default=XCOLLAR
            Required=No
        ycollar: Numeric : IN1
            Y co-ordinate of drillhole collar. 
            Default=YCOLLAR
            Required=No
        zcollar: Numeric : IN1
            Z co-ordinate of drillhole collar. 
            Default=ZCOLLAR
            Required=No
        from: Numeric : IN1
            Downhole distance to sample top. 
            Default=FROM
            Required=No
        to: Numeric : IN1
            Downhole distance to sample bottom. 
            Default=TO
            Required=No
        at: Numeric : IN2
            Downhole distance to survey point. 
            Default=AT
            Required=No
        brg: Numeric : IN2
            Bearing of drillhole. 
            Default=BRG
            Required=No
        dip: Numeric : IN2
            Dip of drillhole. 
            Default=DIP
            Required=No

        Parameters:
        -----------

        survsmth: 
            =0 to prevent samples being added to the output file. =1 to add samples where there are more than 
            survey record per sample. (1). When a hole sample is desurveyed the survey data (azimuth and 
            of the sample is used to locate the sample centre point in space. A desurveyed drillhole file 
            a set of samples each with a calculated center point in XYZ world space. Sometimes raw drillhole 
            tables to be desurveyed may contain more than one survey record within one sample, each with 
            azimuth and dips. Since a sample is by definition a straight line its location in space cannot be 
            using more than one survey record. The SURVSMTH parameter is used to automatically divide up 
            where more than one survey records lie within a sample. The samples are split in half until only 
            survey record lies within each sample. Therefore many samples may be created. The default 
            of SURVSMTH is 1 which will cause extra samples to be created so that no sample contains more than 
            survey record within its FROM and TO values. For no extra samples to be created the SURVSMTH 
            should be set to zero. If the SURVSMTH parameter is set to zero and a sample does contain more than 
            survey record not all survey records will be taken into account. Traditionally this has been 
            by first compositing the samples to reduce their lengths. The SURVSMTH parameter avoids this 
            It is often the case that the first one or two samples in exploration holes contain more than one 
            record because they are relatively long. This is because sample divisions have not had to have 
            created through assay and lithological identification near the surface. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        print: 
            >=2 to display each output record and sample data file DD (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "desurv "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 

        if in2 != "optional":
            command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if xcollar != "optional":
            command += " *xcollar=" + xcollar 

        if ycollar != "optional":
            command += " *ycollar=" + ycollar 

        if zcollar != "optional":
            command += " *zcollar=" + zcollar 

        if from_ != "optional":
            command += " *from=" + from_ 

        if to != "optional":
            command += " *to=" + to 

        if at != "optional":
            command += " *at=" + at 

        if brg != "optional":
            command += " *brg=" + brg 

        if dip != "optional":
            command += " *dip=" + dip 

        if survsmth != "optional":
            command += " @survsmth=" + str(survsmth) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def diffrn(self,
               in1='required',
               in2='required',
               out='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        DIFFRN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            File to have records deleted (sorted on required keyfields). 
            Required=Yes
        in2: Input
            File containing keyfield values for deletion (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for file matching. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "diffrn "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dilute(self,
               in_='required',
               out='required',
               bhid='required',
               from_='required',
               to='required',
               seamid='required',
               dilup="optional",
               dildown="optional",
               thinnest="optional",
               retrieval='optional'):

        """
        DILUTE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain at least fields for BHID, FROM, TO and SEAMID. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. 
            Required=Yes

        Fields:
        -------

        bhid: Any : IN
            Borehole identifier. May be numeric or alpha. 
            Default=BHID
            Required=Yes
        from: Numeric : IN
            Downhole FROM distance (top of intersection). 
            Default=FROM
            Required=Yes
        to: Numeric : IN
            Downhole TO distance (base of intersection). 
            Default=TO
            Required=Yes
        seamid: Any : IN
            Identification for intersections. Must be numeric or alpha up to a maximum of 4 chars. 
            Default=SEAMID
            Required=Yes

        Parameters:
        -----------

        dilup: 
            Dilution distance up from FROM positions. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        dildown: 
            Dilution distance down from TO positions. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        thinnest: 
            Thinnest acceptable seam. Any thinner intersections are eliminated. Note:- 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "dilute "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if bhid == "required":
            raise ValueError("bhid is required.")

        command += " *bhid=" + bhid 


        # Required field error check

        if from_ == "required":
            raise ValueError("from_ is required.")

        command += " *from_=" + from_ 


        # Required field error check

        if to == "required":
            raise ValueError("to is required.")

        command += " *to=" + to 


        # Required field error check

        if seamid == "required":
            raise ValueError("seamid is required.")

        command += " *seamid=" + seamid 


        # Required parameter error check

        if dilup == "required":
            raise ValueError("dilup is required.")

        command += " @dilup=" + str(dilup) 


        # Required parameter error check

        if dildown == "required":
            raise ValueError("dildown is required.")

        command += " @dildown=" + str(dildown) 

        if thinnest != "optional":
            command += " @thinnest=" + str(thinnest) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dilutmod(self,
                 modin='required',
                 modout1='required',
                 modout2='optional',
                 resource='optional',
                 rock='required',
                 density='optional',
                 grade1='required',
                 grade2-10='optional',
                 xwidth=1,
                 ywidth=1,
                 zwidth=1,
                 density=1,
                 retrieval='optional'):

        """
        DILUTMOD
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modin: Input
            Input block model file. 
            Required=Yes

        Output Files:
        -------------

        modout1: Model
            Diluted output model file - same as MODIN except that all grades are diluted. 
            Required=Yes
        modout2: Model
            Combined output model file - includes both undiluted and diluted grade fields. Diluted grade 
            names have D as the first character. 
            Required=No
        resource: Model
            Resources table comparing tonnes and grade for undiluted and diluted models classified by 
            
            Required=No

        Fields:
        -------

        rock: Undefined : Undefined
            Rock field. 
            Default=Undefined
            Required=Yes
        density: Undefined : Undefined
            Density field. If the model does not include a DENSITY field then the density can be set with 
            @DENSITY 
            Default=Undefined
            Required=No
        grade1: Undefined : Undefined
            Grade field 1 
            Default=Undefined
            Required=Yes
        grade2-10: Undefined : Undefined
            Additional, optional, grade fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        xwidth: 
            Dilution width in X direction 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ywidth: 
            Dilution width in Y direction 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zwidth: 
            Dilution width in Z direction 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        density: 
            Density value to be used if DENSITY field does not exist. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "dilutmod "


        # Required input error check

        if modin == "required":
            raise ValueError("modin is required.")

        command += " &modin=" + modin 


        # Required output error check

        if modout1 == "required":
            raise ValueError("modout1 is required.")

        command += " &modout1=" + modout1 

        if modout2 != "optional":
            command += " &modout2=" + modout2 

        if resource != "optional":
            command += " &resource=" + resource 


        # Required field error check

        if rock == "required":
            raise ValueError("rock is required.")

        command += " *rock=" + rock 

        if density != "optional":
            command += " *density=" + density 


        # Required field error check

        if grade1 == "required":
            raise ValueError("grade1 is required.")

        command += " *grade1=" + grade1 

        if grade2-10 != "optional":
            command += " *grade2-10=" + grade2-10 

        if xwidth != "optional":
            command += " @xwidth=" + str(xwidth) 

        if ywidth != "optional":
            command += " @ywidth=" + str(ywidth) 

        if zwidth != "optional":
            command += " @zwidth=" + str(zwidth) 

        if density != "optional":
            command += " @density=" + str(density) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def discan(self,
               in_='required',
               centrds='optional',
               functs='optional',
               scores='optional',
               groupid='required',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               resum=0,
               primat=0,
               prisco=0,
               retrieval='optional'):

        """
        DISCAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain group and sample identity fields. A maximum of ten groups are 
            The file must be sorted on the *GROUPID field. 
            Required=Yes

        Output Files:
        -------------

        centrds: Undefined
            Optional output file containing group centroids identified by the field named in GROUPID. 
            Required=No
        functs: Undefined
            Optional output file containing discriminant functions. 
            Required=No
        scores: Undefined
            Optional output file containing the calculated scores for the individual samples and a 
            field. 
            Required=No

        Fields:
        -------

        groupid: Undefined : Undefined
            Compulsory group identifier field contained in input file IN. 
            Default=Undefined
            Required=Yes
        sampid: Undefined : Undefined
            Compulsory sample identifier field contained in input file IN. 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        resum: 
            Option Description (0) Do not print summary statistics. 1 Do print summary statistics. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        primat: 
            Option Description (0) Option to display sums of squares matrices. Set to 1 for matrices to be 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        prisco: 
            Option Description (0) Option to display group scores. Set to 1 for scores to be displayed. 
            do not use for large files. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "discan "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if centrds != "optional":
            command += " &centrds=" + centrds 

        if functs != "optional":
            command += " &functs=" + functs 

        if scores != "optional":
            command += " &scores=" + scores 


        # Required field error check

        if groupid == "required":
            raise ValueError("groupid is required.")

        command += " *groupid=" + groupid 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if resum != "optional":
            command += " @resum=" + str(resum) 

        if primat != "optional":
            command += " @primat=" + str(primat) 

        if prisco != "optional":
            command += " @prisco=" + str(prisco) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def discla(self,
               in_='required',
               infuncts='required',
               incentrd='required',
               out='required',
               groupid='required',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               retrieval='optional'):

        """
        DISCLA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. Must contain sample identity field. 
            Required=Yes
        infuncts: Input
            Input file containing discriminant functions. Produced from process DISCAN. 
            Required=Yes
        incentrd: Input
            Input file containing group centroids. Produced from process DISCAN. Must contain a group 
            field specified in GROUPID. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing samples classified into groups identified by the GROUPID field and the 
            scores.. 
            Required=Yes

        Fields:
        -------

        groupid: Undefined : Undefined
            Compulsory group identifier field contained in INCENTRD. 
            Default=Undefined
            Required=Yes
        sampid: Undefined : Undefined
            Compulsory sample identifier field in input file IN. 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "discla "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if infuncts == "required":
            raise ValueError("infuncts is required.")

        command += " &infuncts=" + infuncts 


        # Required input error check

        if incentrd == "required":
            raise ValueError("incentrd is required.")

        command += " &incentrd=" + incentrd 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if groupid == "required":
            raise ValueError("groupid is required.")

        command += " *groupid=" + groupid 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def displa(self,
               in_='required',
               hardcopy=0,
               truesize=0,
               xoffset=0,
               yoffset=0,
               pause="optional",
               scale="optional",
               retrieval='optional'):

        """
        DISPLA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Plot file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, XMAX, 
            YMAX, XSCALE, YSCALE, XORIG, YORIG, XRT, YTP, XPICRT, YPICTP, CHARSIZE and ASPRATIO 
            implicit). IN may also be a catalogue file, in which case all files in the catalogue will be 
            in sequence. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        hardcopy: 
            Option Description 1 Graphics dump to printer [if available]. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        truesize: 
            Option Description 1 Plot at true size in millimetres. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xoffset: 
            Origin offset in X in millimetres (0). Only required if TRUESIZE used. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yoffset: 
            Origin offset in Y in millimetres (0). Only required if TRUESIZE used. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        pause: 
            Pause given number of units after displaying plot. -1 will prompt for <return> while in a macro. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        scale: 
            The scale factor. E.g. enter 1000 for a scale of 1:1000. Note that user data units of metres are 
            if metres are not the unit, then the scale must be multiplied by factor f, where f=no. of metres in 
            user data unit [e.g. 0.3048 for feet]. If - [absent data] is entered, then the plot will be the 
            size [as defined in the prototype]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "displa "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if hardcopy != "optional":
            command += " @hardcopy=" + str(hardcopy) 

        if truesize != "optional":
            command += " @truesize=" + str(truesize) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if pause != "optional":
            command += " @pause=" + str(pause) 

        if scale != "optional":
            command += " @scale=" + str(scale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dmedit(self,
               in_='required',
               print_=0,
               retrieval='optional'):

        """
        DMEDIT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be edited. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        print: 
            Send a complete record of the edit session to the printer or print file if ECHO=1 , PRINT=2. 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "dmedit "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dmfd(self):

        """
        DMFD
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "dmfd "


        self.run_command(command)

    def dtmcut(self,
               wiretr1='required',
               wirept1='required',
               wiretr2='required',
               wirept2='required',
               proto='required',
               perimin='optional',
               cutmodou='required',
               results='required',
               density='required',
               cutfld='required',
               attrib='optional',
               cutden=1,
               fillden=1,
               splits=0,
               cutval=-1,
               fillval=1,
               retrieval='optional'):

        """
        DTMCUT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr1: Input
            Triangle file of original wireframe surface (DTM). 
            Required=Yes
        wirept1: Input
            Point file of original wireframe surface (DTM). 
            Required=Yes
        wiretr2: Input
            Triangle file of update wireframe surface (DTM). 
            Required=Yes
        wirept2: Input
            Point file of update wireframe surface (DTM). 
            Required=Yes
        proto: Input
            Input block model prototype. 
            Required=Yes
        perimin: Input
            Optional input perimeter file controlling sub-division of cut-and-fill volumes. 
            Required=No

        Output Files:
        -------------

        cutmodou: Block model
            Output block model of cut and fill volumes. 
            Required=Yes
        results: Results file
            Output evaluation results data file. 
            Required=Yes

        Fields:
        -------

        density: Undefined : Undefined
            Density field in output block model. 
            Default=Undefined
            Required=Yes
        cutfld: Undefined : Undefined
            Output numeric field defining cut and fill volumes. 
            Default=Undefined
            Required=Yes
        attrib: Undefined : Undefined
            Optional attribute field from input perimeter file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        cutden: 
            Density of cut volumes. 
            Range=0,99999
            Values=nan
            Default=1
            Required=Yes
        fillden: 
            Density of filled volumes. 
            Range=0,99999
            Values=nan
            Default=1
            Required=Yes
        splits: 
            Subcell splitting of cut and fill block model. 
            Range=0,3
            Values=nan
            Default=0
            Required=Yes
        cutval: 
            Value assigned to CUTFLD for cells inside cut volume. 
            Range=nan
            Values=nan
            Default=-1
            Required=Yes
        fillval: 
            Value assigned to CUTFLD for cells inside fill volume. 
            Range=nan
            Values=nan
            Default=1
            Required=Yes
        """


        command = "dtmcut "


        # Required input error check

        if wiretr1 == "required":
            raise ValueError("wiretr1 is required.")

        command += " &wiretr1=" + wiretr1 


        # Required input error check

        if wirept1 == "required":
            raise ValueError("wirept1 is required.")

        command += " &wirept1=" + wirept1 


        # Required input error check

        if wiretr2 == "required":
            raise ValueError("wiretr2 is required.")

        command += " &wiretr2=" + wiretr2 


        # Required input error check

        if wirept2 == "required":
            raise ValueError("wirept2 is required.")

        command += " &wirept2=" + wirept2 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required output error check

        if cutmodou == "required":
            raise ValueError("cutmodou is required.")

        command += " &cutmodou=" + cutmodou 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required field error check

        if density == "required":
            raise ValueError("density is required.")

        command += " *density=" + density 


        # Required field error check

        if cutfld == "required":
            raise ValueError("cutfld is required.")

        command += " *cutfld=" + cutfld 

        if attrib != "optional":
            command += " *attrib=" + attrib 


        # Required parameter error check

        if cutden == "required":
            raise ValueError("cutden is required.")

        command += " @cutden=" + str(cutden) 


        # Required parameter error check

        if fillden == "required":
            raise ValueError("fillden is required.")

        command += " @fillden=" + str(fillden) 


        # Required parameter error check

        if splits == "required":
            raise ValueError("splits is required.")

        command += " @splits=" + str(splits) 


        # Required parameter error check

        if cutval == "required":
            raise ValueError("cutval is required.")

        command += " @cutval=" + str(cutval) 


        # Required parameter error check

        if fillval == "required":
            raise ValueError("fillval is required.")

        command += " @fillval=" + str(fillval) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dtmmod(self,
               wiretr='required',
               wirept='required',
               modelin='required',
               perimin='optional',
               modelou='optional',
               cutmodou='required',
               results='required',
               density='required',
               cutfld='required',
               attrib='optional',
               fillden=1,
               splits=0,
               cutval=-1,
               fillval=1,
               retrieval='optional'):

        """
        DTMMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Triangle file of update wireframe surface (DTM). 
            Required=Yes
        wirept: Input
            Point file of update wireframe surface (DTM). 
            Required=Yes
        modelin: Input
            Original block model. 
            Required=Yes
        perimin: Input
            Optional input perimeter file controlling sub-division of cut-and-fill volumes. 
            Required=No

        Output Files:
        -------------

        modelou: Block model
            Updated block model, with cut volume removed. 
            Required=No
        cutmodou: Block model
            Output block model of cut and fill volumes. 
            Required=Yes
        results: Results file
            Output evaluation results data file. 
            Required=Yes

        Fields:
        -------

        density: Undefined : Undefined
            Density field in input block model. 
            Default=Undefined
            Required=Yes
        cutfld: Undefined : Undefined
            Output numeric field defining cut and fill volumes. 
            Default=Undefined
            Required=Yes
        attrib: Undefined : Undefined
            Optional attribute field from input perimeter file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        fillden: 
            Density of filled volumes. 
            Range=0,99999
            Values=nan
            Default=1
            Required=Yes
        splits: 
            Subcell splitting of cut and fill block model. 
            Range=0,3
            Values=nan
            Default=0
            Required=Yes
        cutval: 
            Value assigned to CUTFLD for cells inside cut volume. 
            Range=nan
            Values=nan
            Default=-1
            Required=Yes
        fillval: 
            Value assigned to CUTFLD for cells inside fill volume. 
            Range=nan
            Values=nan
            Default=1
            Required=Yes
        """


        command = "dtmmod "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 

        if perimin != "optional":
            command += " &perimin=" + perimin 

        if modelou != "optional":
            command += " &modelou=" + modelou 


        # Required output error check

        if cutmodou == "required":
            raise ValueError("cutmodou is required.")

        command += " &cutmodou=" + cutmodou 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required field error check

        if density == "required":
            raise ValueError("density is required.")

        command += " *density=" + density 


        # Required field error check

        if cutfld == "required":
            raise ValueError("cutfld is required.")

        command += " *cutfld=" + cutfld 

        if attrib != "optional":
            command += " *attrib=" + attrib 


        # Required parameter error check

        if fillden == "required":
            raise ValueError("fillden is required.")

        command += " @fillden=" + str(fillden) 


        # Required parameter error check

        if splits == "required":
            raise ValueError("splits is required.")

        command += " @splits=" + str(splits) 


        # Required parameter error check

        if cutval == "required":
            raise ValueError("cutval is required.")

        command += " @cutval=" + str(cutval) 


        # Required parameter error check

        if fillval == "required":
            raise ValueError("fillval is required.")

        command += " @fillval=" + str(fillval) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def dxfout(self,
               in_='required',
               layer='optional',
               tolernce=0.001,
               realwrld=0,
               dm=0,
               maxvert="optional",
               layernam=0,
               retrieval='optional'):

        """
        DXFOUT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Database plotfile to be output to AUTOCAD DXF format. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        layer: Undefined : Undefined
            Field containing layer identification. DXF entities will be allocated to layers numbered 
            1 to n, depending on how many unique identifiers are present in IN. The default field name is 
            
            Default=Undefined
            Required=No

        Parameters:
        -----------

        tolernce: 
            Tolerance used in determining if lines can be reconstructed into polylines and individual 
            into text strings (0.001). 
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        realwrld: 
            If set to 1, back converts plotted millimeters to real world co-ordinates based on the scaling 
            provided in the XMIN, XMAX, YMIN, YMAX, XSCALE and YSCALE fields in the plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dm: 
            If set to 1, copies DATAMINE colour numbers to the DXF file without translation. Otherwise, 
            are converted according to a table which is suitable for AUTOCAD. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        maxvert: 
            2000 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        layernam: 
            Set to 1 to put layer names into the output file without translation. The default is 0. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "dxfout "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if layer != "optional":
            command += " *layer=" + layer 

        if tolernce != "optional":
            command += " @tolernce=" + str(tolernce) 

        if realwrld != "optional":
            command += " @realwrld=" + str(realwrld) 

        if dm != "optional":
            command += " @dm=" + str(dm) 

        if maxvert != "optional":
            command += " @maxvert=" + str(maxvert) 

        if layernam != "optional":
            command += " @layernam=" + str(layernam) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ellipse(self,
                srcparm='optional',
                wiretr='required',
                wirept='required',
                srefnum=-,
                sangle1=0,
                sangle2=0,
                sangle3=0,
                saxis1=3,
                saxis2=1,
                saxis3=3,
                sdist1=10,
                sdist2=10,
                sdist3=10,
                xcentre=0,
                ycentre=0,
                zcentre=0,
                print_=0,
                retrieval='optional'):

        """
        ELLIPSE
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        srcparm: Input
            Input search volume parameter file, as used in the ESTIMA process. This file must contains the 
            SREFNUM, SANGLE1, SANGLE2, SANGLE3, SAXIS1, SAXIS2, SAXIS3, SDIST1, SDIST2, and SDIST3, 
            define the orientation and dimensions of the search volume. 
            Required=No

        Output Files:
        -------------

        wiretr: Wireframe Triangle File
            Optional output wireframe triangle file. If this file is not specified a file with the name ELTR 
            be created. 
            Required=Yes
        wirept: Wireframe Points File.
            Optional output wireframe points file. The wireframe will be created to enclose the limits of 
            rotated model. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        srefnum: 
            If a search volume parameter file (SRCPARM) is specified, then it must include a field SREFNUM 
            defines a unique reference number for each search volume. The SREFNUM parameter then defines 
            search volume will be used. If the SREFNUM parameter is set to absent data (the default), then 
            first search volume in the file will be used. 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        sangle1: 
            First rotation angle clockwise in degrees, around axis SAXIS1 . It must lie between -360.0 and 
            A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        sangle2: 
            Second rotation angle clockwise in degrees, around axis SAXIS2 . It must lie between 360.0 and 
            A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        sangle3: 
            Third rotation angle clockwise in degrees, around axis SAXIS3 . It must lie between -360.0 and 
            A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        saxis1: 
            Axis around which first rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        saxis2: 
            Axis around which second rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        saxis3: 
            Axis around which third rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        sdist1: 
            The length of the first axis of the ellipsoid. Initially, before any rotation, SDIST1 is along 
            X axis. 
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        sdist2: 
            The length of the second axis of the ellipsoid. Initially, before any rotation, SDIST2 is along 
            Y axis. 
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        sdist3: 
            The length of the third axis of the ellipsoid. Initially, before any rotation, SDIST3 is along 
            Z axis. 
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        xcentre: 
            The X coordinate of the centre of the ellipsoid. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ycentre: 
            The Ycoordinate of the centre of the ellipsoid. . 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zcentre: 
            The Z coordinate of the centre of the ellipsoid. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        print: 
            Print flag: =0 for minimum output. =1 for runtime information messages. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "ellipse "

        if srcparm != "optional":
            command += " &srcparm=" + srcparm 


        # Required output error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required output error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if srefnum != "optional":
            command += " @srefnum=" + str(srefnum) 

        if sangle1 != "optional":
            command += " @sangle1=" + str(sangle1) 

        if sangle2 != "optional":
            command += " @sangle2=" + str(sangle2) 

        if sangle3 != "optional":
            command += " @sangle3=" + str(sangle3) 

        if saxis1 != "optional":
            command += " @saxis1=" + str(saxis1) 

        if saxis2 != "optional":
            command += " @saxis2=" + str(saxis2) 

        if saxis3 != "optional":
            command += " @saxis3=" + str(saxis3) 

        if sdist1 != "optional":
            command += " @sdist1=" + str(sdist1) 

        if sdist2 != "optional":
            command += " @sdist2=" + str(sdist2) 

        if sdist3 != "optional":
            command += " @sdist3=" + str(sdist3) 

        if xcentre != "optional":
            command += " @xcentre=" + str(xcentre) 

        if ycentre != "optional":
            command += " @ycentre=" + str(ycentre) 

        if zcentre != "optional":
            command += " @zcentre=" + str(zcentre) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def englog(self,
               in_='required',
               dict='optional',
               remarks='optional',
               lhmargin=1,
               rhmargin=79,
               lines=0,
               noff=0,
               double=0,
               sysfile=0,
               eng_marg=0,
               eng_leng=79,
               precdent=0,
               nocomma=0,
               nonl=0,
               showcode=0,
               print_=0,
               retrieval='optional'):

        """
        ENGLOG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            The input data file containing the coded log. This must contain at least the BHID and FROM 
            All fields which are to be decoded [the English fields] must be of the same type [alpha or 
            and the same length [if alpha]. 
            Required=Yes
        dict: Input
            The dictionary file containing the translated codes. It must contain the 3 fields TYPE, CODE 
            TEXT. 
            Required=No
        remarks: Input
            The remarks file contains the three fields BHID, FROM and TEXT, and should be sorted on BHID and 
            The TEXT field is multi- character alpha. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        lhmargin: 
            Start column for printing (1). 
            Range=1,79
            Values=Undefined
            Default=1
            Required=No
        rhmargin: 
            End column for printing (79). 
            Range=1,79
            Values=Undefined
            Default=79
            Required=No
        lines: 
            Number of lines per page of output (0). 0 - no paging. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        noff: 
            Option Description (0) Show form feeds. 1 Suppresses form feeds. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        double: 
            Option Description (0) Single spacing [default]; 1 Double spacing. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        sysfile: 
            Option Description (0) Send report to print file. 1 Send report to a system file rather than the 
            file. The file name is requested interactively. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        eng_marg: 
            The number of spaces left as a margin on the lefthand side of the output report before the decoded 
            is written. Default is (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        eng_leng: 
            The number of characters per line for the translated text part of the output report. This does 
            include the spaces defined by ENG_MARG.(79) 
            Range=1,79
            Values=Undefined
            Default=79
            Required=No
        precdent: 
            This parameter controls the output of the precedent. The precedent itself is defined 
            Note that this parameter affects the printing of antecedents in the same way. Option 
            0 If there is no code in the IN file [ie if it is blank for an alpha field or '-' for numeric] then the 
            is not included in the report. (0) 1 The precedent [if it has been defined] will always appear in 
            output report, even if the coded field to which it applies is absent data. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nocomma: 
            This parameter controls the output of a comma following each ENGLISH_FIELD . Option 
            0 a comma will be printed after each field, unless an antecedent has been specified (0) 1 there 
            be no automatic printing of commas. If required, they must be specified as antecedents. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nonl: 
            This parameter controls the output of a new-line following each drillhole interval. Option 
            0 a new-line will be output after each interval. (0) 1 a new-line will not be output after each 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        showcode: 
            This parameter controls the output of codes if no english translation is given. Option 
            0 the code is ignored, i.e. treated as absent. (0) 1 the code is printed without translation 
            Range=0,1
            Values=0,1
            Default=0
            Required=Yes
        print: 
            nan 
            Range=-1,0
            Values=-1,0
            Default=0
            Required=No
        """


        command = "englog "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if dict != "optional":
            command += " &dict=" + dict 

        if remarks != "optional":
            command += " &remarks=" + remarks 

        if lhmargin != "optional":
            command += " @lhmargin=" + str(lhmargin) 

        if rhmargin != "optional":
            command += " @rhmargin=" + str(rhmargin) 

        if lines != "optional":
            command += " @lines=" + str(lines) 

        if noff != "optional":
            command += " @noff=" + str(noff) 

        if double != "optional":
            command += " @double=" + str(double) 

        if sysfile != "optional":
            command += " @sysfile=" + str(sysfile) 

        if eng_marg != "optional":
            command += " @eng_marg=" + str(eng_marg) 

        if eng_leng != "optional":
            command += " @eng_leng=" + str(eng_leng) 

        if precdent != "optional":
            command += " @precdent=" + str(precdent) 

        if nocomma != "optional":
            command += " @nocomma=" + str(nocomma) 

        if nonl != "optional":
            command += " @nonl=" + str(nonl) 


        # Required parameter error check

        if showcode == "required":
            raise ValueError("showcode is required.")

        command += " @showcode=" + str(showcode) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def envseq(self,
               envmodel='required',
               results='required',
               costs='required',
               sequence='optional',
               out='required',
               grade='optional',
               value='optional',
               shapzone='optional',
               envbest='required',
               envelope='required',
               envnum='optional',
               density='optional',
               hdgrade="optional",
               refz="optional",
               refx="optional",
               refy="optional",
               seqopt=0,
               distmeth=1,
               retrieval='optional'):

        """
        ENVSEQ
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        envmodel: Input
            Input model file for evaluation. This will have been created as the output &ENVMODEL file by 
            MODENV. It must have the fields XMORIG, YMORIG, ZMORIG, NX, NY, NZ (implicit) and IJK, XC, YC and 
            (explicit). XINC, YINC and ZINC must exist as either explicit (sub-cells permitted) or 
            (no sub-cells). If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, 
            ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3. The file also has the fields *GRADE, *VALUE, 
            *DENSITY, *OPTIMISE, *ENVELOPE and *SHAPZONE if specified. The value in the *ENVBEST field 
            on the default value of the implicit field *OPTIMISE: 1 - (maximize ore tonnes) then the values 
            the two fields are ore tonnes. 2 - (maximize grade) then the values in the two fields are grade. 3 - 
            metal) then the values in the two fields are metal content. 4 - (maximize dollars) then the 
            in the two fields are dollars. 
            Required=Yes
        results: Input
            Input results summary file to report statistics for each envelope, with fields *ENVNUM, 
            *SHAPZONE, *GRADE, *VALUE, VOLUME, TONNES, MINX, MAXX, MINY, MAXY, MINZ, MAXZ, COGX, COGY, 
            Each combination of *ENVELOPE (and *SHAPZONE if supplied) is included by MODENV but only those 
            where *ENVELOPE has the value 'TOTAL' are used in the sequencing. 
            Required=Yes
        costs: Input
            Input file to define the costs associated with alternate sequence combinations. The fields 
            HORDIST, VERDIST, PENALTY1, PENALTY2 are required. The file must have all combinations of the 
            values selected for SIZE, HORDIST and VERDIST and be sorted in the same field order. 
            Required=Yes
        sequence: Input
            Optional input file to define required sequence relationships between envelopes. Three 
            ENVNUM1, ENVNUM2 and SEQTYPE are required. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output sequence summary file, with pairs of sequence relationships in ENVNUM1 and ENVNUM2. 
            initial envelope value IVALUE, the penalty values PENALTY1 and PENALTY2 to the previous 
            and PENALTY3 for prior envelopes and the final envelope value FVALUE are output. This file will 
            contain the centre of gravity of each envelope, if @DISTMETH=1, or the coordinates of the 
            points, if @DISTMETH=2 stored in the fields (X1,Y1,Z1) and (X2,Y2,Z2). 
            Required=Yes

        Fields:
        -------

        grade: Undefined : Undefined
            Numeric (explicit) field for the grade of input model blocks. 
            Default=Undefined
            Required=No
        value: Undefined : Undefined
            Numeric (explicit) field for the value of input model blocks. 
            Default=Undefined
            Required=No
        shapzone: Undefined : Undefined
            Field in the input model to distinguish zones. 
            Default=Undefined
            Required=No
        envbest: Numeric : ENVMODEL
            Numeric (explicit) field for the best envelope grade or value in the &ENVMODEL file. 
            Default=ENVBEST
            Required=Yes
        envelope: Character : ENVMODEL
            Alphanumeric (explicit) field for the cell envelope code in the &ENVMODEL file. 
            Default=ENVELOPE
            Required=Yes
        envnum: Numeric : ENVMODEL
            Numeric (explicit) field for the envelope number in the &ENVMODEL file. 
            Default=ENVNUM
            Required=No
        density: Undefined : Undefined
            Optional density field in the input model for average grade and tonnage calculations. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        hdgrade: 
            Required head grade for economic envelopes. The definition of head grade depends on the value 
            @SEQOPT. An absent value will cause the head grade test to be ignored. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        refz: 
            Reference elevation for calculation of penalties for the initial envelope. If a &SEQUENCE 
            is not defined then the reference elevation would normally be the surface elevation. The 
            system for defining @REFZ is the unrotated system used in &ENVMODEL. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        refx: 
            Reference X coordinate for calculation of penalties for the initial envelope. If a &SEQUENCE 
            is not defined then the reference X coordinate would normally be the Easting of the existing or 
            shaft. The coordinate system for defining @REFX is the unrotated system used in &ENVMODEL. If 
            value is set to absent data (the default) then neither the X or Y reference coordinates are used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        refy: 
            Reference Y coordinate for calculation of penalties for the initial envelope. If a &SEQUENCE 
            is not defined then the reference Y coordinate would normally be the Easting of the existing or 
            shaft. The coordinate system for defining @REFY is the unrotated system used in &ENVMODEL. If 
            value is set to absent data (the default) then neither the X or Y reference coordinates are used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        seqopt: 
            Method to be used for ranking the envelope sequence: 0 - Use the same method used for optimizing 
            &ENVMODEL model. This is recorded as the default value of implicit field OPTIMISE in file 
            1 - Maximize ore tonnes ie minimize [below cutoff] waste. 2 - Maximize grade 3 - Maximize 
            metal 4 - Maximize accumulated value ie for dollar value. 
            Range=0,4
            Values=0,1,2,3,4
            Default=0
            Required=No
        distmeth: 
            Method for defining the envelope separation: 1 - measured by centre of gravity 2 - measured as 
            closest distance between the envelope surfaces. 
            Range=1,2
            Values=1,2
            Default=1
            Required=Yes
        """


        command = "envseq "


        # Required input error check

        if envmodel == "required":
            raise ValueError("envmodel is required.")

        command += " &envmodel=" + envmodel 


        # Required input error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required input error check

        if costs == "required":
            raise ValueError("costs is required.")

        command += " &costs=" + costs 

        if sequence != "optional":
            command += " &sequence=" + sequence 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if grade != "optional":
            command += " *grade=" + grade 

        if value != "optional":
            command += " *value=" + value 

        if shapzone != "optional":
            command += " *shapzone=" + shapzone 


        # Required field error check

        if envbest == "required":
            raise ValueError("envbest is required.")

        command += " *envbest=" + envbest 


        # Required field error check

        if envelope == "required":
            raise ValueError("envelope is required.")

        command += " *envelope=" + envelope 

        if envnum != "optional":
            command += " *envnum=" + envnum 

        if density != "optional":
            command += " *density=" + density 


        # Required parameter error check

        if hdgrade == "required":
            raise ValueError("hdgrade is required.")

        command += " @hdgrade=" + str(hdgrade) 

        if refz != "optional":
            command += " @refz=" + str(refz) 

        if refx != "optional":
            command += " @refx=" + str(refx) 

        if refy != "optional":
            command += " @refy=" + str(refy) 

        if seqopt != "optional":
            command += " @seqopt=" + str(seqopt) 


        # Required parameter error check

        if distmeth == "required":
            raise ValueError("distmeth is required.")

        command += " @distmeth=" + str(distmeth) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def estima(self,
               proto='required',
               in_='required',
               srcparm='required',
               estparm='required',
               vmodparm='optional',
               string='optional',
               model='required',
               sampout='optional',
               x='optional',
               y='optional',
               z='optional',
               zone1_f='optional',
               zone2_f='optional',
               key='optional',
               length_f='optional',
               dens_f='optional',
               section='optional',
               boundary='optional',
               wstag='optional',
               bstag='optional',
               tag='optional',
               discmeth=1,
               xpoints=1,
               ypoints=1,
               zpoints=1,
               xdspace="optional",
               ydspace="optional",
               zdspace="optional",
               parent=1,
               dyankr=1,
               mindisc=1,
               copyval=0,
               fvaltype=1,
               fstep="optional",
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               zmin="optional",
               zmax="optional",
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               allwgts=0,
               linkmode=3,
               ucsamode=2,
               ucsbmode=3,
               ucscmode=2,
               plane=1,
               hangid="optional",
               footid="optional",
               tolrnc=0,
               ucsalimt=1,
               orgtag=-,
               print_=0,
               retrieval='optional'):

        """
        ESTIMA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Block_Model_File 
            Required=Yes
        in: Input
            Table 
            Required=Yes
        srcparm: Input
            Undefined 
            Required=Yes
        estparm: Input
            Undefined 
            Required=Yes
        vmodparm: Input
            Variogram - Model 
            Required=No
        string: Input
            String 
            Required=No

        Output Files:
        -------------

        model: Block Model File
            Output model containing estimated grades, variance etc. 
            Required=Yes
        sampout: Undefined
            Output sample file containing details of weights for each sample for each cell estimated. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            X coordinate of sample data in IN file. If not specified, then X is assumed. If the unfolding 
            is used, then the X coordinate must be set to the unfolded UCSA coordinate. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Y coordinate of sample data in IN file. If not specified, then Y is assumed. If the unfolding 
            is used, then the Y coordinate must be set to the unfolded UCSB coordinate. 
            Default=Undefined
            Required=No
        z: Undefined : Undefined
            Z coordinate of sample data in IN file. If not specified, then Z is assumed. If the unfolding 
            is used, then the Z coordinate must be set to the unfolded UCSC coordinate. 
            Default=Undefined
            Required=No
        zone1_f: Undefined : Undefined
            First field for zonal control. 
            Default=Undefined
            Required=No
        zone2_f: Undefined : Undefined
            Second field for zonal control. 
            Default=Undefined
            Required=No
        key: Undefined : Undefined
            Key field used to specify the field limiting the number of samples for estimation. The field 
            exist in the IN file. 
            Default=Undefined
            Required=No
        length_f: Undefined : Undefined
            Field used for length weighting in IPD. The field must exist in the IN file. 
            Default=Undefined
            Required=No
        dens_f: Undefined : Undefined
            Field used for density weighting in IPD. The field must exist in the IN file. 
            Default=Undefined
            Required=No
        section: Numeric : STRING
            The name of the numeric field in the STRING file holding the section identifier; used if the 
            option is required. The default field name is SECTION. 
            Default=SECTION
            Required=No
        boundary: Numeric : STRING
            The name of the numeric field in the STRING file holding the boundary identifier; used if the 
            option is required. The default field name is BOUNDARY. 
            Default=BOUNDARY
            Required=No
        wstag: Undefined : Undefined
            Within Section TAG; used if the unfolding option is required. This is a numeric field in the 
            file, defining the stratigraphical links between hangingwall and footwall points on strings 
            the same section. A value of 0 or - means that the point is not linked. The default field name is 
            
            Default=Undefined
            Required=No
        bstag: Undefined : Undefined
            Between Section TAG; used if the unfolding option is required. This is a numeric field in the 
            file, defining the stratigraphical links between 2 points on strings on adjacent sections 
            the same BOUNDARY. A value of 0 or - means that the point is not linked. The default field name is 
            
            Default=Undefined
            Required=No
        tag: Undefined : Undefined
            A numeric tag field in the STRING file; used if the unfolding option is requires. It defines both 
            stratigraphical links between points on strings within the same section, and between points 
            adjacent sections with the same BOUNDARY. A value of 0 or - means that the point is not linked. The 
            field name is TAG. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        discmeth: 
            Cell discretisation method: Option Description 1 - use XPOINTS , YPOINTS , ZPOINTS to define 
            number of points in the X,Y,Z directions 2 - use XDSPACE , YDSPACE , ZDSPACE to define the 
            between points. The default is method (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        xpoints: 
            Number of discretisation points in X. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ypoints: 
            Number of discretisation points in Y. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zpoints: 
            Number of discretisation points in Z. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xdspace: 
            Distance between discretisation points in X if DISCMETH=2. The default gives just one point. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ydspace: 
            Distance between discretisation points in Y if DISCMETH=2. The default gives just one point. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zdspace: 
            Distance between discretisation points in Z if DISCMETH=2. The default gives just one point. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        parent: 
            Flag to control parent cell estimation: Option Description 0 - Estimate into individual 
            1 - Represent parent cell by a full 3D matrix of points. 2 - Represent parent cell by a 3D matrix of 
            but select only points lying within subcells. The default is (0). 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        dyankr: 
            Flag to select whether the variogram model rotation angles should use the dynamic anisotropy 
            Option Description 0 - Do not use dynamic anisotropy. Use angles VANGLEn as defined in the 
            model parameter file VMODPARM. 1 - If the search volume uses dynamic anisotropy, then the 
            model uses the same set of angles. 2 - Use dynamic anisotropy, but with a different set of angles 
            the search volume. The names of the corresponding fields are specified by fields VANGLn_F in 
            estimation parameter file ESTPARM. 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        mindisc: 
            Minimum number of discretisation points. Only used if PARENT=2. The default is (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        copyval: 
            Flag controlling copying of values from PROTO to MODEL if there is insufficient data to 
            them: Option Description 0 - Assign absent data value[s] in MODEL. 1 - Copy from PROTO to MODEL. 
            default is (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        fvaltype: 
            Flag for cell approximation for F values: Option Description 0 - The exact dimensions of the 
            are used 1 - Each cell is approximated by one of a discrete number of cell sizes. The default is 
            
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        fstep: 
            Step size for cell approximation. This is only used if FVALTYPE=2. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmin: 
            Minimum X value for model updating. The default is the X model origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum X value for model updating. The default is the maximum X value for PROTO. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum Y value for model updating. The default is the Y model origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum Y value for model updating. The default is the maximum Y value for PROTO. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zmin: 
            Minimum Z value for model updating. The default is the Z model origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zmax: 
            Maximum Z value for model updating. The default is the maximum Z value for PROTO. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xsubcell: 
            Number of subcells per parent cell in X if PROTO is empty. The default is (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Number of subcells per parent cell in Y if PROTO is empty. The default is (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            Number of subcells per parent cell in Z if PROTO is empty. The default is (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        allwgts: 
            Flag controlling which samples are written to the sample output file if IMETHOD=9 
            factor method]. Option Description 0 - Only samples with non-zero weights are written to the 
            output file. 1 - All samples in the search volume including those with zero weights are written 
            the sample output file. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        linkmode: 
            The method by which links between strings are created; used if the unfolding option is 
            Option Description 0 - Within section links are defined by the WSTAG field, or by the TAG field if 
            does not exist. Between section links are defined by the BSTAG field, or by the TAG field if BSTAG 
            not exist. 1 Within section links are defined automatically. Between section links are 
            by the BSTAG field, or by the TAG field if BSTAG does not exist. 2 - Within section links are 
            by the WSTAG field, or by the TAG field if WSTAG does not exist. Between section links are defined 
            3 - Within section links are defined automatically. Between section links are defined 
            For simple structures it is not essential to define tag points on the strings; using the default 
            (3) ensures that automatic linking will be applied both within and between sections. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        ucsamode: 
            The type of UCSA coordinate; used if the unfolding option is required. Default (2). Option 
            1 - Coordinates are normalised. 2 - Coordinates are adjusted. 3 - Coordinates are true length. 4 
            Coordinates are world X value. 5 - Coordinates are world Y value. 6 - Coordinates are world Z 
            
            Range=1,6
            Values=1,2,3,4,5,6
            Default=2
            Required=No
        ucsbmode: 
            The type of UCSB coordinate; used if the unfolding option is required. Default (3). Option 
            1 - Coordinates are normalised. 2 - Coordinates are adjusted. 3 - Coordinates are true length. 4 
            Coordinates are world X value. 5 - coordinates are world Y value. 6 - coordinates are world Z 
            
            Range=1,6
            Values=1,2,3,4,5,6
            Default=3
            Required=No
        ucscmode: 
            The type of UCSC coordinate; used if the unfolding option is required. Default (2). Option 
            1 - Coordinates are normalised. 2 - Coordinates are adjusted. 3 - Coordinates are true length. 4 
            Coordinates are world X value. 5 - Coordinates are world Y value. 6 - Coordinates are world Z 
            
            Range=1,6
            Values=1,2,3,4,5,6
            Default=2
            Required=No
        plane: 
            The plane of the structural interpretations defined in the STRING file; used if the unfolding 
            is required. Default (1). Option Description 1 - Vertical sectional interpretation. 2 - 
            in plan. 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        hangid: 
            The value of the field BOUNDARY in the STRING file that defines the hangingwall of the unit, used 
            the unfolding option is required. It will be used if the UNITDEF file is not defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        footid: 
            The value of the field BOUNDARY in the STRING file that defines the footwall of the unit, used if 
            unfolding option is required. It will be used if the UNITDEF file is not defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tolrnc: 
            Tolerance in the calculation of the UCSA coordinate expressed as a proportion of the UCSA 
            used if the unfolding option is required. The default is (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ucsalimt: 
            Flag to define the limits of the UCSA coordinate if UCSAMODE=1 or 2 and TOLRNC>0. The options 
            are defined in terms of the Normalized mode [UCSAMODE=1]. Default (1) Option Description 1 - 
            values can be less than 0 and greater than 1 2 - UCSA values can be less than 0. Values calculated as 
            than 1 are reset to 1 3 - UCSA values calculated as less than 0 are reset to 0. Values can be greater 
            1 4 - UCSA values calculated as less than 0 are reset to 0. Values calculated as greater than 1 are 
            to 1 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        orgtag: 
            Tag number of points which define the origin surface from which the UCSB coordinate is 
            The default surface if ORGTAG is undefined (-) is created from the first points on each of the 
            and footwall strings. 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        print: 
            Display control: Option Description 0 Minimum output including progress message. 1 As 0 plus 
            of input parameters. 2 as 1 plus display of each cell value. The default is (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "estima "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if srcparm == "required":
            raise ValueError("srcparm is required.")

        command += " &srcparm=" + srcparm 


        # Required input error check

        if estparm == "required":
            raise ValueError("estparm is required.")

        command += " &estparm=" + estparm 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 

        if string != "optional":
            command += " &string=" + string 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if sampout != "optional":
            command += " &sampout=" + sampout 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if zone1_f != "optional":
            command += " *zone1_f=" + zone1_f 

        if zone2_f != "optional":
            command += " *zone2_f=" + zone2_f 

        if key != "optional":
            command += " *key=" + key 

        if length_f != "optional":
            command += " *length_f=" + length_f 

        if dens_f != "optional":
            command += " *dens_f=" + dens_f 

        if section != "optional":
            command += " *section=" + section 

        if boundary != "optional":
            command += " *boundary=" + boundary 

        if wstag != "optional":
            command += " *wstag=" + wstag 

        if bstag != "optional":
            command += " *bstag=" + bstag 

        if tag != "optional":
            command += " *tag=" + tag 

        if discmeth != "optional":
            command += " @discmeth=" + str(discmeth) 

        if xpoints != "optional":
            command += " @xpoints=" + str(xpoints) 

        if ypoints != "optional":
            command += " @ypoints=" + str(ypoints) 

        if zpoints != "optional":
            command += " @zpoints=" + str(zpoints) 

        if xdspace != "optional":
            command += " @xdspace=" + str(xdspace) 

        if ydspace != "optional":
            command += " @ydspace=" + str(ydspace) 

        if zdspace != "optional":
            command += " @zdspace=" + str(zdspace) 

        if parent != "optional":
            command += " @parent=" + str(parent) 

        if dyankr != "optional":
            command += " @dyankr=" + str(dyankr) 

        if mindisc != "optional":
            command += " @mindisc=" + str(mindisc) 

        if copyval != "optional":
            command += " @copyval=" + str(copyval) 

        if fvaltype != "optional":
            command += " @fvaltype=" + str(fvaltype) 

        if fstep != "optional":
            command += " @fstep=" + str(fstep) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if zmin != "optional":
            command += " @zmin=" + str(zmin) 

        if zmax != "optional":
            command += " @zmax=" + str(zmax) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if allwgts != "optional":
            command += " @allwgts=" + str(allwgts) 

        if linkmode != "optional":
            command += " @linkmode=" + str(linkmode) 

        if ucsamode != "optional":
            command += " @ucsamode=" + str(ucsamode) 

        if ucsbmode != "optional":
            command += " @ucsbmode=" + str(ucsbmode) 

        if ucscmode != "optional":
            command += " @ucscmode=" + str(ucscmode) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if hangid != "optional":
            command += " @hangid=" + str(hangid) 

        if footid != "optional":
            command += " @footid=" + str(footid) 

        if tolrnc != "optional":
            command += " @tolrnc=" + str(tolrnc) 

        if ucsalimt != "optional":
            command += " @ucsalimt=" + str(ucsalimt) 

        if orgtag != "optional":
            command += " @orgtag=" + str(orgtag) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def estimate(self):

        """
        ESTIMATE
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "estimate "


        self.run_command(command)

    def expfld(self,
               in_='required',
               out='required',
               start='required',
               end='required',
               newfield='required',
               incrment="optional",
               retrieval='optional'):

        """
        EXPFLD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file containing numeric explicit fields START and END defining the range. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing extra records between the given ranges, the actual value being held in 
            NEWFIELD. 
            Required=Yes

        Fields:
        -------

        start: Undefined : Undefined
            Name of field giving the start of the range. 
            Default=Undefined
            Required=Yes
        end: Undefined : Undefined
            Name of field giving the end of the range. 
            Default=Undefined
            Required=Yes
        newfield: Undefined : Undefined
            Name of field in output file containing the value for the record within the range. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        incrment: 
            Increment to be applied to START within range. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        """


        command = "expfld "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if start == "required":
            raise ValueError("start is required.")

        command += " *start=" + start 


        # Required field error check

        if end == "required":
            raise ValueError("end is required.")

        command += " *end=" + end 


        # Required field error check

        if newfield == "required":
            raise ValueError("newfield is required.")

        command += " *newfield=" + newfield 


        # Required parameter error check

        if incrment == "required":
            raise ValueError("incrment is required.")

        command += " @incrment=" + str(incrment) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def expmmw(self,
               perimin='required',
               perimout='required',
               mmw="optional",
               pinc=0.1,
               mode=1,
               nodiag=1,
               retrieval='optional'):

        """
        EXPMMW
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            The input perimeter file. If MODE=1 then the fields required are XP,YP,ZP, PTN and PVALUE ie 
            perimeter format. Any other fields in this file will not be copied to the output file. All valid 
            in the file will be used. If MODE=2 or 3 then it must also contain PTYPE and PORIG fields. In 
            the file must be sorted on the keyfields PORIG, PTYPE and PTN. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            The output perimeter file containing the expanded perimeters. It may also contain a copy of the 
            perimeters and the centre line strings depending on the value of parameter MODE. The file will 
            the standard perimter fields XP,YP,ZP,PTN and PVALUE plus ,PTYPE and PORIG. Malformed input 
            will be reported but not processed. In place processing is not permitted ie PERIMIN and 
            must be different files. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        mmw: 
            The minimum mining width, measured perpendicular to the centre line of the perimeter. Any 
            on the expanded perimeter will be at least 0.5 x MMW from the centre line. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pinc: 
            Numeric increment for PVALUEs for centre line string and adjusted perimeter as written to the 
            file. If the PVALUE of the input perimeter is P then its centre line string will have a PVALUE of 
            and the expanded perimeter will have a PVALUE of P+2xPINC. The default value is (0.1). 
            Range=Undefined
            Values=Undefined
            Default=0.1
            Required=No
        mode: 
            This parameter defines the contents of both the PERIMIN and PERIMOUT files. It has values: 
            Description 1 - PERIMIN: original perimeters PERIMOUT: original perimeters centre lines 
            perimeters. 2 - PERIMIN: original perimeters centre lines PERIMOUT: original perimeters 
            lines expanded perimeters. 3 - PERIMIN: original perimeters centre lines PERIMOUT: expanded 
            For pass 1 MODE must be set to 1. For pass 2 MODE must be either 2 or 3. The default value of MODE is 
            
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        nodiag: 
            This parameter specifies whether the centre line of a square perimeter should be the diagonal 
            the length. It has values: Option Description 1 Centreline can be the diagonal 2 Centreline 
            not be the diagonal 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        """


        command = "expmmw "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 


        # Required parameter error check

        if mmw == "required":
            raise ValueError("mmw is required.")

        command += " @mmw=" + str(mmw) 

        if pinc != "optional":
            command += " @pinc=" + str(pinc) 

        if mode != "optional":
            command += " @mode=" + str(mode) 

        if nodiag != "optional":
            command += " @nodiag=" + str(nodiag) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def expndmod(self,
                 model='required',
                 wiretr='optional',
                 wirept='optional',
                 perimin='optional',
                 defvals='optional',
                 modelout='required',
                 density=1,
                 wiretype=2,
                 cellxmin=2.5,
                 cellymin=2.5,
                 cellzmin=2.5,
                 xmin="optional",
                 ymin="optional",
                 zmin="optional",
                 xmax="optional",
                 ymax="optional",
                 zmax="optional",
                 filvol=0,
                 retrieval='optional'):

        """
        EXPNDMOD
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Input block Model file to be expanded. 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file to constrain and define the expansion limits. The wireframe may 
            of one or more solid wireframes, or one or more single surface DTMs. It may not contain both solid 
            and DTMs. 
            Required=No
        wirept: Input
            Input wireframe points file. 
            Required=No
        perimin: Input
            Input perimeter file to constrain the model expansion. This file can contain multiple 
            The model will be expanded to the limits of the perimeters and constrained by them. 
            Required=No
        defvals: Input
            Input file containing a list of default field values. This file must contain the fields NAME and 
            The VALUE field can be either alpha or numeric. 
            Required=No

        Output Files:
        -------------

        modelout: Model
            Output expanded block model file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        density: 
            Default density value to be applied to new cells 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        wiretype: 
            Type of wireframe model to be filled with cells. Select one of the following options, with the 
            being 2: Option Description 1 solid - create cells inside. 2 surface - create cells below. 3 
            - create cells above. 4 surface - create cells to the south. 5 surface - create cells to the north. 
            surface - create cells to the west. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=2
            Required=Yes
        cellxmin: 
            Minimum cell size in the X direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=Yes
        cellymin: 
            Minimum cell size in the X direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=Yes
        cellzmin: 
            Minimum cell size in the X direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=Yes
        xmin: 
            Minimum value in the X direction that the output model must cover. This value will be used only if 
            is less than the minimum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value in the Y direction that the output model must cover. This value will be used only if 
            is less than the minimum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zmin: 
            Minimum value in the Z direction that the output model must cover. This value will be used only if 
            is less than the minimum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value in the X direction that the output model must cover. This value will be used only if 
            is greater than the maximum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value in the Y direction that the output model must cover. This value will be used only if 
            is greater than the maximum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zmax: 
            Maximum value in the Z direction that the output model must cover. This value will be used only if 
            is greater than the maximum value defined by the input wireframe or perimeter(s) 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        filvol: 
            Specify whether to use the input wireframe for cell splitting or to add a FILVOL field to the 
            model: Option Description 0 Use WIREFILL to split the cells against the wireframe. 1 Add a 
            filed to the output model containing No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "expndmod "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 

        if perimin != "optional":
            command += " &perimin=" + perimin 

        if defvals != "optional":
            command += " &defvals=" + defvals 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 

        if density != "optional":
            command += " @density=" + str(density) 


        # Required parameter error check

        if wiretype == "required":
            raise ValueError("wiretype is required.")

        command += " @wiretype=" + str(wiretype) 


        # Required parameter error check

        if cellxmin == "required":
            raise ValueError("cellxmin is required.")

        command += " @cellxmin=" + str(cellxmin) 


        # Required parameter error check

        if cellymin == "required":
            raise ValueError("cellymin is required.")

        command += " @cellymin=" + str(cellymin) 


        # Required parameter error check

        if cellzmin == "required":
            raise ValueError("cellzmin is required.")

        command += " @cellzmin=" + str(cellzmin) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if zmin != "optional":
            command += " @zmin=" + str(zmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if zmax != "optional":
            command += " @zmax=" + str(zmax) 

        if filvol != "optional":
            command += " @filvol=" + str(filvol) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def export(self):

        """
        EXPORT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "export "


        self.run_command(command)

    def extend(self,
               in_='required',
               retrieval='optional'):

        """
        EXTEND
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be extended. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "extend "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def extndf(self,
               in_='required',
               retrieval='optional'):

        """
        EXTNDF
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be extended. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "extndf "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def extra(self,
              in_='required',
              out='required',
              print_=0,
              approx=0,
              expression=optional,
              retrieval='optional'):

        """
        EXTRA
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        print: 
            Display output to command processor 
            Range=0 or 1
            Values=0 = do nothing 1 = show all code in the output window during processing.
            Default=0
            Required=No
        approx: 
            Allow for rounding errors when making comparisons 
            Range=undefined
            Values=undefined
            Default=0
            Required=No
        """


        command = "extra "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if print_ != "optional":
            command += " @print=" + str(print_) 

        if approx != "optional":
            command += " @approx=" + str(approx) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        if expression != "optional":
            command += expression + " 'GO'"

        self.run_command(command)

    def factor(self,
               in_='required',
               uscores='optional',
               rscores='optional',
               oscores='optional',
               sampid='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               maxit=0,
               eigenmin=1,
               numeigen=0,
               promaxcf=3,
               print_=0,
               retrieval='optional'):

        """
        FACTOR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        uscores: Undefined
            Optional output file for unrotated factor scores. 
            Required=No
        rscores: Undefined
            Optional output file for varimax factor scores. 
            Required=No
        oscores: Undefined
            Optional output file for promax factor scores. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Field containing sample identification 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        maxit: 
            Number of iterations required, valid only for the unrotated PCA option in factor analysis. 
            Non statistical factor analysis. =10 Maximum number of iterations allowed for statistical 
            analysis. 
            Range=0,10
            Values=0,1,2,3,4,5,6,,7,8,9,10
            Default=0
            Required=No
        eigenmin: 
            Option Description (1) Eigenvalue required to select the number of components. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        numeigen: 
            Option Description (0) Maximum number of eigenvalues is set to the number of fields or to 10, 
            is the lower. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        promaxcf: 
            Option Description (3) Promax oblique rotation exponent. Range is 1-9. 
            Range=1,9
            Values=Undefined
            Default=3
            Required=No
        print: 
            > 0 Display scores on the screen (0). Note - Do not use for large files. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "factor "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if uscores != "optional":
            command += " &uscores=" + uscores 

        if rscores != "optional":
            command += " &rscores=" + rscores 

        if oscores != "optional":
            command += " &oscores=" + oscores 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if maxit != "optional":
            command += " @maxit=" + str(maxit) 

        if eigenmin != "optional":
            command += " @eigenmin=" + str(eigenmin) 

        if numeigen != "optional":
            command += " @numeigen=" + str(numeigen) 

        if promaxcf != "optional":
            command += " @promaxcf=" + str(promaxcf) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def fdout(self,
              in_='required',
              tolton=0.5,
              format=0,
              retrieval='optional'):

        """
        FDOUT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        tolton: 
            Minimum tonnage in parcel to be output (0.5) 
            Range=Undefined
            Values=Undefined
            Default=0.5
            Required=No
        format: 
            Output format for economic file (0). Option Description 0 Fixed format. 1 Comma separated. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "fdout "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if tolton != "optional":
            command += " @tolton=" + str(tolton) 

        if format != "optional":
            command += " @format=" + str(format) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ffunc(self,
              vmodparm='required',
              out='optional',
              vmodnum=1,
              log=0,
              ipoints=6,
              jpoints=6,
              kpoints=6,
              retrieval='optional'):

        """
        FFUNC
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        vmodparm: Input
            Input variogram model file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Optional output file. This will contain the block dimensions and F value in fields XINC, YINC, 
            and FVALUE. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        vmodnum: 
            Variogram model number, as defined by VREFNUMfield in VMODPARM file. Default (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        log: 
            Log/Normal variogram flag. Default(0). The variogram model, as defined by VGRAM , is Normal if 
            =0 or Lognormal if LOG =1. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        ipoints: 
            Number of discretisation points in X dimension to simulate block (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        jpoints: 
            Number of discretisation points in Y dimension to simulate block (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        kpoints: 
            Number of discretisation points in Z dimension to simulate block (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        """


        command = "ffunc "


        # Required input error check

        if vmodparm == "required":
            raise ValueError("vmodparm is required.")

        command += " &vmodparm=" + vmodparm 

        if out != "optional":
            command += " &out=" + out 

        if vmodnum != "optional":
            command += " @vmodnum=" + str(vmodnum) 

        if log != "optional":
            command += " @log=" + str(log) 

        if ipoints != "optional":
            command += " @ipoints=" + str(ipoints) 

        if jpoints != "optional":
            command += " @jpoints=" + str(jpoints) 

        if kpoints != "optional":
            command += " @kpoints=" + str(kpoints) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def filcom(self,
               in_='required',
               retrieval='optional'):

        """
        FILCOM
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "filcom "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def filexp(self,
               in_='required',
               retrieval='optional'):

        """
        FILEXP
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "filexp "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def filtpo(self,
               in1='required',
               in2='optional',
               out='required',
               x='required',
               y='required',
               z='optional',
               radius="optional",
               retrieval='optional'):

        """
        FILTPO
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input points file. Must be sorted on X. 
            Required=Yes
        in2: Input
            Optional filter points file. Must be sorted on X. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output points file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field used as X coordinate for filter process. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field used as Y coordinate for filter process. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Optional Z coordinate for filter process. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        radius: 
            Optional, default = 0.0. Points within RADIUS of one another are filtered out. If Z is not 
            filter test is applied in a circle in the XY plane. If Z is defined filter test is applied within a 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "filtpo "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 

        if in2 != "optional":
            command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if radius != "optional":
            command += " @radius=" + str(radius) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def foreca(self,
               composit='required',
               rconloti="optional",
               rconhiti="optional",
               startmon="optional",
               startyr="optional",
               endmon="optional",
               endyr="optional",
               chalprec=0.86,
               cubanrec=0.60,
               bornrec=0.90,
               chalcrec=0.85,
               retrieval='optional'):

        """
        FORECA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        composit: Input
            Composite file. This is used for extraction of the required composite information. It has the 
            BENCH, BLAST, COMPOSIT, VOLUME, TONNES, CU, FE, MT, P2O5, CO2, TIO2/MT, ZRO2, U3O8, PROFILE, 
            PR, BF, CP, CUB, BN, CC, VALL, T.F., DEST and PROVIS. This special planning composite file must 
            contain extra fields YEAR, MONTH, DAY and TYPE. YEAR and MONTH must be set (DAY is optional) with 
            year and month in which mining is planned. TYPE is a 4 character alpha field which must be set to 
            of HITI, LOTI or HITA. If it is set to something else, then the record is ignored with a message. 
            TONNES and CU fields MUST be set; anything else (apart from BENCH and COMPOSIT) should be set for 
            reports. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        rconloti: 
            Reconciliation copper tonnage. All copper tonnage figures in the LOTI report will be adjusted 
            that the total comes to this figure. A figure of 0 will stop any adjustment taking place. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rconhiti: 
            Reconciliation copper tonnage. All copper tonnage figures in the HITI report will be adjusted 
            that the total comes to this figure. A figure of 0 will stop any adjust- ment taking place. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        startmon: 
            Month for report (1-12). 
            Range=1,12
            Values=Undefined
            Default=Undefined
            Required=Yes
        startyr: 
            Year for report e.g. 88. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        endmon: 
            End month for report. For a single month, set equal to STARTMON. 
            Range=1,12
            Values=Undefined
            Default=Undefined
            Required=Yes
        endyr: 
            End year for report. For a single month, set equal to STARTYR. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        chalprec: 
            Chalcopyrite recovery between 0.0 and 1.0. (0.86) 
            Range=0,1
            Values=0,1
            Default=0.86
            Required=No
        cubanrec: 
            Cubanite recovery between 0.0 and 1.0. (0.60) 
            Range=0,1
            Values=0,1
            Default=0.60
            Required=No
        bornrec: 
            Bornite recovery between 0.0 and 1.0. (0.90) 
            Range=0,1
            Values=0,1
            Default=0.90
            Required=No
        chalcrec: 
            Chalcocite recovery between 0.0 and 1.0. (0.85) 
            Range=0,1
            Values=0,1
            Default=0.85
            Required=No
        """


        command = "foreca "


        # Required input error check

        if composit == "required":
            raise ValueError("composit is required.")

        command += " &composit=" + composit 


        # Required parameter error check

        if rconloti == "required":
            raise ValueError("rconloti is required.")

        command += " @rconloti=" + str(rconloti) 


        # Required parameter error check

        if rconhiti == "required":
            raise ValueError("rconhiti is required.")

        command += " @rconhiti=" + str(rconhiti) 


        # Required parameter error check

        if startmon == "required":
            raise ValueError("startmon is required.")

        command += " @startmon=" + str(startmon) 


        # Required parameter error check

        if startyr == "required":
            raise ValueError("startyr is required.")

        command += " @startyr=" + str(startyr) 


        # Required parameter error check

        if endmon == "required":
            raise ValueError("endmon is required.")

        command += " @endmon=" + str(endmon) 


        # Required parameter error check

        if endyr == "required":
            raise ValueError("endyr is required.")

        command += " @endyr=" + str(endyr) 

        if chalprec != "optional":
            command += " @chalprec=" + str(chalprec) 

        if cubanrec != "optional":
            command += " @cubanrec=" + str(cubanrec) 

        if bornrec != "optional":
            command += " @bornrec=" + str(bornrec) 

        if chalcrec != "optional":
            command += " @chalcrec=" + str(chalcrec) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def format(self,
               in_='required',
               repdef='optional',
               lhmargin=1,
               rhmargin=79,
               lines=20,
               hdsep=3,
               ftsep=3,
               gutter=1,
               keybreak=-1,
               noff=0,
               double=0,
               sysfile=0,
               print_=1,
               pause=-1,
               retrieval='optional'):

        """
        FORMAT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file containing fields to display in the report body. 
            Required=Yes
        repdef: Input
            Optional report definition file. Must contain the following fields :- REPNAME A8 Report name 
            FIELD A8 Output data field name. INDEX N Field output order. WIDTH N Output field width in char. 
            N Decimal places for N,0=int. WRAPCHAR A4 [Y|N] wrap wide alphas. HT1 A12 FIELD header text, 
            1. HT2 A12 FIELD header text, line 2. HT3 A12 FIELD header text, line 3. FT1 A12 FIELD footer text, 
            1. FT2 A12 FIELD footer text, line 2. FT3 A12 FIELD footer text, line 3. If REPDEF specified, a 
            key value identifying the report definition to use will be requested at the start of the 
            input stage. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        lhmargin: 
            Start character column for report. (1) All report output is located relative to this position 
            the screen/paper. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        rhmargin: 
            End character column for report. (79) 
            Range=Undefined
            Values=Undefined
            Default=79
            Required=No
        lines: 
            Number of lines per page of output. (20) = 0 Continuous output, no paging. >= 1 Output 'N' lines of 
            Data text per report page. 
            Range=Undefined
            Values=Undefined
            Default=20
            Required=No
        hdsep: 
            Horizontal separator to use between header text and the data columns. (3) Only applies to 
            specified with the optional REPDEF file. Option Description 0 No separator. 1 Output a blank 
            above data. 2 Output a dashed line above data. 3 Output a solid line above data. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        ftsep: 
            Horizontal separator to use between the data columns and the footer text. (3) Only applies to 
            specified with the optional REPDEF file. Option Description 0 No separator. 1 Output a blank 
            below data. 2 Output a dashed line below data. 3 Output a solid line below data. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        gutter: 
            Number of spaces between adjacent data field columns in output report. (1) Only applies to 
            specified with the optional REPDEF file. Option Description 0 Data columns abut each other. >= 
            Insert 'N' spaces between columns. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        keybreak: 
            Action to take when any of the optional header/footer key fields specified with the ^ FIELD^ 
            q.v. change. (-1) Option Description -1 Output the footer and start a new page when any ^ FIELD^ 
            >= 0 Output the footer, then advance 'N' lines on the same page. If no room on that page for next 
            and at least 1 data line, then start a new page. 
            Range=Undefined
            Values=Undefined
            Default=-1
            Required=No
        noff: 
            Form-feed character output. (0) Option Description 0 Output a form-feed for new page. 1 
            form-feed output. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        double: 
            Line spacing for data column records.(0) Option Description 0 No spaces between data lines. 1 
            a blank line below each data line. i.e. "Double spaced" 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        sysfile: 
            System file output control. (0) Option Description 0 No system file output. 1 Report is output 
            a system file. If SYSFILE=1 , an output name will be requested during the interactive input. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            Screen output control for report. (1) Option Description -1 Will stop screen output. >= 0: 
            will appear on the screen. 
            Range=-1,1
            Values=-1,1
            Default=1
            Required=No
        pause: 
            Display control for screen paging. (-1) Only used for screen output PRINT>=0. = -1 Wait until 
            presses RETURN before displaying next page. Option Description 0 Display all pages without 
            >= 1: Pause for 'N' seconds, then automatically display next page. 
            Range=Undefined
            Values=Undefined
            Default=-1
            Required=No
        """


        command = "format "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if repdef != "optional":
            command += " &repdef=" + repdef 

        if lhmargin != "optional":
            command += " @lhmargin=" + str(lhmargin) 

        if rhmargin != "optional":
            command += " @rhmargin=" + str(rhmargin) 

        if lines != "optional":
            command += " @lines=" + str(lines) 

        if hdsep != "optional":
            command += " @hdsep=" + str(hdsep) 

        if ftsep != "optional":
            command += " @ftsep=" + str(ftsep) 

        if gutter != "optional":
            command += " @gutter=" + str(gutter) 

        if keybreak != "optional":
            command += " @keybreak=" + str(keybreak) 

        if noff != "optional":
            command += " @noff=" + str(noff) 

        if double != "optional":
            command += " @double=" + str(double) 

        if sysfile != "optional":
            command += " @sysfile=" + str(sysfile) 

        if print_ != "optional":
            command += " @print=" + str(print_) 

        if pause != "optional":
            command += " @pause=" + str(pause) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def foskor(self,
               planning='required',
               startmon="optional",
               startyr="optional",
               sixmonth=0,
               cutons="optional",
               p2o5tons="optional",
               retrieval='optional'):

        """
        FOSKOR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        planning: Input
            A file containing the numeric fields COMPMENT, TONNES, CU, P2O5, MT, MONTH, YEAR, where 
            is a 'Compartment' number in the range 1-45 defining the type of ore and the delivery point. For 
            on Compartment numbers, see the end of the documentation. All TONNES figures must be in 
            MONTH and YEAR fields are numeric; YEAR is the last two digits, i.e. 89 for 1989. This file is 
            set up and maintained by AED. There can be data for many different months and years in the file; 
            required start month and year for reporting is selected by parameter, as is the length of time 
            All fields in the file must be entered as positive numbers; if one is found that is not set, the 
            is exited with a fatal error. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        startmon: 
            1-12 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        startyr: 
            Start Year for report e.g. 88. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        sixmonth: 
            Option Description 0 for 1 month report; =1 for six months (0). Yes 0 Undefined Undefined 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        cutons: 
            Cu reconciliation tonnage for period. Zero means no reconciliation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        p2o5tons: 
            BD13-E 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        """


        command = "foskor "


        # Required input error check

        if planning == "required":
            raise ValueError("planning is required.")

        command += " &planning=" + planning 


        # Required parameter error check

        if startmon == "required":
            raise ValueError("startmon is required.")

        command += " @startmon=" + str(startmon) 


        # Required parameter error check

        if startyr == "required":
            raise ValueError("startyr is required.")

        command += " @startyr=" + str(startyr) 


        # Required parameter error check

        if sixmonth == "required":
            raise ValueError("sixmonth is required.")

        command += " @sixmonth=" + str(sixmonth) 


        # Required parameter error check

        if cutons == "required":
            raise ValueError("cutons is required.")

        command += " @cutons=" + str(cutons) 


        # Required parameter error check

        if p2o5tons == "required":
            raise ValueError("p2o5tons is required.")

        command += " @p2o5tons=" + str(p2o5tons) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def fxout(self,
              in_='required',
              tolton=0.5,
              format=0,
              element=1,
              zonefld=0,
              retrieval='optional'):

        """
        FXOUT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        tolton: 
            Minimum tonnage in parcel to be output (0.5) 
            Range=Undefined
            Values=Undefined
            Default=0.5
            Required=No
        format: 
            Output format for economic file (0) 0 - fixed format 1 - comma separated 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        element: 
            Number of elements to be processed (1) Limited to 10 for FOUR-X. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=Yes
        zonefld: 
            Prompt for optional ZONE field (0) 0 - don't prompt for ZONE field 1 - prompt for ZONE field 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "fxout "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if tolton != "optional":
            command += " @tolton=" + str(tolton) 

        if format != "optional":
            command += " @format=" + str(format) 


        # Required parameter error check

        if element == "required":
            raise ValueError("element is required.")

        command += " @element=" + str(element) 

        if zonefld != "optional":
            command += " @zonefld=" + str(zonefld) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def gausan(self,
               in_='required',
               polyno='optional',
               trans='optional',
               retrieval='optional'):

        """
        GAUSAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data file. A maximum of 99998 samples can be processed. 
            Required=Yes

        Output Files:
        -------------

        polyno: Undefined
            Optional output file containing polynomial coefficients. It includes the following 
            fields: POLYINDX - polynomial index number [0,1,2,..] COEFF - the polynomial coefficient. 
            - estimated variance. It also includes an implicit field: POLYNUM - the number of polynomials 
            in the transformation, 
            Required=No
        trans: Undefined
            Optional output file containing transformed values. It includes the following explicit 
            VALUE - the untransformed value. FREQENCY - number of occurences of VALUE ANAMOR - the 
            value INVERSE - inverse of the transformed value It also contains the following implicit 
            POLYNUM - the number of polynomials used in the transformation NUMSAMP - the number of 
            samples MEANORIG - mean of the original values VARORIG - variance of the original values 
            - mean of the transformed values VARTRAN - variance of the transformed values MEANINV - mean of 
            inverse values VARINV - variance of the inverse values 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "gausan "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if polyno != "optional":
            command += " &polyno=" + polyno 

        if trans != "optional":
            command += " &trans=" + trans 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def gausanam(self,
                 samples='required',
                 graph='optional',
                 stats='optional',
                 retrieval='optional'):

        """
        GAUSANAM
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        samples: Input
            A Datamine Binary file (.dm) that contains sample positional information and supporting 
            
            Required=Yes

        Output Files:
        -------------

        graph: Undefined
            A file containing the data required to construct scatter plot and histogram graphs relating to 
            locally-conditioned SMU model. 
            Required=No
        stats: Undefined
            A file containing summary statistical data (in Datamine binary format) relating to a 
            SMU model. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "gausanam "


        # Required input error check

        if samples == "required":
            raise ValueError("samples is required.")

        command += " &samples=" + samples 

        if graph != "optional":
            command += " &graph=" + graph 

        if stats != "optional":
            command += " &stats=" + stats 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def gentra(self,
               in_='required',
               out='required',
               retrieval='optional'):

        """
        GENTRA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "gentra "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def grade(self,
              proto='required',
              in_='required',
              retrieval='optional'):

        """
        GRADE
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Block Model prototype 
            Required=Yes
        in: Input
            Drillhole 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "grade "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def grton(self,
              polyno='required',
              qtn='required',
              qtr='optional',
              retrieval='optional'):

        """
        GRTON
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        polyno: Input
            Input file containing polynomial coefficients. This file is created as output by process 
            The following fields are required: POLYINDX - polynomial index number [0,1,2,..] COEFF - the 
            coefficient. POLYNUM - the number of polynomials used in the transformation. 
            Required=Yes

        Output Files:
        -------------

        qtn: Undefined
            Compulsory output file containing grade and tonnage values for different cut-offs. Change of 
            calculations are NOT used. It includes the following explicit fields: CUTOFF - actual cut-off 
            ANAMOR - gaussian anamorphose TONABOVE - ratio of tons mined above cut-off METABOVE - ratio of 
            recovered above cut-off GRDABOVE - average grade above cut-off TONBELOW - ratio of tons mined 
            cut-off It also includes the following implicit field. CHSUPP - change of support variable. 
            is always set to 1. 
            Required=Yes
        qtr: Undefined
            Optional output file containing grade and tonnage values for different cut-offs. Change of 
            calculations ARE used. It includes the following explicit fields: CUTOFF - actual cut-off 
            ANAMOR - gaussian anamorphose TONABOVE - ratio of tons mined above cut-off METABOVE - ratio of 
            recovered above cut-off GRDABOVE - average grade above cut-off TONBELOW - ratio of tons mined 
            cut-off It also includes the following implicit fields. CHSUPP - change of support variable. 
            - block variance, as defined by parameter BLOCKVAR. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "grton "


        # Required input error check

        if polyno == "required":
            raise ValueError("polyno is required.")

        command += " &polyno=" + polyno 


        # Required output error check

        if qtn == "required":
            raise ValueError("qtn is required.")

        command += " &qtn=" + qtn 

        if qtr != "optional":
            command += " &qtr=" + qtr 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def hisfit(self,
               in_='required',
               modelou='optional',
               retrieval='optional'):

        """
        HISFIT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Raw data file. Must contain at least one numeric explicit field. 
            Required=Yes

        Output Files:
        -------------

        modelou: Histogram
            Histogram model output file. The histogram distribution model parameters can be written to 
            file. The models written to this file can be retrieved at any time while running the program. The 
            will generate the required fields:- MODELREF, FIELD, DISTTYPE, NUM.COMP, MEAN1, STD.DEV1, 
            STD.DEV8, PROP8. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "hisfit "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if modelou != "optional":
            command += " &modelou=" + modelou 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def histog(self,
               in_='required',
               out='required',
               value='required',
               binsize="optional",
               minimum="optional",
               numbins="optional",
               print_=0,
               retrieval='optional'):

        """
        HISTOG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. This will contain one record for each histogram bin and nine fields LOWER, MIDDLE, 
            FREQENCY, CUMFREQ., AVIVAL, FREQ-%, CUMF-%, TOTVAL. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Field to be histogrammed (numeric). 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        binsize: 
            Bin width. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        minimum: 
            Lower bound of first bin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        numbins: 
            Number of bins (max 50). 
            Range=1,50
            Values=Undefined
            Default=Undefined
            Required=Yes
        print: 
            >=1 display all records, all samples outside bins, the output file DD (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "histog "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required parameter error check

        if binsize == "required":
            raise ValueError("binsize is required.")

        command += " @binsize=" + str(binsize) 


        # Required parameter error check

        if minimum == "required":
            raise ValueError("minimum is required.")

        command += " @minimum=" + str(minimum) 


        # Required parameter error check

        if numbins == "required":
            raise ValueError("numbins is required.")

        command += " @numbins=" + str(numbins) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def holes3d(self,
                collar='required',
                survey='optional',
                sample1='required',
                sample2='optional',
                sample3='optional',
                sample4='optional',
                sample5='optional',
                sample6='optional',
                out='required',
                holesmry='optional',
                errors='optional',
                bhid='optional',
                xcollar='optional',
                ycollar='optional',
                zcollar='optional',
                from_='optional',
                to='optional',
                at='optional',
                brg='optional',
                dip='optional',
                survsmth=1,
                endpoint=0,
                dipmeth=nan,
                print_=0,
                retrieval='optional'):

        """
        HOLES3D
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        collar: Input
            Data file of drillhole collar locations. Expects fields BHID, XCOLLAR, YCOLLAR and ZCOLLAR. 
            Required=Yes
        survey: Input
            Optional survey data file. Expects fields BHID, AT, BRG, DIP. If a borehole has Survey Data, 
            it must include a record for the collar location, i.e. AT=0. If a survey file is not specified it 
            assumed that all holes are vertical. If the survey file only includes a subset of the total 
            of holes, then it is assumed that all holes which are not included in the survey file are 
            
            Required=No
        sample1: Input
            First sample data file. This file is compulsory and must include fields BHID, FROM, and TO. It 
            probably also include at least one sample attribute field, such as grade or lithology. 
            Required=Yes
        sample2: Input
            Optional second sample data file. Expects fields BHID, FROM, and TO, and at least one assay or 
            attribute field. 
            Required=No
        sample3: Input
            Optional third sample data file. Expects fields BHID, FROM, and TO, and at least one assay or 
            attribute field. 
            Required=No
        sample4: Input
            Optional fourth sample data file. Expects fields BHID, FROM, and TO, and at least one assay or 
            attribute field. 
            Required=No
        sample5: Input
            Optional fifth sample data file. Expects fields BHID, FROM, and TO, and at least one assay or 
            attribute field. 
            Required=No
        sample6: Input
            Optional sixth sample data file. Expects fields BHID, FROM, and TO, and at least one assay or 
            attribute field. 
            Required=No

        Output Files:
        -------------

        out: Drillhole
            Output desurveyed sample data file. This will include fields BHID, FROM, TO, LENGTH, X, Y, Z, 
            B0, and all other fields which were included in the sample file(s). The X,Y and Z fields are the 
            of the centre of each sample. The A0 and B0 fields are the azimuth and dip of the sample, 
            For more information on Downhole Survey files, click here. 
            Required=Yes
        holesmry: Table
            Optional output file containing a summary of the drillholes in each of the input files. It shows 
            number of records in each input file for each drillhole identifier (BHID). This can be very 
            for validating the data, and showing what data is missing from which holes. 
            Required=No
        errors: Table
            Optional output file containing a list of surveys and samples which do not pass the validation 
            Tests 1-3 refer to the SURVEY file, tests 4-6 are applied to the data in files SAMPLE1 to SAMPLE6, 
            test 7 is on the COLLAR file: (1) a survey file has been specified. (2) each BHID has a survey 
            for AT=0. (3) each BHID in the (merged) sample file has at least one entry in the SURVEY file. (4) 
            downhole TO value of a sample is greater then the downhole FROM value. (5) the FROM/TO interval 
            one sample does not overlap the FROM/TO interval of the next sample. (6) the FROM/TO interval is 
            duplicated. (7) XCOLLAR, YCOLLAR and ZCOLLAR are not absent data. Only one of the errors 4-6 
            be reported even if a sample fails more than one of these tests. The output file will contain the 
            fields: - FILE: the name of the file in which the error was identified, - PROBLEM: a brief 
            of the problem, - BHID: the drillhole identifier, - FROM: the downhole FROM distance of the 
            - TO: the downhole TO distance of the sample. In order to correct the problems it will be 
            to edit the original data files. 
            Required=No

        Fields:
        -------

        bhid: Any : COLLAR, SAMPLE1, SURVEY
            Drillhole identifier. 
            Default=BHID
            Required=No
        xcollar: Numeric : COLLAR
            X co-ordinate of drillhole collar. 
            Default=XCOLLAR
            Required=No
        ycollar: Numeric : COLLAR
            Y co-ordinate of drillhole collar. 
            Default=YCOLLAR
            Required=No
        zcollar: Numeric : COLLAR
            Z co-ordinate of drillhole collar. 
            Default=ZCOLLAR
            Required=No
        from: Numeric : SAMPLE1
            Downhole distance to sample top. 
            Default=FROM
            Required=No
        to: Numeric : SAMPLE1
            Downhole distance to sample bottom. 
            Default=TO
            Required=No
        at: Numeric : SURVEY
            Downhole distance to survey point. 
            Default=AT
            Required=No
        brg: Numeric : SURVEY
            Bearing of drillhole. 
            Default=BRG
            Required=No
        dip: Numeric : SURVEY
            Dip of drillhole. Dip values must always be positive when referring to the downwards direction 
            using this command in a batch process. For more information on Downhole Survey files, click 
            
            Default=DIP
            Required=No

        Parameters:
        -----------

        survsmth: 
            0 Prevent samples being added to the output file. 1 add samples where there are more than one 
            record per sample. When a hole sample is desurveyed the survey data (azimuth and dip) of the 
            is used to locate the sample centre point in space. A desurveyed drillhole file contains a set of 
            each with a calculated center point in XYZ world space. Sometimes raw drillhole data tables to 
            desurveyed may contain more than one survey record within one sample, each with different 
            and dips. Since a sample is by definition a straight line its location in space cannot be 
            using more than one survey record. The SURVSMTH parameter is used to automatically divide up 
            where more than one survey records lie within a sample. The samples are split in half until only 
            survey record lies within each sample. Therefore many samples may be created. The default 
            of SURVSMTH is 1 which will cause extra samples to be created so that no sample contains more than 
            survey record within its FROM and TO values. For no extra samples to be created the SURVSMTH 
            should be set to zero. If the SURVSMTH parameter is set to zero and a sample does contain more than 
            survey record not all survey records will be taken into account. Traditionally this has been 
            by first compositing the samples to reduce their lengths. The SURVSMTH parameter avoids this 
            It is often the case that the first one or two samples in exploration holes contain more than one 
            record because they are relatively long. This is because sample divisions have not had to have 
            created through assay and lithological identification near the surface. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        endpoint: 
            set to 1 to include the X, Y and Z coordinates of the start and end of each sample in the desurveyed 
            file. Fields XSTART, YSTART, ZSTART, XEND, YEND and ZEND are created in the output file. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dipmeth: 
            Set to 1 to ensure that positive dip values point downwards, or -1 to point upwards 
            Range=nan
            Values=nan
            Default=nan
            Required=nan
        print: 
            Option Description 1 to display each individual process which is run by the HOLES3D 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "holes3d "


        # Required input error check

        if collar == "required":
            raise ValueError("collar is required.")

        command += " &collar=" + collar 

        if survey != "optional":
            command += " &survey=" + survey 


        # Required input error check

        if sample1 == "required":
            raise ValueError("sample1 is required.")

        command += " &sample1=" + sample1 

        if sample2 != "optional":
            command += " &sample2=" + sample2 

        if sample3 != "optional":
            command += " &sample3=" + sample3 

        if sample4 != "optional":
            command += " &sample4=" + sample4 

        if sample5 != "optional":
            command += " &sample5=" + sample5 

        if sample6 != "optional":
            command += " &sample6=" + sample6 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if holesmry != "optional":
            command += " &holesmry=" + holesmry 

        if errors != "optional":
            command += " &errors=" + errors 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if xcollar != "optional":
            command += " *xcollar=" + xcollar 

        if ycollar != "optional":
            command += " *ycollar=" + ycollar 

        if zcollar != "optional":
            command += " *zcollar=" + zcollar 

        if from_ != "optional":
            command += " *from=" + from_ 

        if to != "optional":
            command += " *to=" + to 

        if at != "optional":
            command += " *at=" + at 

        if brg != "optional":
            command += " *brg=" + brg 

        if dip != "optional":
            command += " *dip=" + dip 

        if survsmth != "optional":
            command += " @survsmth=" + str(survsmth) 

        if endpoint != "optional":
            command += " @endpoint=" + str(endpoint) 

        if dipmeth != "optional":
            command += " @dipmeth=" + str(dipmeth) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def holmer(self,
               in1='required',
               in2='required',
               out='required',
               bhid='required',
               from_='required',
               to='required',
               retrieval='optional'):

        """
        HOLMER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input file 1. Must contain at least fields for BHID, FROM,and TO. 
            Required=Yes
        in2: Input
            Input file 2. Must contain at least fields for BHID, FROM,and TO. 
            Required=Yes

        Output Files:
        -------------

        out: Downhole Sample
            Output file. 
            Required=Yes

        Fields:
        -------

        bhid: Numeric : IN1, IN2
            Borehole identifier. May be numeric or alpha. 
            Default=BHID
            Required=Yes
        from: Numeric : IN1, IN2
            Downhole FROM distance (top of intersection). 
            Default=FROM
            Required=Yes
        to: Numeric : IN1, IN2
            Downhole TO distance (base of intersection). 
            Default=TO
            Required=Yes

        Parameters:
        -----------

        """


        command = "holmer "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if bhid == "required":
            raise ValueError("bhid is required.")

        command += " *bhid=" + bhid 


        # Required field error check

        if from_ == "required":
            raise ValueError("from_ is required.")

        command += " *from_=" + from_ 


        # Required field error check

        if to == "required":
            raise ValueError("to is required.")

        command += " *to=" + to 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def igesin(self,
               proto='required',
               retrieval='optional'):

        """
        IGESIN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Plot Prototype
            File containing plot prototype. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "igesin "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def igesout(self):

        """
        IGESOUT
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "igesout "


        self.run_command(command)

    def ijkgen(self,
               proto='required',
               in_='required',
               out='required',
               x='required',
               y='required',
               z='required',
               psmodel=0,
               retrieval='optional'):

        """
        IJKGEN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Input prototype model describing the model parameters. Normally set up by PROTOM. Must 
            the numeric fields XC, YC, ZC, IJK (explicit) and XMORIG, YMORIG, ZMORIG, NX, NY, NZ (implicit) 
            XINC, YINC, ZINC (either, as required). For recalculation of IJK in an existing model, may be 
            same file as IN. 
            Required=Yes
        in: Undefined
            Input file to be converted into a model. Must contain the fields X , Y and Z representing 
            centre locations. This can be an existing model for recalculation of IJK. 
            Required=Yes

        Output Files:
        -------------

        out: BlockModel
            Output model file. May be the same as IN where IN already contains model fields; in this case, 
            is in-place. IJK will be set to absent (-) if the record lies outside the model limits. 
            Required=Yes

        Fields:
        -------

        x: Numeric : IN
            Explicit numeric field in IN containing the X co-ordinate of the (sub-)cell centre. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Explicit numeric field in IN containing the Y co-ordinate of the (sub-)cell centre. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Explicit numeric field in IN containing the Z co-ordinate of the (sub-)cell centre. 
            Default=Z
            Required=Yes

        Parameters:
        -----------

        psmodel: 
            Option Description 0 Just generate IJK field. 1 Place all other model fields as well as IJK into 
            0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=Yes
        """


        command = "ijkgen "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required parameter error check

        if psmodel == "required":
            raise ValueError("psmodel is required.")

        command += " @psmodel=" + str(psmodel) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def indata(self,
               in_='required',
               out='required',
               retrieval='optional'):

        """
        INDATA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File containing Data Definition. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            File to be created (may be same as IN; if it is, then original data in file is overwritten). 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "indata "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def indest(self,
               proto='required',
               in_='required',
               srcparm='required',
               estparm='required',
               vmodparm='optional',
               retrieval='optional'):

        """
        INDEST
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Block_Model_File 
            Required=Yes
        in: Input
            Undefined 
            Required=Yes
        srcparm: Input
            Undefined 
            Required=Yes
        estparm: Input
            Undefined 
            Required=Yes
        vmodparm: Input
            Variogram - Model 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "indest "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if srcparm == "required":
            raise ValueError("srcparm is required.")

        command += " &srcparm=" + srcparm 


        # Required input error check

        if estparm == "required":
            raise ValueError("estparm is required.")

        command += " &estparm=" + estparm 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def inputw(self,
               in_='required',
               out='required',
               print_=0,
               retrieval='optional'):

        """
        INPUTW
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File containing Data Definition. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            File to be created (may be same as IN; if it is, the original data in file is overwritten). 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        print: 
            >=1 Display each record (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "inputw "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ipdnpg(self,
               proto='required',
               in_='required',
               model='required',
               x='required',
               y='required',
               z='required',
               value='required',
               retrieval='optional'):

        """
        IPDNPG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Prototype model. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK. May contain cells and sub-cells. 
            Required=Yes
        in: Input
            Input sample data (sorted on X). Must contain the fields X , Y , Z , VALUE. 
            Required=Yes

        Output Files:
        -------------

        model: Block Model
            Output interpolated model. 
            Required=Yes

        Fields:
        -------

        x: Numeric : IN
            Name of sample X field. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Name of sample Y field. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Name of sample Z field. 
            Default=Z
            Required=Yes
        value: Undefined : Undefined
            Name of field to be interpolated. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        """


        command = "ipdnpg "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def isohol(self,
               in_='required',
               proto='optional',
               plot='required',
               value='optional',
               bhid='optional',
               x='optional',
               y='optional',
               z='optional',
               length='optional',
               a0='optional',
               b0='optional',
               pxmin="optional",
               pxmax="optional",
               pymin="optional",
               pymax="optional",
               pzmin="optional",
               pzmax="optional",
               vertexag="optional",
               rotate=45,
               elevate=45,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               retrieval='optional'):

        """
        ISOHOL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input drillhole data file. Must contain fields BHID,X,Y,Z,LENGTH,A0,B0, + VALUE field. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). Without a plot prototype, PXMIN ,.... PZMAX 
            the region to be mapped to the screen. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Field containing colour codes. 
            Default=Undefined
            Required=No
        bhid: Any : IN
            Drillhole identifier field (if not BHID). 
            Default=BHID
            Required=No
        x: Numeric : IN
            Name of X field (if not X). 
            Default=X
            Required=No
        y: Numeric : IN
            Name of Y field (if not Y). 
            Default=Y
            Required=No
        z: Numeric : IN
            Name of Z field (if not Z). 
            Default=Z
            Required=No
        length: Numeric : IN
            Name of LENGTH field (if not LENGTH). 
            Default=LENGTH
            Required=No
        a0: Numeric : IN
            Name of A0 field (if not A0). 
            Default=A0
            Required=No
        b0: Numeric : IN
            Name of B0 field (if not B0). 
            Default=B0
            Required=No

        Parameters:
        -----------

        pxmin: 
            X value of left-hand side of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pxmax: 
            X value of right-hand side of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymin: 
            Y value of front of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymax: 
            Y value of back of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmin: 
            Z value of bottom of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmax: 
            Z value of top of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vertexag: 
            Vertical exaggeration required. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rotate: 
            The rotation angle in degrees horizontally of the viewpoint, clockwise from the model Y axis 
            
            Range=0,360
            Values=Undefined
            Default=45
            Required=Yes
        elevate: 
            The rotation angle in degrees vertically of the viewpoint, upwards from model X-Y plane (45). 
            Range=-90,90
            Values=Undefined
            Default=45
            Required=Yes
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "isohol "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if proto != "optional":
            command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if value != "optional":
            command += " *value=" + value 

        if bhid != "optional":
            command += " *bhid=" + bhid 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if length != "optional":
            command += " *length=" + length 

        if a0 != "optional":
            command += " *a0=" + a0 

        if b0 != "optional":
            command += " *b0=" + b0 


        # Required parameter error check

        if pxmin == "required":
            raise ValueError("pxmin is required.")

        command += " @pxmin=" + str(pxmin) 


        # Required parameter error check

        if pxmax == "required":
            raise ValueError("pxmax is required.")

        command += " @pxmax=" + str(pxmax) 


        # Required parameter error check

        if pymin == "required":
            raise ValueError("pymin is required.")

        command += " @pymin=" + str(pymin) 


        # Required parameter error check

        if pymax == "required":
            raise ValueError("pymax is required.")

        command += " @pymax=" + str(pymax) 


        # Required parameter error check

        if pzmin == "required":
            raise ValueError("pzmin is required.")

        command += " @pzmin=" + str(pzmin) 


        # Required parameter error check

        if pzmax == "required":
            raise ValueError("pzmax is required.")

        command += " @pzmax=" + str(pzmax) 


        # Required parameter error check

        if vertexag == "required":
            raise ValueError("vertexag is required.")

        command += " @vertexag=" + str(vertexag) 


        # Required parameter error check

        if rotate == "required":
            raise ValueError("rotate is required.")

        command += " @rotate=" + str(rotate) 


        # Required parameter error check

        if elevate == "required":
            raise ValueError("elevate is required.")

        command += " @elevate=" + str(elevate) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def isomet(self,
               in_='required',
               proto='optional',
               plot='required',
               field='required',
               vmin="optional",
               vmax="optional",
               vertexag="optional",
               gridint="optional",
               rotate=45,
               elevate=45,
               plane='XY',
               position="optional",
               top="optional",
               bottom="optional",
               pxmin="optional",
               pxmax="optional",
               pymin="optional",
               pymax="optional",
               xinc="optional",
               yinc="optional",
               zinc="optional",
               ndx=0,
               ndy=0,
               ndz=0,
               colint=0,
               colst=1,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               retrieval='optional'):

        """
        ISOMET
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK + FIELD field. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE, XORIG, YORIG, XRT, YTP, XPICRT, YPICTP (numeric, implicit). Only 
            values of fields XORIG, YORIG, XRT, YTP, XPICRT and YPICTP are used. If no PROTO file entered, 
            is fully automatic. 
            Required=No

        Output Files:
        -------------

        plot: Plot File
            Output plot file. 
            Required=Yes

        Fields:
        -------

        field: Undefined : Undefined
            Field to be plotted. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        vmin: 
            Minimum mesh value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vmax: 
            Maximum mesh value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vertexag: 
            Vertical exaggeration required. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        gridint: 
            Grid interval for mesh. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rotate: 
            The rotation angle in degrees horizontally of the viewpoint, clockwise from the model Y axis 
            
            Range=0,360
            Values=Undefined
            Default=45
            Required=No
        elevate: 
            The rotation angle in degrees vertically of the viewpoint, upwards from model X-Y plane (45). 
            Range=-90,90
            Values=Undefined
            Default=45
            Required=No
        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam surface required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam surface required. Only required if neither POSITION nor 
            appear. Both TOP and BOTTOM set for an isopach. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        pxmin: 
            Minimum X value for area covered by mesh. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        pxmax: 
            Maximum X value for area covered by mesh. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        pymin: 
            Minimum Y value for area covered by mesh. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        pymax: 
            Maximum Y value for area covered by mesh. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xinc: 
            Grid increment on the X axis. Default is PXMAX- PXMIN. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yinc: 
            Grid increment on the Y axis. Default is PYMAX- PYMIN. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zinc: 
            Grid increment on the Z axis. Default is VMAX- VMIN. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndx: 
            Number of decimal places for grid annotation on the X axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ndy: 
            Number of decimal places for grid annotation on the Y axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ndz: 
            Number of decimal places for grid annotation on the Z axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        colint: 
            Mesh interval for colour. If 0 then all of mesh is plotted in (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        colst: 
            Start colour for mesh (1). 
            Range=1,64
            Values=Undefined
            Default=1
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). N.B. Scaling is fully automatic in this process. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "isomet "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if proto != "optional":
            command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if field == "required":
            raise ValueError("field is required.")

        command += " *field=" + field 


        # Required parameter error check

        if vmin == "required":
            raise ValueError("vmin is required.")

        command += " @vmin=" + str(vmin) 


        # Required parameter error check

        if vmax == "required":
            raise ValueError("vmax is required.")

        command += " @vmax=" + str(vmax) 


        # Required parameter error check

        if vertexag == "required":
            raise ValueError("vertexag is required.")

        command += " @vertexag=" + str(vertexag) 


        # Required parameter error check

        if gridint == "required":
            raise ValueError("gridint is required.")

        command += " @gridint=" + str(gridint) 

        if rotate != "optional":
            command += " @rotate=" + str(rotate) 

        if elevate != "optional":
            command += " @elevate=" + str(elevate) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if pxmin != "optional":
            command += " @pxmin=" + str(pxmin) 

        if pxmax != "optional":
            command += " @pxmax=" + str(pxmax) 

        if pymin != "optional":
            command += " @pymin=" + str(pymin) 

        if pymax != "optional":
            command += " @pymax=" + str(pymax) 

        if xinc != "optional":
            command += " @xinc=" + str(xinc) 

        if yinc != "optional":
            command += " @yinc=" + str(yinc) 

        if zinc != "optional":
            command += " @zinc=" + str(zinc) 

        if ndx != "optional":
            command += " @ndx=" + str(ndx) 

        if ndy != "optional":
            command += " @ndy=" + str(ndy) 

        if ndz != "optional":
            command += " @ndz=" + str(ndz) 

        if colint != "optional":
            command += " @colint=" + str(colint) 

        if colst != "optional":
            command += " @colst=" + str(colst) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def isoper(self,
               proto='required',
               perimin='required',
               plot='required',
               pxmin="optional",
               pxmax="optional",
               pymin="optional",
               pymax="optional",
               pzmin="optional",
               pzmax="optional",
               rotate=45,
               elevate=45,
               charsize=4,
               aspratio=0.9,
               nan=1,
               retrieval='optional'):

        """
        ISOPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Prototype plot file. Only the plot area data is used. Any scaling and data ranges (XMIN, XMAX etc 
            are ignored. 
            Required=Yes
        perimin: Input
            Perimeter input file 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        pxmin: 
            X value of left-hand side of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pxmax: 
            X value of right-hand side of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymin: 
            Y value of front of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymax: 
            Y value of back of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmin: 
            Z value of bottom of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmax: 
            Z value of top of region to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rotate: 
            The rotation angle in degrees horizontally of the viewpoint, clockwise from the data Y axis 
            
            Range=0,360
            Values=Undefined
            Default=45
            Required=No
        elevate: 
            The rotation angle in degrees vertically of the viewpoint, upwards from data X-Y plane (45). 
            Range=-90,90
            Values=Undefined
            Default=45
            Required=No
        charsize: 
            Character size in millimetres (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "isoper "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if pxmin == "required":
            raise ValueError("pxmin is required.")

        command += " @pxmin=" + str(pxmin) 


        # Required parameter error check

        if pxmax == "required":
            raise ValueError("pxmax is required.")

        command += " @pxmax=" + str(pxmax) 


        # Required parameter error check

        if pymin == "required":
            raise ValueError("pymin is required.")

        command += " @pymin=" + str(pymin) 


        # Required parameter error check

        if pymax == "required":
            raise ValueError("pymax is required.")

        command += " @pymax=" + str(pymax) 


        # Required parameter error check

        if pzmin == "required":
            raise ValueError("pzmin is required.")

        command += " @pzmin=" + str(pzmin) 


        # Required parameter error check

        if pzmax == "required":
            raise ValueError("pzmax is required.")

        command += " @pzmax=" + str(pzmax) 

        if rotate != "optional":
            command += " @rotate=" + str(rotate) 

        if elevate != "optional":
            command += " @elevate=" + str(elevate) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def isotri(self,
               proto='required',
               wiretr='required',
               wirept='required',
               plot='required',
               pxmin="optional",
               pxmax="optional",
               pymin="optional",
               pymax="optional",
               pzmin="optional",
               pzmax="optional",
               rotate=45,
               elevate="optional",
               hidden=0,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               retrieval='optional'):

        """
        ISOTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Prototype plot file. 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file . 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        pxmin: 
            Minimum data X value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pxmax: 
            Maximum data X value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymin: 
            Minimum data Y value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pymax: 
            Maximum data Y value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmin: 
            Minimum data Z value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        pzmax: 
            Maximum data Z value to be plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rotate: 
            The rotation angle of the direction of view, in degrees horizontally and clockwise from the 
            Y axis. Default (45). E.g. if model Y and X axes are parallel to North 45 = Looking North-East 225 = 
            South-West 
            Range=0,360
            Values=Undefined
            Default=45
            Required=No
        elevate: 
            30 
            Range=-90,90
            Values=Undefined
            Default=Undefined
            Required=No
        hidden: 
            Control of hidden line display. Option Description 0 Hidden lines are NOT displayed. 1 Hidden 
            are displayed. No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        charsize: 
            Character size in millimetres. 
            Range=nan
            Values=nan
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars. 
            Range=nan
            Values=nan
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot. 
            Range=nan
            Values=nan
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file. N.B. Scaling is fully automatic in this process. 
            Range=nan
            Values=nan
            Default=0
            Required=No
        """


        command = "isotri "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if pxmin == "required":
            raise ValueError("pxmin is required.")

        command += " @pxmin=" + str(pxmin) 


        # Required parameter error check

        if pxmax == "required":
            raise ValueError("pxmax is required.")

        command += " @pxmax=" + str(pxmax) 


        # Required parameter error check

        if pymin == "required":
            raise ValueError("pymin is required.")

        command += " @pymin=" + str(pymin) 


        # Required parameter error check

        if pymax == "required":
            raise ValueError("pymax is required.")

        command += " @pymax=" + str(pymax) 


        # Required parameter error check

        if pzmin == "required":
            raise ValueError("pzmin is required.")

        command += " @pzmin=" + str(pzmin) 


        # Required parameter error check

        if pzmax == "required":
            raise ValueError("pzmax is required.")

        command += " @pzmax=" + str(pzmax) 

        if rotate != "optional":
            command += " @rotate=" + str(rotate) 

        if elevate != "optional":
            command += " @elevate=" + str(elevate) 

        if hidden != "optional":
            command += " @hidden=" + str(hidden) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def join(self,
             in1='required',
             in2='required',
             out='required',
             key1='optional',
             key2='optional',
             key3='optional',
             key4='optional',
             key5='optional',
             key6='optional',
             key7='optional',
             key8='optional',
             key9='optional',
             key10='optional',
             subsetr=0,
             subsetf=0,
             cartjoin=0,
             print_=0,
             retrieval='optional'):

        """
        JOIN
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First file to be updated (sorted on required keyfields). 
            Required=Yes
        in2: Input
            Second file (update file) (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for matching. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Keyfield 2 for matching. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3 for matching. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4 for matching. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5 for matching. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6 for matching. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7 for matching. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8 for matching. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9 for matching. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10 for matching. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        subsetr: 
            Controls whether all records or a subset are written to the output file. If set to (0) all records 
            written. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        subsetf: 
            Controls whether all fields or a subset is written to the output file. If set to (0) all fields are 
            With SUBSETR and SUBSETF set to 0 JOIN writes out all records and all fields from both input 
            With SUBSETR=1 and SUBSETF=0 a relational subset join is carried out. With SUBSETR=0 and 
            a relational weave is carried out. With SUBSETR=1 and SUBSETF=1 a relational subset weave is 
            out. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        cartjoin: 
            If set to (0) and if no keyfields are specified the process will terminate with an error. If set to 
            the full Cartesian product is produced and written to the output file. No keyfields should be 
            to produce the Cartesian product. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >=1 Display messages on Data definitions. Default is (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "join "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if subsetr != "optional":
            command += " @subsetr=" + str(subsetr) 

        if subsetf != "optional":
            command += " @subsetf=" + str(subsetf) 

        if cartjoin != "optional":
            command += " @cartjoin=" + str(cartjoin) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def layout(self,
               in_='required',
               text='required',
               outlines='required',
               patterns='required',
               collars='optional',
               holes='optional',
               geol='optional',
               coordmod=0,
               coordtyp=0,
               loyorig="optional",
               loxorig="optional",
               haxiscol="optional",
               vaxiscol=10,
               charsize=3,
               dimenu=0,
               retrieval='optional'):

        """
        LAYOUT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Blast outline for composite design. The file must contain the fields:- XP,YP,ZP,PTN,PVALUE 
            explicit). It may also contain the field BENCH; if it does not contain this field, all bench 
            will be taken as 1. The PVALUE field contains a Blast number. The file may contain many blasts; 
            is selected at the start of the process. 
            Required=Yes
        text: Undefined
            Input/output text file for text added to the drawing. If this file does not exist, it will be 
            If it does exist, it must have the fields BENCH, BLAST, COMPOSIT, XT, YT, ANGLE, CHARSIZE, 
            (all numeric) and TEXT (40 characters). Any existing text in the file for the current bench and 
            will be plotted on the screen. 
            Required=Yes
        outlines: String
            Input/output perimeters. If this file does not exist, it will be created. It must contain the 
            XP, YP, ZP, PTN, PVALUE, P, PTYPE, BENCH, BLAST. The PVALUE field will contain the perimeter 
            Any perimeter defined with the DIGITISER [/CD] or NEW PERIMETER [/EN] commands may be written 
            the OUTLINES file by the WRITE PERIMETER [/FW] command. Perimeters will be overwritten if they 
            the perimeter number (PVALUE) of the perimeter being written. 
            Required=Yes
        patterns: Undefined
            Input/output pattern file. If this file does not exist, it will be created. It must contain the 
            ROW, XS, XSPACING, YSPACING, PATTERN (all numeric) and PATTEXT (16 character alphanumeric). 
            Required=Yes
        collars: Undefined
            Input/output collars file. Fields required are XCOLLAR, YCOLLAR, ZCOLLAR, BENCH, BLAST and 
            (A/N). Additional fields used if available are BRG, DIP, HLENGTH, PATTERN, NSAMP and SNFIRST. 
            this file does not exist it will be created with all the above fields. At least one of the COLLARS 
            HOLES files must be specified. 
            Required=No
        holes: Undefined
            Blast hole samples file. Fields required are X, Y, Z and BHID (A/N). Additional fields used if 
            are BENCH, BLAST, A0, B0, LENGTH, SAMPLE, FROM and TO. If this file does not exist it will be 
            with all the above fields. If it contains any grade values, these may be displayed either 
            or by colour besides each blast-hole. This file will be written to by the WRITE BLAST HOLES [/FL] 
            If any entries exist on the file for the current Bench and Blast they will first be overwritten. 
            the BENCH and BLAST fields do not exist, then all entries will be deleted before the new holes are 
            At least one of the COLLARS or HOLES files must be specified. 
            Required=No
        geol: Input
            Geological boundaries. This file must contain the fields X,Y,Z,PTN and PVALUE. The values are 
            to be (unclosed) strings rather than perimeters. Any strings on this file may be plotted over 
            blast. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        coordmod: 
            Coordinate verification mode, controls the prompting for coordinates in the LAY DOWN PATTERN 
            and DEFINE HOLE [/BD] commands. Option Description 0 No coordinate prompting 1 Coordinates 
            prompted for. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        coordtyp: 
            Coordinate type: Option Description 0 Conventional rhs 1 LO co-ordinate system. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        loyorig: 
            For COORDTYP=1 only; the LO Y co-ordinate origin [including - sign] for internal co-ordinate 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        loxorig: 
            For COORDTYP=1 only; the LO X co-ordinate origin for internal co-ordinate conversion. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        haxiscol: 
            8 
            Range=1,64
            Values=Undefined
            Default=Undefined
            Required=No
        vaxiscol: 
            Colour for vertical axis lines; these are Y axis lines [ COORDTYP=0] or LO X lines [ COORDTYP=1] 
            
            Range=1,64
            Values=Undefined
            Default=10
            Required=No
        charsize: 
            Character size for display in mm (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        dimenu: 
            Toggle between cursor and digitiser mode. Option Description 0 ; Cursor mode. 1 ; Digitiser 
            All commands available from digitiser. Default is 0 (0) Commands -------- 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "layout "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if text == "required":
            raise ValueError("text is required.")

        command += " &text=" + text 


        # Required input error check

        if outlines == "required":
            raise ValueError("outlines is required.")

        command += " &outlines=" + outlines 


        # Required input error check

        if patterns == "required":
            raise ValueError("patterns is required.")

        command += " &patterns=" + patterns 

        if collars != "optional":
            command += " &collars=" + collars 

        if holes != "optional":
            command += " &holes=" + holes 

        if geol != "optional":
            command += " &geol=" + geol 

        if coordmod != "optional":
            command += " @coordmod=" + str(coordmod) 

        if coordtyp != "optional":
            command += " @coordtyp=" + str(coordtyp) 

        if loyorig != "optional":
            command += " @loyorig=" + str(loyorig) 

        if loxorig != "optional":
            command += " @loxorig=" + str(loxorig) 

        if haxiscol != "optional":
            command += " @haxiscol=" + str(haxiscol) 

        if vaxiscol != "optional":
            command += " @vaxiscol=" + str(vaxiscol) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if dimenu != "optional":
            command += " @dimenu=" + str(dimenu) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def link3d(self,
               perimin='required',
               wireptin='required',
               wiretrin='required',
               section='optional',
               wireptou='optional',
               wiretrou='optional',
               perimout='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               attrib5='optional',
               maxpts=500,
               copyper=0,
               copywf=0,
               retrieval='optional'):

        """
        LINK3D
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input string file. If the file already exists, it must contain the fields XP ,YP, ZP, PTN and 
            If this file does not exist, it will be created with explicit numeric fields XP, YP, ZP, PID, PTN, 
            , and TAG plus any additional attribute fields which are specified (see below). If this file is 
            to be used as the wireframe points file it must contain an explicit numeric field PID. 
            Required=Yes
        wireptin: Input
            Input wireframe point file. If the file already exists, it must contain the fields XP ,YP, ZP and 
            If this file does not exist, it will be created with explicit numeric fields XP, YP, ZP, PID, PTN, 
            , and TAG plus any additional attribute fields which are specified (see below). If this file is 
            to be used as the string file it must contain the explicit numeric fields PTN and PVALUE. 
            Required=Yes
        wiretrin: Input
            Input wireframe triangle file. If this does not exist, it will be created with explicit numeric 
            PID1, PID2, PID3, TRIANGLE, SID plus any additional attribute fields which are specified (see 
            If the file already exists, it must contain all the five fields mentioned above. 
            Required=Yes
        section: Section Definition
            Optional section definition file. If this file does not exist it will be created. This file must 
            the fields XCENTRE, YCENTRE, ZCENTRE, SAZI, SDIP, HSIZE, VSIZE, DPLUS, DMINUS and TEXT. All 
            are numeric except for TEXT which must be 6 words long. It is advisable to specify a section file 
            this is used to change views from within LINK3D. Views can be created and stored in the section 
            from within LINK3D. 
            Required=No

        Output Files:
        -------------

        wireptou: Wireframe Points
            Optional output point file [for wireframe model] This file has all the same fields as the input 
            file, as well as new PID and TAG fields. 
            Required=No
        wiretrou: Wireframe Triangle
            Output triangle file [for wireframe model]. 
            Required=No
        perimout: String
            Optional output string file. 
            Required=No

        Fields:
        -------

        attrib1: Undefined : Undefined
            Optional attribute field 1. If specified, this field will appear in the output file with a value 
            for each digitised point. Attribute fields may be numeric or alphanumeric. If alphanumeric 
            are used, they MUST already exist in the PERIMIN file. In LINK3D Attributes need only be 
            if the PERIMIN file is being created. The process automatically picks up non-standard fields 
            attributes. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Optional attribute field 2. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Optional attribute field 3. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Optional attribute field 4. 
            Default=Undefined
            Required=No
        attrib5: Undefined : Undefined
            Optional attribute field 5. LINK3D can handle up to 10 attribute fields at once. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        maxpts: 
            Maximum number of points in any one string. The maximum number of strings that can be handled has 
            set for your installation. This is typically 500 strings (the actual number is displayed by 
            at run time). If MAXPTS is absent, a value is calculated that will avoid LINK3D having to page 
            to and from a temporary disk file. (500). 
            Range=Undefined
            Values=Undefined
            Default=500
            Required=No
        copyper: 
            If set to 1, then all strings will be copied from PERIMIN to PERIMOUT , subject to any retrieval 
            Default is no copy. If PERIMOUT is not set, COPYPER is ignored. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        copywf: 
            If set to 1, then all points and triangles will be copied from WIREPTIN to WIREPTOU and from 
            to WIRETROU , subject to any retrieval criteria. Default is no copy. If WIREPTOU and WIRETROU 
            not set, COPYPWF is ignored. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "link3d "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required input error check

        if wireptin == "required":
            raise ValueError("wireptin is required.")

        command += " &wireptin=" + wireptin 


        # Required input error check

        if wiretrin == "required":
            raise ValueError("wiretrin is required.")

        command += " &wiretrin=" + wiretrin 

        if section != "optional":
            command += " &section=" + section 

        if wireptou != "optional":
            command += " &wireptou=" + wireptou 

        if wiretrou != "optional":
            command += " &wiretrou=" + wiretrou 

        if perimout != "optional":
            command += " &perimout=" + perimout 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if attrib5 != "optional":
            command += " *attrib5=" + attrib5 

        if maxpts != "optional":
            command += " @maxpts=" + str(maxpts) 

        if copyper != "optional":
            command += " @copyper=" + str(copyper) 

        if copywf != "optional":
            command += " @copywf=" + str(copywf) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def linkpe(self,
               perimin='required',
               section='optional',
               wireptin='optional',
               wiretrin='optional',
               retrieval='optional'):

        """
        LINKPE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file or prototype, containing at least the numeric fields: XP, YP, ZP, PTN, 
            
            Required=Yes
        section: Input
            Optional input section definition file. 
            Required=No
        wireptin: Input
            Optional input wireframe point file. 
            Required=No
        wiretrin: Input
            Optional input wireframe triangle file. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "linkpe "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 

        if section != "optional":
            command += " &section=" + section 

        if wireptin != "optional":
            command += " &wireptin=" + wireptin 

        if wiretrin != "optional":
            command += " &wiretrin=" + wiretrin 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def list(self,
             in_='required',
             fieldlst='optional',
             f1='optional',
             f2='optional',
             f3='optional',
             f4='optional',
             f5='optional',
             f6='optional',
             f7='optional',
             f8='optional',
             f9='optional',
             f10='optional',
             fieldnam='optional',
             retrieval='optional'):

        """
        LIST
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be displayed. If IN is a catalogue file, then all the files in the catalogue will be 
            
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        f1: Undefined : Undefined
            Optional first listed field. None specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Optional second listed field. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Optional third listed field. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Optional fourth listed field. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Optional fifth listed field. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Optional sixth listed field. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Optional seventh listed field. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Optional eighth listed field. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Optional ninth listed field. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Optional tenth listed field. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "list "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def listc(self,
              in_='required',
              retrieval='optional'):

        """
        LISTC
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Character file to be displayed. If IN is a catalogue file, then all files in the catalogue will be 
            
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "listc "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def listdr(self):

        """
        LISTDR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "listdr "


        self.run_command(command)

    def lunicond(self,
                 outmdoel='required'):

        """
        LUNICOND
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------

        outmdoel: Undefined
            The output locally-conditioned model. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "lunicond "


        # Required output error check

        if outmdoel == "required":
            raise ValueError("outmdoel is required.")

        command += " &outmdoel=" + outmdoel 


        self.run_command(command)

    def manova(self,
               in_='required',
               value='required',
               key1='required',
               key2='required',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        MANOVA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file, sorted on required keyfields. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        value: Undefined : Undefined
            Field for analysis of variance. 
            Default=Undefined
            Required=Yes
        key1: Undefined : Undefined
            Keyfield 1 for replicate observations. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=Yes
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "manova "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 


        # Required field error check

        if key2 == "required":
            raise ValueError("key2 is required.")

        command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def mdtran(self,
               in_='required',
               proto='required',
               protorot='optional',
               out='required',
               angle1=0,
               angle2=0,
               angle3=0,
               rotaxis1=3,
               rotaxis2=1,
               rotaxis3=3,
               x0=0,
               y0=0,
               z0=0,
               xr0=0,
               yr0=0,
               zr0=0,
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               factor=1,
               inverse=0,
               print_=0,
               retrieval='optional'):

        """
        MDTRAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model to be rotated. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, 
            ZMORIG, NX, NY, NZ, and IJK. May also contain value fields. It must be sorted by IJK. 
            Required=Yes
        proto: Input
            Prototype model defining output model. Must contain at least the fields XC, YC, ZC, XINC, YINC, 
            XMORIG, YMORIG, ZMORIG, NX, NY, NZ and IJK. May contain cells and subcells. Any fields which are 
            PROTO but not in IN will have their values carried across into OUT. 
            Required=Yes
        protorot: Input
            Optional file containing the rotation and translation parameters stored as the default of 
            fields ANGLE1, ANGLE2, ANGLE3, X0, Y0, Z0, XMORIG, YMORIG, ZMORIG, ROTAXIS1, ROTAXIS2 and 
            Fields XMORIG, YMORIG and ZMORIG correspond to parameters XR0, YR0 and ZR0. The other nine 
            have the same name as the corresponding parameters. If this file is specified and has valid 
            for all twelve fields then the parameter entries for rotation and translation are ignored. 
            file can be created using the Rotated Model option in process PROTOM. Data will then be 
            into the local (rotated) coordinate system of the model. 
            Required=No

        Output Files:
        -------------

        out: Block Model
            Output model. Will have default field values from PROTO for XC, YC, ZC, XINC, YINC, ZINC, 
            YMORIG, ZMORIG, NX, NY, and NZ. Will also contain any value fields from IN and PROTO. It will be 
            by IJK. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        angle1: 
            First rotation angle clockwise in degrees, around axis ROTAXIS1. It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        angle2: 
            Second rotation angle clockwise in degrees, around axis ROTAXIS2. It must lie between 360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        angle3: 
            Third rotation angle clockwise in degrees, around axis ROTAXIS3. It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. (0) 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        rotaxis1: 
            Axis around which first rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (3) 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        rotaxis2: 
            Axis around which second rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (1) 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        rotaxis3: 
            Axis around which third rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. (3) 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        x0: 
            X co-ordinate of known point in both systems, in unrotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        y0: 
            Y co-ordinate of known point in both systems, in unrotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        z0: 
            Z co-ordinate of known point in both systems, in unrotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xr0: 
            X co-ordinate of known point in both systems, in rotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yr0: 
            Y co-ordinate of known point in both systems, in rotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zr0: 
            Z co-ordinate of known point in both systems, in rotated co-ordinate system (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xsubcell: 
            Cell division in X direction in OUT. Only used if PROTO is empty. Default (1), max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Cell division in Y direction in OUT. Only used if PROTO is empty. Default (1), max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            Cell division in Z direction in OUT. Only used if PROTO is empty. Default (1), max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        factor: 
            Co-ordinate scaling factor. Default (1). The rotated co-ordinate system units will be e.g. 
            for a grid in metres on an unrotated grid in feet. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        inverse: 
            Inverse transformation. Default (0). Option Description 0 Rotate from IN through {ANGLE1, 
            to 1 Inverse transformation to above; OUT is in rotated No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            Print flag. Default (0). 0 - minimum output. 1 - details of each subcell in output model. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "mdtran "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if protorot != "optional":
            command += " &protorot=" + protorot 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if angle1 != "optional":
            command += " @angle1=" + str(angle1) 

        if angle2 != "optional":
            command += " @angle2=" + str(angle2) 

        if angle3 != "optional":
            command += " @angle3=" + str(angle3) 

        if rotaxis1 != "optional":
            command += " @rotaxis1=" + str(rotaxis1) 

        if rotaxis2 != "optional":
            command += " @rotaxis2=" + str(rotaxis2) 

        if rotaxis3 != "optional":
            command += " @rotaxis3=" + str(rotaxis3) 

        if x0 != "optional":
            command += " @x0=" + str(x0) 

        if y0 != "optional":
            command += " @y0=" + str(y0) 

        if z0 != "optional":
            command += " @z0=" + str(z0) 

        if xr0 != "optional":
            command += " @xr0=" + str(xr0) 

        if yr0 != "optional":
            command += " @yr0=" + str(yr0) 

        if zr0 != "optional":
            command += " @zr0=" + str(zr0) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if inverse != "optional":
            command += " @inverse=" + str(inverse) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def mgsort(self,
               in_='required',
               out='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               order=1,
               keysfrst=1,
               roworder=1,
               retrieval='optional'):

        """
        MGSORT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be sorted. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Sorted file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for sorting on. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        order: 
            Option Description 1 For ascending order 2 For descending order (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        keysfrst: 
            Option Description 0 output fields in the same order as the input table 1 output key fields first 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        roworder: 
            Option Description 0 Rows which contain duplicate key field values could be in any order 
            1 Rows which contain duplicate key field values will be in the input file order (slower) (1) 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "mgsort "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if order != "optional":
            command += " @order=" + str(order) 

        if keysfrst != "optional":
            command += " @keysfrst=" + str(keysfrst) 

        if roworder != "optional":
            command += " @roworder=" + str(roworder) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def mikscell(self,
                 modelin='required',
                 modelout='required',
                 grade='required',
                 f1 to f10='optional',
                 axis=3,
                 minvol=0,
                 tolernce=0.0001,
                 retrieval='optional'):

        """
        MIKSCELL
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modelin: Input
            Convert Multiple Indicator Kriging (MIK) output created by ESTIMA or INDEST to individual 
            for each grade range. 
            Required=Yes

        Output Files:
        -------------

        modelout: Block Model
            Output model file containing individual subcell for each grade range. 
            Required=Yes

        Fields:
        -------

        grade: Undefined : Undefined
            Grade field in input model containing the MIK grade - that is the grade above a cutoff of zero. 
            Default=Undefined
            Required=Yes
        f1 to f10: Undefined : Undefined
            Grade fields in input model. Will be copied to the output model. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        axis: 
            Axis along which the dimension of the subcell will be proportioned. Along the other two axes the 
            of the subcell will be the size of the parent cell (3): =1 : subcell will have variable length 
            the X axis. Along axes Y and Z it will be the size of the parent cell. =2 : subcell will have variable 
            along the Y axis. Along axes X and Z it will be the size of the parent cell. =3 : subcell will have 
            length along the Z axis. Along axes X and Y it will be the size of the parent cell. 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=Yes
        minvol: 
            The minimum volume of a subcell. If the subcell is less than the minimum it will be combined with 
            subcell with the next lowest grade. If the lowest grade subcell is less than MINVOL it will be 
            with the subcell in thegrade range above 
            Range=nan
            Values=nan
            Default=0
            Required=No
        tolernce: 
            This defines the smallest subcell that will be included in MODELOUT as a proportion of the 
            cell size. The default of 0.0001 means that the subcell size along each axis cannot be less than 
            of the parent cell size. 
            Range=nan
            Values=nan
            Default=0.0001
            Required=No
        """


        command = "mikscell "


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if f1 to f10 != "optional":
            command += " *f1 to f10=" + f1 to f10 


        # Required parameter error check

        if axis == "required":
            raise ValueError("axis is required.")

        command += " @axis=" + str(axis) 

        if minvol != "optional":
            command += " @minvol=" + str(minvol) 

        if tolernce != "optional":
            command += " @tolernce=" + str(tolernce) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def minewd(self,
               in_='required',
               out='required',
               oreval='optional',
               minwid="optional",
               widdir="optional",
               oremin="optional",
               retrieval='optional'):

        """
        MINEWD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file containing the ore blocks of the main reef. This must be a regular model with no 
            
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output additional arcs file for input to LGST. 
            Required=Yes

        Fields:
        -------

        oreval: Undefined : Undefined
            A field in the model file which contains a value which is to be compared with OREMIN. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        minwid: 
            Minimum mining width. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        widdir: 
            North 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        oremin: 
            Minimum value of field OREVAL for a cell to be treated as ore. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "minewd "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if oreval != "optional":
            command += " *oreval=" + oreval 


        # Required parameter error check

        if minwid == "required":
            raise ValueError("minwid is required.")

        command += " @minwid=" + str(minwid) 


        # Required parameter error check

        if widdir == "required":
            raise ValueError("widdir is required.")

        command += " @widdir=" + str(widdir) 

        if oremin != "optional":
            command += " @oremin=" + str(oremin) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def minlay(self,
               proto='optional',
               section='optional',
               icon='optional',
               plot='required',
               sectid="optional",
               nopos=0,
               asize=0,
               scale="optional",
               xorig="optional",
               yorig="optional",
               append=1,
               unit=0,
               coortyp=0,
               loyorig=0,
               loxorig=0,
               lozorig=0,
               retrieval='optional'):

        """
        MINLAY
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype. If an input plot prototype is supplied, then in addition to the normal DATAMINE 
            file fields it must also contain the implicit fields XCENTRE, YCENTRE, ZCENTRE, SAZI and SDIP. 
            default values of these fields, together with the default values of XMIN, XMAX, YMIN and YMAX 
            completely define the position, orientation and size of the viewing plane that will be used in 
            current run of MINLAY. 
            Required=No
        section: Input
            Section definition file. This file will contain the positions, orientations and sizes of a 
            of sections. It must contain the explicit fields SVALUE, XCENTRE, YCENTRE, ZCENTRE, SDIP, 
            HSIZE and VSIZE. It may also optionally contain the field STHICK. 
            Required=No
        icon: Icon file. An icon is a small number of plot file records that describe some feature that is commonly required on mine plans, e.g. mine shafts. This input/output icon file may contain a number of user-defined icons. In addition to the normal DATAMINE plot file fields, the icon file will contain the explicit fields IVALUE, ITEXT, IXSIZE and IYSIZE.
            Icon File 
            Required=No

        Output Files:
        -------------

        plot: Plot File
            Output plot file. This file will contain all of the plot data that has been generated during the 
            operation of MINLAY. In addition to the normal DATAMINE plot file fields, it will also contain 
            implicit fields XCENTRE, YCENTRE, ZCENTRE, SAZI and SDIP, the default values of which will 
            the section orientation and size of plot generated in MINLAY. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        sectid: 
            If no input plot prototype file has been supplied, the section orientation used in the current 
            of MINLAY may be defined by specifying a section identifier, which corresponds to the supplied 
            definition file. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        nopos: 
            The user may want to generate or edit a plot that has no positional meaning, e.g. a flowsheet 
            If this is is the case, this parameter must be set to 1 and the plot will be treated as a plan view 
            plotted millimetres matching X and Y coordinate data. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        asize: 
            Type of A size paper, for initial plot size if no prototype file supplied. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        scale: 
            Initial plot scale factor if no prototype file supplied. E.g. enter 1000 for a scale of 1:1000. 
            that user data units of metres are assumed; if metres are not the unit, then the scale must be 
            by factor f, where f=no. of metres in 1 user data unit [e.g. 0.3048 for feet]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xorig: 
            If no input plot prototype file has been supplied, and this XORIG parameter is left unset, then 
            defined data area will be centred in the plot area in the X axis direction. If an XORIG distance is 
            this will be used for the X positioning of the data area. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yorig: 
            If no input plot prototype file has been supplied, and this YORIG parameter is left unset, then 
            defined data area will be centred in the plot area in the Y axis direction. If a YORIG distance is 
            this will be used for the Y positioning of the data area. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        append: 
            If an input plot prototype file has been supplied, any plot records in this file may 
            copied to the final output plot file, by setting this parameter to 1, or may be omitted by setting 
            0. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        unit: 
            This parameter indicates the type of data that will be brought into the process. The default is 
            (0) and a unit value of 1 indicates user units of imperial feet. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        coortyp: 
            Parameter to be set to 1 for the use of the LO coordinate system, otherwise the conventional rhs 
            used (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        loyorig: 
            Local Y origin to be used for internal coordinate conversion (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        loxorig: 
            Local X origin to be used for internal coordinate conversion (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        lozorig: 
            Local Z origin to be used for internal coordinate conversion (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        """


        command = "minlay "

        if proto != "optional":
            command += " &proto=" + proto 

        if section != "optional":
            command += " &section=" + section 

        if icon != "optional":
            command += " &icon=" + icon 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if sectid != "optional":
            command += " @sectid=" + str(sectid) 

        if nopos != "optional":
            command += " @nopos=" + str(nopos) 

        if asize != "optional":
            command += " @asize=" + str(asize) 

        if scale != "optional":
            command += " @scale=" + str(scale) 

        if xorig != "optional":
            command += " @xorig=" + str(xorig) 

        if yorig != "optional":
            command += " @yorig=" + str(yorig) 

        if append != "optional":
            command += " @append=" + str(append) 

        if unit != "optional":
            command += " @unit=" + str(unit) 

        if coortyp != "optional":
            command += " @coortyp=" + str(coortyp) 

        if loyorig != "optional":
            command += " @loyorig=" + str(loyorig) 

        if loxorig != "optional":
            command += " @loxorig=" + str(loxorig) 

        if lozorig != "optional":
            command += " @lozorig=" + str(lozorig) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def minper(self,
               perimin='required',
               shedres='required',
               stringin='required',
               perimout='required',
               perim='required',
               mine=1,
               retrieval='optional'):

        """
        MINPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file, which must contain the fields XP, YP, ZP, PTN and PVALUE. 
            Required=Yes
        shedres: Input
            Input schedule data file, which must contain at least the fields TONNES, TOTALTON and another 
            whose entries correspond with the PVALUE entries in the PERIMIN file. If this file has been 
            using the PRODSH process, it will contain the fields PNAME, PNUM, SNUM, TONNES, TOTALTON PRATE 
            a number of grade fields. 
            Required=Yes
        stringin: Input
            Input mining string file, which defines the direction of mining. It may contain just one 
            that will be applied to all the perimeters. Alternatively, it may contain a number of strings, 
            define different mining directions for each of the input perimeters. In the latter case, there 
            be match between the PVALUE entries in the PERIMIN and STRINGIN files. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            Output perimeter file, which will contain the perimeters which have been modified according 
            the input schedule data. 
            Required=Yes

        Fields:
        -------

        perim: Undefined : Undefined
            Field name in the input SHEDRES file that corresponds with the PVALUE entries in the input 
            file. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        mine: 
            Flag indicating whether the output perimeter file should contain unmined perimeters, 0, or 
            mined perimters, (1). 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "minper "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required input error check

        if shedres == "required":
            raise ValueError("shedres is required.")

        command += " &shedres=" + shedres 


        # Required input error check

        if stringin == "required":
            raise ValueError("stringin is required.")

        command += " &stringin=" + stringin 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 


        # Required field error check

        if perim == "required":
            raise ValueError("perim is required.")

        command += " *perim=" + perim 

        if mine != "optional":
            command += " @mine=" + str(mine) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def minwid(self,
               in_='required',
               out='required',
               interval='required',
               value='required',
               density='required',
               cutoff=0,
               minore="optional",
               minwaste=0,
               dilute=1,
               narwast1=1,
               narwast2=0,
               dilp=0,
               diln=0,
               dilint=0,
               retrieval='optional'):

        """
        MINWID
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample file, in BHID and FROM order. 
            Required=Yes

        Output Files:
        -------------

        out: Drillhole
            Output file of composites in standard 
            Required=Yes
        interval: Undefined
            Output file of composite interval and dilution types. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Value which is to control compositing. This may be a grade or a calculated equivalent value from 
            of different metals. 
            Default=Undefined
            Required=Yes
        density: Undefined : Undefined
            Density field. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        cutoff: 
            Minimum value of VALUE which is worth mining (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        minore: 
            Minimum mining width for ore. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        minwaste: 
            Minimum width for internal waste (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        dilute: 
            Allow dilution of composites to create minimum ore width if non-zero (1). 
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        narwast1: 
            Test for carrying narrow waste to be applied to either [1] or both [2] adjacent wide ores (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=Yes
        narwast2: 
            Allow narrow waste to be expanded into adjacent wide ore to meet the minimum waste width if 
            (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=Yes
        dilp: 
            Dilution interval added to the ore composite in the down hole direction (0). 
            Range=0,+
            Values=Undefined
            Default=0
            Required=Yes
        diln: 
            Dilution interval added to the ore composite in the up hole direction (0). 
            Range=0,+
            Values=Undefined
            Default=0
            Required=Yes
        dilint: 
            Dilution splitting interval to be used when diluting narrow ore with adjacent waste (0). 
            Range=0,+
            Values=Undefined
            Default=0
            Required=Yes
        """


        command = "minwid "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required output error check

        if interval == "required":
            raise ValueError("interval is required.")

        command += " &interval=" + interval 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if density == "required":
            raise ValueError("density is required.")

        command += " *density=" + density 


        # Required parameter error check

        if cutoff == "required":
            raise ValueError("cutoff is required.")

        command += " @cutoff=" + str(cutoff) 


        # Required parameter error check

        if minore == "required":
            raise ValueError("minore is required.")

        command += " @minore=" + str(minore) 


        # Required parameter error check

        if minwaste == "required":
            raise ValueError("minwaste is required.")

        command += " @minwaste=" + str(minwaste) 


        # Required parameter error check

        if dilute == "required":
            raise ValueError("dilute is required.")

        command += " @dilute=" + str(dilute) 


        # Required parameter error check

        if narwast1 == "required":
            raise ValueError("narwast1 is required.")

        command += " @narwast1=" + str(narwast1) 


        # Required parameter error check

        if narwast2 == "required":
            raise ValueError("narwast2 is required.")

        command += " @narwast2=" + str(narwast2) 


        # Required parameter error check

        if dilp == "required":
            raise ValueError("dilp is required.")

        command += " @dilp=" + str(dilp) 


        # Required parameter error check

        if diln == "required":
            raise ValueError("diln is required.")

        command += " @diln=" + str(diln) 


        # Required parameter error check

        if dilint == "required":
            raise ValueError("dilint is required.")

        command += " @dilint=" + str(dilint) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def minzon(self,
               in_='required',
               zonedef='required',
               rules='required',
               scratch='required',
               thresh='optional',
               out='required',
               reserves='optional',
               priorty1='optional',
               priorty2='optional',
               priorty3='optional',
               priorty4='optional',
               priorty5='optional',
               print1='optional',
               print2='optional',
               print3='optional',
               print4='optional',
               print5='optional',
               sliceno='optional',
               slicewid='optional',
               minadv="optional",
               zxorig="optional",
               zyorig="optional",
               zzorig="optional",
               minwid=0,
               maxwid=0,
               minbht="optional",
               directn=1,
               incrment=1,
               exzone="optional",
               onlyrule=0,
               truevol=0,
               density=1,
               slicefld=1,
               print_=0,
               retrieval='optional'):

        """
        MINZON
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK. May contain cells and sub-cells. 
            Required=Yes
        zonedef: Input
            Zone definition file. Must contain the fields SEQNO, ZONE, FIELD, TEST1, VALUE1, TEST2, and 
            May also contain SUBZONE field. Must be sorted by SEQNO, SUBZONE. 
            Required=Yes
        rules: Input
            Rules file. Must contain the fields TARGET and ADJACENT. 
            Required=Yes
        scratch: Undefined
            Working file. 
            Required=Yes
        thresh: Input
            Threshold file. Must contain the fields ZONE, GRADE and THRESH. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output model. Will contain all fields of IN input model plus ZONE, and optionally SLICENO and 
            
            Required=Yes
        reserves: Undefined
            Output reserves file. Will contain the fields BENCH, ZONE and TONNES. 
            Required=No

        Fields:
        -------

        priorty1: Undefined : Undefined
            First field in model to be used in slice combination. Printed if PRINT=2. 
            Default=Undefined
            Required=No
        priorty2: Undefined : Undefined
            Second field in model to be used in slice combination. Printed if PRINT=2. 
            Default=Undefined
            Required=No
        priorty3: Undefined : Undefined
            Third field in model to be used in slice combination. Printed if PRINT=2. 
            Default=Undefined
            Required=No
        priorty4: Undefined : Undefined
            Fourth field in model to be used in slice combination. Printed if PRINT=2. 
            Default=Undefined
            Required=No
        priorty5: Undefined : Undefined
            Fifth field in model to be used in slice combination. Printed if PRINT=2. 
            Default=Undefined
            Required=No
        print1: Undefined : Undefined
            First field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto maximum of 5 fields. 
            Default=Undefined
            Required=No
        print2: Undefined : Undefined
            Second field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto maximum of 5 fields. 
            Default=Undefined
            Required=No
        print3: Undefined : Undefined
            Third field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto maximum of 5 fields. 
            Default=Undefined
            Required=No
        print4: Undefined : Undefined
            Fourth field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto maximum of 5 fields. 
            Default=Undefined
            Required=No
        print5: Undefined : Undefined
            Fifth field to be printed ( PRINT=2) after any PRIORTY1..5 fields; upto maximum of 5 fields. 
            Default=Undefined
            Required=No
        sliceno: Numeric : OUT
            Field name to hold slice number if SLICEFLD=1. Default is SLICENO. 
            Default=SLICENO
            Required=No
        slicewid: Numeric : OUT
            Field name to hold slice width if SLICEFLD=1. Default is SLICEWID. 
            Default=SLICEWID
            Required=No

        Parameters:
        -----------

        minadv: 
            Mining advance distance. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        zxorig: 
            X co-ordinate of origin for zone modelling. Default is the input model X origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zyorig: 
            Y co-ordinate of origin for zone modelling. Default is the input model Y origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zzorig: 
            Z co-ordinate of origin for zone modelling. Default is the input model Z origin. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        minwid: 
            Minimum mining width, measured perpendicular to the mining advance. Default (0) ensures no 
            mining width is applied. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxwid: 
            Maximum mining width, measured perpendicular to the mining advance. Default (0) ensures no 
            mining width is applied. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        minbht: 
            Mining bench height. Default is the input model parent cell Z dimension. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        directn: 
            Direction of mining advance. Default (1). Option Description 1 Positive X (West to East) 2 
            X (East to West) 3 Positive Y (South to North) 4 Negative Y (North to South) 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        incrment: 
            Increment distance for shrinking. Default (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        exzone: 
            A value of the ZONE field - 4 character alpha - which will be excluded from the output model. Cells 
            sub-cells with this ZONE value will not be written to the OUT file. Must be enclosed in quotes 
            EXZONE='HG'. Default is to write all ZONE values. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        onlyrule: 
            Flag to always combine narrow slices. Default (0). Option Description 0 Slices less than 
            will always be combined with an adjacent slice. 1 Slices less than MINWID will be combined with 
            adjacent slice if one satisfies criteria in RULES file or PRIORTY1-5 fields, only. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        truevol: 
            Volume flag in output model. Default (0). Option Description 0 All slices will have the full 
            of MINADV Color=Green> MINBHT Color=Green>slice thickness. 1 Slices containing missing 
            or subcells will have their Z dimension reduced so that they have the true volume. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        density: 
            Density value to be used in calculations. If a DENSITY field exists in the input model the 
            parameter will be ignored. Default (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        slicefld: 
            Write slice width and number to OUT file. Default (1). 0 - Slice width and number are not written 
            OUT file. 1 - OUT file will contain fields holding slice width and number. Field names are 
            by SLICENO and SLICEWID. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        print: 
            Print flag. Default (0). 0 - minimum output. 1 - summary of tonnes per zone per bench. 2 - details 
            combination of slices including values of first five fields specified as PRIORTY1..5 , 
            
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "minzon "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if zonedef == "required":
            raise ValueError("zonedef is required.")

        command += " &zonedef=" + zonedef 


        # Required input error check

        if rules == "required":
            raise ValueError("rules is required.")

        command += " &rules=" + rules 


        # Required input error check

        if scratch == "required":
            raise ValueError("scratch is required.")

        command += " &scratch=" + scratch 

        if thresh != "optional":
            command += " &thresh=" + thresh 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if reserves != "optional":
            command += " &reserves=" + reserves 

        if priorty1 != "optional":
            command += " *priorty1=" + priorty1 

        if priorty2 != "optional":
            command += " *priorty2=" + priorty2 

        if priorty3 != "optional":
            command += " *priorty3=" + priorty3 

        if priorty4 != "optional":
            command += " *priorty4=" + priorty4 

        if priorty5 != "optional":
            command += " *priorty5=" + priorty5 

        if print1 != "optional":
            command += " *print1=" + print1 

        if print2 != "optional":
            command += " *print2=" + print2 

        if print3 != "optional":
            command += " *print3=" + print3 

        if print4 != "optional":
            command += " *print4=" + print4 

        if print5 != "optional":
            command += " *print5=" + print5 

        if sliceno != "optional":
            command += " *sliceno=" + sliceno 

        if slicewid != "optional":
            command += " *slicewid=" + slicewid 


        # Required parameter error check

        if minadv == "required":
            raise ValueError("minadv is required.")

        command += " @minadv=" + str(minadv) 

        if zxorig != "optional":
            command += " @zxorig=" + str(zxorig) 

        if zyorig != "optional":
            command += " @zyorig=" + str(zyorig) 

        if zzorig != "optional":
            command += " @zzorig=" + str(zzorig) 

        if minwid != "optional":
            command += " @minwid=" + str(minwid) 

        if maxwid != "optional":
            command += " @maxwid=" + str(maxwid) 

        if minbht != "optional":
            command += " @minbht=" + str(minbht) 

        if directn != "optional":
            command += " @directn=" + str(directn) 

        if incrment != "optional":
            command += " @incrment=" + str(incrment) 

        if exzone != "optional":
            command += " @exzone=" + str(exzone) 

        if onlyrule != "optional":
            command += " @onlyrule=" + str(onlyrule) 

        if truevol != "optional":
            command += " @truevol=" + str(truevol) 

        if density != "optional":
            command += " @density=" + str(density) 

        if slicefld != "optional":
            command += " @slicefld=" + str(slicefld) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def mod2blks(self,
                 model='required',
                 retrieval='optional'):

        """
        MOD2BLKS
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Block Model 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "mod2blks "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def mod2xyz(self,
                in1='required',
                in2='required',
                retrieval='optional'):

        """
        MOD2XYZ
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Block Model 
            Required=Yes
        in2: Input
            Undefined 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "mod2xyz "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modconf(self,
                simmod='required',
                conf_tbl='required',
                conf_plt='optional',
                cutint=1,
                cutmax=10,
                pcint=5,
                density=1,
                factor=1,
                plot_tbl=0,
                display=1,
                retrieval='optional'):

        """
        MODCONF
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        simmod: Input
            The simulated model created using the CSMODEL process. 
            Required=Yes

        Output Files:
        -------------

        conf_tbl: Table
            Output table template for 2 model confidence tables. File names are created automatically 
            the template. 
            Required=Yes
        conf_plt: No
            Plot template 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        cutint: 
            Defines the cutoff interval between successive cutoff grades. 
            Range=0.00001,9999999
            Values=Undefined
            Default=1
            Required=No
        cutmax: 
            For regular cutoff grades, this field defines the maximum cutoff grade for percentile tables 
            graphs. All simulations and the Etype estimator must have at least one value above the maximum 
            value. If the selected maximum cutoff does not meet these criteria, then it will be 
            reduced. 
            Range=0.00002,9999999
            Values=Undefined
            Default=10
            Required=No
        pcint: 
            Defines the interval between successive percentiles in the output confidence table 2. 
            Range=2.5,25
            Values='2.5', '5', '10', '20','25'
            Default=5
            Required=No
        density: 
            The density parameter that is used for tonnage calculations. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        factor: 
            Dividing factor applied to Tonnes and Metal values before plotting - used to reduce the amount 
            annotation. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        plot_tbl: 
            Flag to specify whether a plot data table is output for every plot file created. The plot data 
            contains the data used to create the CONF_PLT plot files, and could be used to recreate the plot 
            other software such as Excel. The plot data table name is the same as the plot file, except that 
            is replaced by "_T". 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        display: 
            Flag to display whether the plot files are displayed as the process is run. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "modconf "


        # Required input error check

        if simmod == "required":
            raise ValueError("simmod is required.")

        command += " &simmod=" + simmod 


        # Required output error check

        if conf_tbl == "required":
            raise ValueError("conf_tbl is required.")

        command += " &conf_tbl=" + conf_tbl 

        if conf_plt != "optional":
            command += " &conf_plt=" + conf_plt 

        if cutint != "optional":
            command += " @cutint=" + str(cutint) 

        if cutmax != "optional":
            command += " @cutmax=" + str(cutmax) 

        if pcint != "optional":
            command += " @pcint=" + str(pcint) 

        if density != "optional":
            command += " @density=" + str(density) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if plot_tbl != "optional":
            command += " @plot_tbl=" + str(plot_tbl) 

        if display != "optional":
            command += " @display=" + str(display) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modenv(self,
               in_='required',
               shape='optional',
               exclude='optional',
               out='optional',
               envmodel='optional',
               results='optional',
               value='optional',
               grade='required',
               shapzone='optional',
               envbest='optional',
               envelope='optional',
               envnum='optional',
               hdgrade='optional',
               mined='optional',
               density='optional',
               cutoff=0,
               hdgrade=0,
               defgrade=0,
               defvalue=0,
               density=1,
               maxwaste=1,
               maxore=0,
               pdwvalue=0,
               pdwgrade=0,
               pdwaste=0,
               optwaste=0,
               optimise=2,
               dilute=1,
               envtype=1,
               envnum=1,
               inmodel=0,
               shapemth=0,
               pdwonly=0,
               mmuincx=1,
               mmuincy=1,
               mmuincz=1,
               mmusizex=0,
               mmusizey=0,
               mmusizez=0,
               pdwsizex=0,
               pdwsizey=0,
               pdwsizez=0,
               mmuslopn=0,
               mmuslops=0,
               mmuslope=0,
               mmuslopw=0,
               mmuslopi=0,
               mmuminx="optional",
               mmuminy="optional",
               mmuminz="optional",
               mmumaxx="optional",
               mmumaxy="optional",
               mmumaxz="optional",
               mmumaxz="optional",
               mmumaxz="optional",
               mmumaxz="optional",
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               envout=1,
               xoverlap=2,
               calcenv=1,
               progress="optional",
               info=2,
               retrieval='optional'):

        """
        MODENV
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file for evaluation. This must have the fields XMORIG, YMORIG, ZMORIG, NX, NY, NZ 
            and IJK, XC, YC and ZC (explicit). XINC, YINC and ZINC must exist as either explicit (sub-cells 
            or implicit (no sub-cells). There must also be at least one explicit numeric data field, to be 
            as *VALUE or *GRADE. The records may be in any order, but speed is increased if they are in IJK 
            If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, ANGLE2, ANGLE3, 
            ROTAXIS2, and ROTAXIS3. 
            Required=Yes
        shape: Input
            Input envelope shape template file to define one or more envelope shapes, or the orientation of 
            default envelope shape. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK and optionally *ZONE. If the envelope orientation is not parallel to the input 
            then this model file must be a Rotated Model that include the fields X0, Y0, Z0, ANGLE1, ANGLE2, 
            ROTAXIS1, ROTAXIS2, and ROTAXIS3. 
            Required=No
        exclude: Input
            Optional input file to supply those values of one field in the input model that define an area for 
            from the envelope. A maximum of 50 values is allowed. The field name in this file should be the 
            as a field in the input model file. 
            Required=No

        Output Files:
        -------------

        out: Block Model
            Output model file with the additional field *MINED. May be the same as &IN if no new fields are 
            
            Required=No
        envmodel: Block Model
            Output model with the envelope grade distribution, where the envelope mimimum mining unit 
            defines the cell size. The file is a standard model file with the fields *VALUE, *GRADE, 
            *DENSITY, *ENVELOPE and *SHAPZONE if specified. The value in the *ENVBEST field depends on the 
            of @OPTIMISE: - if @OPTIMISE=1 (maximise ore tonnes) then the value in the field is ore tonnes. - 
            @OPTIMISE=2 (maximise grade) then the value in the field is grade. - if @OPTIMISE=3 (maximise 
            then the value in the field is metal content. - if @OPTIMISE=4 (maximise dollars) then the value 
            the field is dollars. 
            Required=No
        results: Undefined
            Output results file to report statistics for each envelope, with fields *ENVNUM, *ENVELOPE, 
            (if specified), *VALUE, *GRADE, VOLUME, TONNES, MINX, MAXX, MINY, MAXY, MINZ, MAXZ, COGX, 
            COGZ. *ENVELOPE and *SHAPZONE fields are reported individually and in total. 
            Required=No

        Fields:
        -------

        value: Undefined : Undefined
            Numeric (explicit) field for the value of input model blocks. 
            Default=Undefined
            Required=No
        grade: Undefined : Undefined
            Numeric (explicit) field for the grade of input model blocks. 
            Default=Undefined
            Required=Yes
        shapzone: Undefined : Undefined
            Field in the input model and envelope shape template file when different envelope shapes are 
            in different mining areas. 
            Default=Undefined
            Required=No
        envbest: Undefined : Undefined
            Numeric (explicit) field for the best envelope grade or value in the &ENVMODEL file. 
            Default=ENVBEST
            Required=No
        envelope: Undefined : Undefined
            Alphanumeric (explicit) field for the cell type in the &ENVMODEL file. The default name 
            is used if none is supplied. 
            Default=ENVELOPE
            Required=No
        envnum: Undefined : Undefined
            Numeric (explicit) field for the envelope number in the &ENVMODEL and &RESULTS files. The 
            name ENVNUM is used if none is supplied. 
            Default=ENVNUM
            Required=No
        hdgrade: Undefined : Undefined
            Optional field for the head grade of envelopes in which the block participates. The envelope 
            grade must be greater than the head grade value supplied from any participating block. Absent 
            are ignored. 
            Default=Undefined
            Required=No
        mined: Undefined : Undefined
            Proportion of block within the envelope 
            Default=Undefined
            Required=No
        density: Numeric : IN
            Optional density field in the input model for average grade and tonnage calculations. 
            Default=DENSITY
            Required=No

        Parameters:
        -----------

        cutoff: 
            Cutoff grade to be applied to input model blocks. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        hdgrade: 
            Required head grade for economic envelopes. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        defgrade: 
            Default grade for envelope volume not modelled with blocks, or blocks with an absent grade or 
            
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        defvalue: 
            Default value for envelope volume not modelled with blocks, or blocks with an absent grade or 
            This parameter is expressed as value per unit volume. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        density: 
            Density value where a density field is not supplied, the value is absent, or the envelope volume 
            not modelled with blocks. If set to zero then absent blocks are assumed to be air. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        maxwaste: 
            Maximum waste material in an envelope, expressed as a volume fraction, for an envelope 
            to be accepted as an alternative in the optimal selection. The default (1.0) allows any 
            of waste provided the head grade target is met. The value cannot be lower than the @PDWASTE 
            
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        maxore: 
            Maximum ore material in a pre-defined waste shape, expressed as a volume fraction. 
            Range=0,1
            Values=0,1
            Default=0
            Required=Yes
        pdwvalue: 
            Maximum value for a pre-defined waste shape. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        pdwgrade: 
            Maximum grade for a pre-defined waste shape. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        pdwaste: 
            Maximum pre-defined waste material in an envelope, expressed as a volume fraction, for an 
            evaluation to be accepted as an alternative in the optimal selection. The default value of 0 
            no pre-defined waste, and a value between 0 and 1 allows pre-defined waste to be taken as a last 
            to extract otherwise economic ore. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        optwaste: 
            Post-process remnant waste "internal" to the envelope that is not flagged as pre-defined 
            or already included in a mining envelope to evaluate if the waste can be in one, some, or all 
            envelopes. The proportion is specified as a fraction, and will only be processed for a non-zero 
            those blocks that are outside the minimum envelope but included in the maximum envelope are 
            value of zero would generate the maximum envelope. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        optimise: 
            Method for selecting optimal envelope position where alternate positions are available to be 
            1 - Maximize ore tonnes ie minimize [below cutoff] waste. 2 - Maximize grade 3 - Maximize 
            metal 4 - Maximize accumulated value ie for dollar value. 
            Range=1,4
            Values=1,2,3,4
            Default=2
            Required=Yes
        dilute: 
            Include waste with ore in envelope grade calculations, and *ENVBEST output: 0 - Ore only 1 - Ore 
            waste 
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        envtype: 
            Report the minimum or maximum envelope in the results file for sequencing.Both minimum and 
            envelopes are generated in the optimiser.0 - maximum envelope 1 - minimum envelope 
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        envnum: 
            Apply a unique numbering scheme to the envelopes. Having unique numbers can slow down 
            by [very] approximately 20%. 0 - apply the same number to all envelopes 1 - Make envelope numbers 
            
            Range=0,1
            Values=0,1
            Default=1
            Required=Yes
        inmodel: 
            Constrain envelopes to the volume of the input model occupied by blocks: 0 - unconstrained 1 - 
            volume to be completely occupied by blocks in the input model. 
            Range=0,1
            Values=0,1
            Default=0
            Required=Yes
        shapemth: 
            Method for selection from alternative envelope shapes when zones are specified: 0 - envelope 
            matching block zone 1 - envelope shape with minimum zone dilution 2 - envelope shape with best 
            irrespective of zone combination 
            Range=0,2
            Values=0,2
            Default=0
            Required=Yes
        pdwonly: 
            Flag to specify whether the current run should create both predefined waste and mining 
            or only the pre-defined waste envelope: 0 - both pre-defined waste and mining envelopes 1 - 
            waste envelope only 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        mmuincx: 
            Number of envelope increments within the minimum envelope dimension in X coordinate. 
            Range=1,+
            Values=Undefined
            Default=1
            Required=Yes
        mmuincy: 
            Number of envelope increments within the minimum envelope dimension in Y coordinate. 
            Range=1,+
            Values=Undefined
            Default=1
            Required=Yes
        mmuincz: 
            Number of envelope increments within the minimum envelope dimension in Z coordinate. 
            Range=1,+
            Values=Undefined
            Default=1
            Required=Yes
        mmusizex: 
            Minimum envelope dimension in the horizontal X coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        mmusizey: 
            Minimum envelope dimension in the horizontal Y coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        mmusizez: 
            Minimum envelope dimension in the vertical Z coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        pdwsizex: 
            Minimum pre-defined waste shape dimension in the horizontal X coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        pdwsizey: 
            Minimum pre-defined waste shape dimension in the horizontal Y coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        pdwsizez: 
            Minimum pre-defined waste shape dimension in the vertical Z coordinate. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=Yes
        mmuslopn: 
            Envelope slope factor 1:n in the northerly direction, positive outwards 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mmuslops: 
            Envelope slope factor 1:n in the southerly direction, positive outwards 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mmuslope: 
            Envelope slope factor 1:n in the easterly direction, positive outwards 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mmuslopw: 
            Envelope slope factor 1:n in the westerly direction, positive outwards 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mmuslopi: 
            Specifies if the slope factors are to be interpolated between orthogonal directions 0 - 
            horizontal shape 1 - elliptical horizontal shape 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mmuminx: 
            Minimum X coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmuminy: 
            Minimum Y coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmuminz: 
            Minimum Z coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxx: 
            Maximum X coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxy: 
            Maximum Y coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxz: 
            Maximum Z coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxz: 
            Maximum Z coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxz: 
            Maximum Z coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        mmumaxz: 
            Maximum Z coordinate for envelope volume. This is not required if an envelope shape template 
            &SHAPE is defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xsubcell: 
            Number of subcells per parent cell in X direction 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Number of subcells per parent cell in Y direction 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            Number of subcells per parent cell in Z direction 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        envout: 
            Flag to control which ENVELOPE types are included in the output envelope file &ENVMODEL: 
            Description 0 Include all values of the field ENVELOPE 1 Include all values of the field 
            except UND 2 Include all values of the field ENVELOPE except UND, MOD. EXC 3 Include all values of 
            field ENVELOPE except UND, MOD, EXC, PDW 4 Include all values of the field ENVELOPE except UND, 
            EXC, PDW, MAX-UND, MAX-MOD, MAX-PDW 
            Range=0,4
            Values=0,1,2,3,4
            Default=1
            Required=No
        xoverlap: 
            Overlap in X between successive slices, defined as the number of MMUs in X. ie in length units the 
            is @XOVERLAP * @MMUSIZEX : Option Description 1 - overlap of 1 MMU widths in X 2 - overlap of 2 MMU 
            in X 
            Range=1,2
            Values=1,2
            Default=2
            Required=No
        calcenv: 
            Flag to select either a test run to report slicing and memory statistics or a full run to 
            the mineable envelopes: Option Description 0 - test run; do not calculate mineable envelopes 1 
            full run; calculate mineable envelopes 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        progress: 
            5000 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        info: 
            Flag to control the level of information displayed to the Output Window during processing: 
            Description 1 Minimum level of output 2 Intermediate level of output 3 Maximum level of output 
            Range=1,3
            Values=1,2,3
            Default=2
            Required=No
        """


        command = "modenv "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if shape != "optional":
            command += " &shape=" + shape 

        if exclude != "optional":
            command += " &exclude=" + exclude 

        if out != "optional":
            command += " &out=" + out 

        if envmodel != "optional":
            command += " &envmodel=" + envmodel 

        if results != "optional":
            command += " &results=" + results 

        if value != "optional":
            command += " *value=" + value 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if shapzone != "optional":
            command += " *shapzone=" + shapzone 

        if envbest != "optional":
            command += " *envbest=" + envbest 

        if envelope != "optional":
            command += " *envelope=" + envelope 

        if envnum != "optional":
            command += " *envnum=" + envnum 

        if hdgrade != "optional":
            command += " *hdgrade=" + hdgrade 

        if mined != "optional":
            command += " *mined=" + mined 

        if density != "optional":
            command += " *density=" + density 


        # Required parameter error check

        if cutoff == "required":
            raise ValueError("cutoff is required.")

        command += " @cutoff=" + str(cutoff) 


        # Required parameter error check

        if hdgrade == "required":
            raise ValueError("hdgrade is required.")

        command += " @hdgrade=" + str(hdgrade) 

        if defgrade != "optional":
            command += " @defgrade=" + str(defgrade) 

        if defvalue != "optional":
            command += " @defvalue=" + str(defvalue) 

        if density != "optional":
            command += " @density=" + str(density) 


        # Required parameter error check

        if maxwaste == "required":
            raise ValueError("maxwaste is required.")

        command += " @maxwaste=" + str(maxwaste) 


        # Required parameter error check

        if maxore == "required":
            raise ValueError("maxore is required.")

        command += " @maxore=" + str(maxore) 


        # Required parameter error check

        if pdwvalue == "required":
            raise ValueError("pdwvalue is required.")

        command += " @pdwvalue=" + str(pdwvalue) 


        # Required parameter error check

        if pdwgrade == "required":
            raise ValueError("pdwgrade is required.")

        command += " @pdwgrade=" + str(pdwgrade) 

        if pdwaste != "optional":
            command += " @pdwaste=" + str(pdwaste) 

        if optwaste != "optional":
            command += " @optwaste=" + str(optwaste) 


        # Required parameter error check

        if optimise == "required":
            raise ValueError("optimise is required.")

        command += " @optimise=" + str(optimise) 


        # Required parameter error check

        if dilute == "required":
            raise ValueError("dilute is required.")

        command += " @dilute=" + str(dilute) 


        # Required parameter error check

        if envtype == "required":
            raise ValueError("envtype is required.")

        command += " @envtype=" + str(envtype) 


        # Required parameter error check

        if envnum == "required":
            raise ValueError("envnum is required.")

        command += " @envnum=" + str(envnum) 


        # Required parameter error check

        if inmodel == "required":
            raise ValueError("inmodel is required.")

        command += " @inmodel=" + str(inmodel) 


        # Required parameter error check

        if shapemth == "required":
            raise ValueError("shapemth is required.")

        command += " @shapemth=" + str(shapemth) 

        if pdwonly != "optional":
            command += " @pdwonly=" + str(pdwonly) 


        # Required parameter error check

        if mmuincx == "required":
            raise ValueError("mmuincx is required.")

        command += " @mmuincx=" + str(mmuincx) 


        # Required parameter error check

        if mmuincy == "required":
            raise ValueError("mmuincy is required.")

        command += " @mmuincy=" + str(mmuincy) 


        # Required parameter error check

        if mmuincz == "required":
            raise ValueError("mmuincz is required.")

        command += " @mmuincz=" + str(mmuincz) 


        # Required parameter error check

        if mmusizex == "required":
            raise ValueError("mmusizex is required.")

        command += " @mmusizex=" + str(mmusizex) 


        # Required parameter error check

        if mmusizey == "required":
            raise ValueError("mmusizey is required.")

        command += " @mmusizey=" + str(mmusizey) 


        # Required parameter error check

        if mmusizez == "required":
            raise ValueError("mmusizez is required.")

        command += " @mmusizez=" + str(mmusizez) 


        # Required parameter error check

        if pdwsizex == "required":
            raise ValueError("pdwsizex is required.")

        command += " @pdwsizex=" + str(pdwsizex) 


        # Required parameter error check

        if pdwsizey == "required":
            raise ValueError("pdwsizey is required.")

        command += " @pdwsizey=" + str(pdwsizey) 


        # Required parameter error check

        if pdwsizez == "required":
            raise ValueError("pdwsizez is required.")

        command += " @pdwsizez=" + str(pdwsizez) 

        if mmuslopn != "optional":
            command += " @mmuslopn=" + str(mmuslopn) 

        if mmuslops != "optional":
            command += " @mmuslops=" + str(mmuslops) 

        if mmuslope != "optional":
            command += " @mmuslope=" + str(mmuslope) 

        if mmuslopw != "optional":
            command += " @mmuslopw=" + str(mmuslopw) 

        if mmuslopi != "optional":
            command += " @mmuslopi=" + str(mmuslopi) 

        if mmuminx != "optional":
            command += " @mmuminx=" + str(mmuminx) 

        if mmuminy != "optional":
            command += " @mmuminy=" + str(mmuminy) 

        if mmuminz != "optional":
            command += " @mmuminz=" + str(mmuminz) 

        if mmumaxx != "optional":
            command += " @mmumaxx=" + str(mmumaxx) 

        if mmumaxy != "optional":
            command += " @mmumaxy=" + str(mmumaxy) 

        if mmumaxz != "optional":
            command += " @mmumaxz=" + str(mmumaxz) 

        if mmumaxz != "optional":
            command += " @mmumaxz=" + str(mmumaxz) 

        if mmumaxz != "optional":
            command += " @mmumaxz=" + str(mmumaxz) 

        if mmumaxz != "optional":
            command += " @mmumaxz=" + str(mmumaxz) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if envout != "optional":
            command += " @envout=" + str(envout) 

        if xoverlap != "optional":
            command += " @xoverlap=" + str(xoverlap) 

        if calcenv != "optional":
            command += " @calcenv=" + str(calcenv) 

        if progress != "optional":
            command += " @progress=" + str(progress) 

        if info != "optional":
            command += " @info=" + str(info) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modres(self,
               in_='required',
               perimin='optional',
               results='required',
               out='optional',
               density=1,
               zvalue=0,
               pairs=0,
               fullcell=0,
               print_=0,
               retrieval='optional'):

        """
        MODRES
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Model file for evaluation. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, 
            YMORIG, ZMORIG, NX, NY, NZ, IJK. 
            Required=Yes
        perimin: Input
            Optional input perimeter file. Must contain at least the fields XP, YP, ZP, PTN, PVALUE. The 
            field contains the bench number as the integer part: e.g. 3.0 for first perim on bench 3, 3.1 for 
            etc. If the PAIRS option is set, then the ZP value must contain the bench bottom elevation in one 
            then the bench top in the next. All points for one perimeter must be together. Perimeters must be 
            unclosed. 
            Required=No

        Output Files:
        -------------

        results: Undefined
            The output results file, in a format suitable for input into the TABRES process. 
            Required=Yes
        out: Block Model
            Optional output model file. This may be the same as the input, if the MINED field exists in the 
            file. The MINED field will be created in the output file if it does not exist. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        density: 
            Set required density value. This will only be used if there is no DENSITY field in the input 
            If there is no DENSITY field, and no DENSITY parameter, then a value of 1.0 is used. 
            Range=0.000001,+
            Values=Undefined
            Default=1
            Required=Yes
        zvalue: 
            Option Description 1 ; for single perimeters at bench centres, take the Z value from the ZP field 
            of using the level number in the PVALUE field. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        pairs: 
            Option Description 1 ; Use pairs of perimeters to define bench bottoms and tops, as defined by ZP 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        fullcell: 
            Option Description 1 ; whole cell evaluation in place of partial cell evaluation. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            Option Description 1 ; Show a line for each cell evaluated in each perimeter. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "modres "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 

        if out != "optional":
            command += " &out=" + out 


        # Required parameter error check

        if density == "required":
            raise ValueError("density is required.")

        command += " @density=" + str(density) 

        if zvalue != "optional":
            command += " @zvalue=" + str(zvalue) 

        if pairs != "optional":
            command += " @pairs=" + str(pairs) 

        if fullcell != "optional":
            command += " @fullcell=" + str(fullcell) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modsplit(self,
                 modelin='required',
                 wiretr='required',
                 wirept='required',
                 modelout='required',
                 fullmod='required',
                 zone='optional',
                 addf1 to addf9='optional',
                 modltype=1,
                 zone="optional",
                 maxdip=0,
                 splits=3,
                 plane=XY,
                 xsubcell=1,
                 ysubcell=1,
                 zsubcell=1,
                 resol=0,
                 retrieval='optional'):

        """
        MODSPLIT
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modelin: Input
            Input model file. 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file used to split the model cells. 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes

        Output Files:
        -------------

        modelout: Block Model
            Output model file to be created that contains only cells constrained (and split) by the input 
            Which cells are written to this model depends on the @MODLTYPE parameter. 
            Required=Yes
        fullmod: Block Model
            Output full model file to be created. This model covers the same volume as the input model but it 
            split cells where the original cells intersect the input wireframes. Cells constrained by the 
            are flagged with a ZONE value depending on field value of *ZONE and the parameter @ZONE. 
            Required=Yes

        Fields:
        -------

        zone: Undefined : Undefined
            Name of zone field, if any, in input wireframe with multiple zones. If the field is specified 
            it is created in the output model file with the corresponding zone value as defined by the 
            The field can be either numeric or 4 character alpha. If not specified and a field ZONE exists in 
            then it will automatically be used. 
            Default=Undefined
            Required=No
        addf1 to addf9: Undefined : Undefined
            Field(s) to be treated as additive(s) 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        modltype: 
            Type of wireframe model to be filled; one of the following options, with default of (1) :- =1 : 
            3d, interior to be filled with cells. =2 : solid 3d, exterior to be filled with cells. =3 : 
            cells to be filled below (for XY), to south (for XZ), or to west (for YZ). =4 : surface, cells to be 
            above (for XY), to north (for XZ), or to east (for YZ). =5 : fill between two surfaces with cells.. 
            : two surfaces, cells to be filled above upper surface and below lower surface. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=1
            Required=Yes
        zone: 
            Zone code to be inserted into output model ZONE field if field does not exist in input wireframe 
            
            Range=nan
            Values=Undefined
            Default=Undefined
            Required=No
        maxdip: 
            Reference gradient used to calculate the degree of cell splitting as described in the Full 
            (0). 
            Range=nan
            Values=nan
            Default=0
            Required=No
        splits: 
            Maximum amount of splitting to be allowed (3). =0 : no splitting: parent cell. =1 : 1 split: 2 x 2 
            =2 : 2 splits: 4 x 4 subcells. =3 : 3 splits: 8 x 8 subcells. 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        plane: 
            Optional alpha parameter defining orientation 'XY', 'XZ', or 'YZ', of plane in which subcell 
            is to be performed. Care must be taken in selection of the plane to be used if the ends of the 
            have not been linked, as the wireframe model is then partially 'hollow' when viewed from 
            directions. 
            Range=nan
            Values=XY, XZ, YZ
            Default=XY
            Required=No
        xsubcell: 
            Number of subcells in X direction (1). Max 100. Only used if SPLITS=0. 
            Range=nan
            Values=nan
            Default=1
            Required=No
        ysubcell: 
            Number of subcells in Y direction (1). Max 100. Only used if SPLITS=0. 
            Range=nan
            Values=nan
            Default=1
            Required=No
        zsubcell: 
            Number of subcells in Z direction (1). Max 100. Only used if SPLITS=0. 
            Range=nan
            Values=nan
            Default=1
            Required=No
        resol: 
            Defines boundary resolution in direction perpendicular to plane of filling. =0 : precise 
            location. =N : boundary rounded to nearest 1/Nth of parent cell size. 
            Range=nan
            Values=0,N
            Default=0
            Required=No
        """


        command = "modsplit "


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 


        # Required output error check

        if fullmod == "required":
            raise ValueError("fullmod is required.")

        command += " &fullmod=" + fullmod 

        if zone != "optional":
            command += " *zone=" + zone 

        if addf1 to addf9 != "optional":
            command += " *addf1 to addf9=" + addf1 to addf9 


        # Required parameter error check

        if modltype == "required":
            raise ValueError("modltype is required.")

        command += " @modltype=" + str(modltype) 

        if zone != "optional":
            command += " @zone=" + str(zone) 

        if maxdip != "optional":
            command += " @maxdip=" + str(maxdip) 

        if splits != "optional":
            command += " @splits=" + str(splits) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if resol != "optional":
            command += " @resol=" + str(resol) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modtra(self,
               model='required',
               grid='optional',
               out='required',
               f1='required',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               xg='optional',
               yg='optional',
               zg='optional',
               plane=1,
               xorig="optional",
               yorig="optional",
               zorig="optional",
               xspace="optional",
               yspace="optional",
               zspace="optional",
               numx="optional",
               numy="optional",
               numz="optional",
               miss="optional",
               print_="optional",
               retrieval='optional'):

        """
        MODTRA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Input model. Must contain the 13 standard model fields - XC, YC, ZC, XINC, YINC, ZINC, XMORIG, 
            ZMORIG, NX, NY, NZ, IJK - plus at least one other field. 
            Required=Yes
        grid: Input
            Optional input grid file defining the location of the simulated drillholes. It must contain 
            fields XG , YG , ZG, regardless of the PLANE parameter setting. This file must NOT include an 
            BHID field, as this would clash with the numeric BHID field created in OUT. 
            Required=No

        Output Files:
        -------------

        out: Drillhole File
            Output holes file. Will contain the fields BHID, FROM, TO, X, Y, Z, LENGTH, A0, B0 plus all fields 
            input model file except the 13 standard model fields. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            1st field over which continuity is required within a sample. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            2nd field over which continuity is required within a sample. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            3rd field over which continuity is required within a sample. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            4th field over which continuity is required within a sample. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            5th field over which continuity is required within a sample. 
            Default=Undefined
            Required=No
        xg: Numeric : GRID
            Optional GRID field name holding X co-ordinate. Default is XG. Ignored if PLANE=3. 
            Default=XG
            Required=No
        yg: Numeric : GRID
            Optional GRID field name holding Y co-ordinate. Default is YG. Ignored if PLANE=2. 
            Default=YG
            Required=No
        zg: Numeric : GRID
            Optional GRID field name holding Z co-ordinate. Default is ZG. Ignored if PLANE=1. 
            Default=ZG
            Required=No

        Parameters:
        -----------

        plane: 
            Drillhole orientation. Default (1). Option Description 1 - XY. A grid of vertical holes is 
            2 - XZ. A grid of horizontal holes is created, running from North to South. 3 - YZ. A grid of 
            holes is created, running from East to West. 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        xorig: 
            X co-ordinate of collar of first drillhole. Default is model X origin plus half a parent cell X 
            Ignored if PLANE=3 or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yorig: 
            Y co-ordinate of collar of first drillhole. Default is model Y origin plus half a parent cell Y 
            Ignored if PLANE=2 or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zorig: 
            Z co-ordinate of collar of first drillhole. Default is model Z origin plus half a parent cell Z 
            Ignored if PLANE=1 or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xspace: 
            Spacing in X between drillholes. Default is the parent cell X dimension. Ignored if PLANE=3 or 
            specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yspace: 
            Spacing in Y between drillholes. Default is the parent cell Y dimension. Ignored if PLANE=2 or 
            specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zspace: 
            Spacing in Z between drillholes. Default is the parent cell Z dimension. Ignored if PLANE=1 or 
            specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        numx: 
            Number of drillholes in X direction. Default is the number up to the model X limit. Ignored if 
            or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        numy: 
            Number of drillholes in Y direction. Default is the number up to the model Y limit. Ignored if 
            or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        numz: 
            Number of drillholes in Z direction. Default is the number up to the model Z limit. Ignored if 
            or GRID specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        miss: 
            Missing cells treatment. Default is (0) Option Description 0 Where no model cell or subcell 
            no drillhole sample will be created. 1 Where no model cell or subcell exists, drillhole sample 
            be created with missing values. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        print: 
            Print flag. Default (0). 0 - minimum output. 1 - summary of percentage complete and number of 
            written. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "modtra "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if grid != "optional":
            command += " &grid=" + grid 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if xg != "optional":
            command += " *xg=" + xg 

        if yg != "optional":
            command += " *yg=" + yg 

        if zg != "optional":
            command += " *zg=" + zg 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if xorig != "optional":
            command += " @xorig=" + str(xorig) 

        if yorig != "optional":
            command += " @yorig=" + str(yorig) 

        if zorig != "optional":
            command += " @zorig=" + str(zorig) 

        if xspace != "optional":
            command += " @xspace=" + str(xspace) 

        if yspace != "optional":
            command += " @yspace=" + str(yspace) 

        if zspace != "optional":
            command += " @zspace=" + str(zspace) 

        if numx != "optional":
            command += " @numx=" + str(numx) 

        if numy != "optional":
            command += " @numy=" + str(numy) 

        if numz != "optional":
            command += " @numz=" + str(numz) 

        if miss != "optional":
            command += " @miss=" + str(miss) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def modtri(self,
               in_='required',
               wiretr='required',
               wirept='required',
               origin=0,
               pttol=0,
               retrieval='optional'):

        """
        MODTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, and IJK. If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, 
            ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3. 
            Required=Yes

        Output Files:
        -------------

        wiretr: Wireframe Triangle
            Output wireframe triangle file. 
            Required=Yes
        wirept: Wireframe Points
            Output wireframe point file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        origin: 
            Origin coordinates. Values are: 0 - retain original coordinates. 1 - use coordinates relative 
            the model origin. 2 - use the central coordinates of model cells as the new origin 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        pttol: 
            Check for duplicates in output wireframe coordinates 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "modtri "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required output error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if origin != "optional":
            command += " @origin=" + str(origin) 

        if pttol != "optional":
            command += " @pttol=" + str(pttol) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def monaco(self):

        """
        MONACO
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "monaco "


        self.run_command(command)

    def nscore(self,
               in_='required',
               refdist='optional',
               out='required',
               trandist='optional',
               stat_tbl='optional',
               grade='required',
               dcwgt='optional',
               refgrade='optional',
               refwgt='optional',
               mingrade=0,
               maxgrade="optional",
               retrieval='optional'):

        """
        NSCORE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data file. This must include the grade field GRADE and may also include the 
            weight field DCWGT . 
            Required=Yes
        refdist: Input
            Optional input reference distribution to define required transformation.The file must 
            the field REFGRADE , to define the distribution, and may also include the field REFWGT to define 
            weights. 
            Required=No

        Output Files:
        -------------

        out: Block Model
            Output file containing transformed points. This contains the same data as the IN file, but with 
            added transformed data field NSCORE. 
            Required=Yes
        trandist: Table
            Output file for the transformation table.This will contain the grade field GRADE from the IN 
            file and the field TRANDATA giving the transformed value.The file will be sorted by GRADE . 
            Required=No
        stat_tbl: Table
            Output statistics table. This provides statistics for both the input, untransformed, sample 
            as well as the output, transformed, values. 
            Required=No

        Fields:
        -------

        grade: Undefined : Undefined
            Field in the input sample file IN defining the grade to be transformed. 
            Default=Undefined
            Required=Yes
        dcwgt: Undefined : Undefined
            Optional declustering weights field in the IN file. 
            Default=Undefined
            Required=No
        refgrade: Undefined : Undefined
            Reference grade field, defining the reference distribution in the REFDIST file. 
            Default=Undefined
            Required=No
        refwgt: Undefined : Undefined
            Optional reference weight field, defining declustering weights in the REFDIST file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        mingrade: 
            Minimum GRADE value input from the IN sample file. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxgrade: 
            Maximum GRADE value input from the IN sample file. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "nscore "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if refdist != "optional":
            command += " &refdist=" + refdist 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if trandist != "optional":
            command += " &trandist=" + trandist 

        if stat_tbl != "optional":
            command += " &stat_tbl=" + stat_tbl 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if dcwgt != "optional":
            command += " *dcwgt=" + dcwgt 

        if refgrade != "optional":
            command += " *refgrade=" + refgrade 

        if refwgt != "optional":
            command += " *refwgt=" + refwgt 

        if mingrade != "optional":
            command += " @mingrade=" + str(mingrade) 

        if maxgrade != "optional":
            command += " @maxgrade=" + str(maxgrade) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def origin(self,
               in_='required',
               out='optional',
               wiretr='optional',
               wirept='optional',
               x='required',
               y='required',
               z='required',
               angle1=0,
               angle2=0,
               angle3=0,
               rotaxis1=3,
               rotaxis2=1,
               rotaxis3=3,
               margin=10,
               xinc=10,
               yinc=10,
               zinc=10,
               print_=0,
               retrieval='optional'):

        """
        ORIGIN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file of data covering the volume to be modelled. The data may be a wireframe points file, a 
            file or any file with X, Y and Z fields covering the model volume. 
            Required=Yes

        Output Files:
        -------------

        out: Block Model Prototype File
            Optional output rotated model prototype file. 
            Required=No
        wiretr: Wireframe Triangle File
            Optional output wireframe triangle file. The wireframe will be created to enclose the limits 
            the rotated model. 
            Required=No
        wirept: Wireframe Points File.
            Optional output wireframe points file. The wireframe will be created to enclose the limits of 
            rotated model. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate field in IN file. 
            Default=XP
            Required=Yes
        y: Numeric : IN
            Y coordinate field in IN file. 
            Default=YP
            Required=Yes
        z: Numeric : IN
            Z coordinate field in IN file. 
            Default=ZP
            Required=Yes

        Parameters:
        -----------

        angle1: 
            First rotation angle clockwise in degrees, around axis ROTAXIS1 . It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=Yes
        angle2: 
            Second rotation angle clockwise in degrees, around axis ROTAXIS2 . It must lie between 360.0 
            +360.0. A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        angle3: 
            Third rotation angle clockwise in degrees, around axis ROTAXIS3 . It must lie between -360.0 
            +360.0. A value of zero indicates no rotation. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        rotaxis1: 
            Axis around which first rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        rotaxis2: 
            Axis around which second rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        rotaxis3: 
            Axis around which third rotation angle will occur. 0 for no rotation, 1 for X axis, 2 for Y axis, 3 
            Z axis. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        margin: 
            The margin, in units used in the IN file, to be created around the data volume described by the IN 
            
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        xinc: 
            Parent cell size in X to be created in the output prototype model. This is only required if an OUT 
            has been specified. 
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        yinc: 
            Parent cell size in Y to be created in the output prototype model. This is only required if an OUT 
            has been specified. 
            Range=Undefined
            Values=Undefined
            Default=10
            Required=No
        zinc: 
            Parent cell size in Z to be created in the output prototype model. This is only required if an OUT 
            has been specified. 
            Range=0.000001,9999999
            Values=Undefined
            Default=10
            Required=No
        print: 
            Print flag: =0 for minimum output. =1 for runtime information messages. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "origin "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if out != "optional":
            command += " &out=" + out 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required parameter error check

        if angle1 == "required":
            raise ValueError("angle1 is required.")

        command += " @angle1=" + str(angle1) 

        if angle2 != "optional":
            command += " @angle2=" + str(angle2) 

        if angle3 != "optional":
            command += " @angle3=" + str(angle3) 

        if rotaxis1 != "optional":
            command += " @rotaxis1=" + str(rotaxis1) 

        if rotaxis2 != "optional":
            command += " @rotaxis2=" + str(rotaxis2) 

        if rotaxis3 != "optional":
            command += " @rotaxis3=" + str(rotaxis3) 

        if margin != "optional":
            command += " @margin=" + str(margin) 

        if xinc != "optional":
            command += " @xinc=" + str(xinc) 

        if yinc != "optional":
            command += " @yinc=" + str(yinc) 

        if zinc != "optional":
            command += " @zinc=" + str(zinc) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def output(self,
               in_='required',
               fieldlst='optional',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               f11='optional',
               f12='optional',
               f13='optional',
               f14='optional',
               f15='optional',
               f16='optional',
               f17='optional',
               f18='optional',
               f19='optional',
               f20='optional',
               f21='optional',
               f22='optional',
               f23='optional',
               f24='optional',
               f25='optional',
               fieldnam='optional',
               csv=0,
               nodd=0,
               dplace=-1,
               implicit=0,
               retrieval='optional'):

        """
        OUTPUT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Database file to be output. If IN is a catalogue file, then all files in the catalogue are output. 
            Required=Yes
        fieldlst: Input
            File used to supply selected fields. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        f1: Undefined : Undefined
            Optional first output field. None specified means "all". 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Optional second output field. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Optional third output field. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Optional fourth output field. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Optional fifth output field. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Optional sixth output field. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Optional seventh output field. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Optional eighth output field. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Optional ninth output field. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Optional tenth output field. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Optional eleventh output field. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Optional twelfth output field. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Optional thirteenth output field. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Optional fourteenth output field. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Optional fifteenth output field. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Optional sixteenth output field. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Optional seventeenth output field. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Optional eighteenth output field. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Optional nineteenth output field. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Optional twentieth output field. 
            Default=Undefined
            Required=No
        f21: Undefined : Undefined
            Optional twenty-first output field. 
            Default=Undefined
            Required=No
        f22: Undefined : Undefined
            Optional twenty-second output field. 
            Default=Undefined
            Required=No
        f23: Undefined : Undefined
            Optional twenty-third output field. 
            Default=Undefined
            Required=No
        f24: Undefined : Undefined
            Optional twenty-fourth output field. 
            Default=Undefined
            Required=No
        f25: Undefined : Undefined
            Optional twenty-fifth output field. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        csv: 
            Option Description 1 Output in comma separated format (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nodd: 
            Option Description 1 Suppress output of Data Definition (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dplace: 
            Exporting to CSV only: specify the maximum number of decimal places to export. Option 
            -1 Use the best representation for the magnitude of the data. 0 Export 0 decimal places 1 Export 1 
            place. 2 Export 2 decimal places 3 Export 3 decimal places 4 Export 4 decimal places 5 Export 5 
            places 
            Range=-1,5
            Values=-1,0,1,2,3,4,5
            Default=-1
            Required=No
        implicit: 
            Exporting to CSV only: if no output fields are specified, allows you to either export explicit 
            only, or explicit and implicit fields. Option Description 0 All explicit fields are exported. 
            All fields are exported, including implicit fields. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "output "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if f21 != "optional":
            command += " *f21=" + f21 

        if f22 != "optional":
            command += " *f22=" + f22 

        if f23 != "optional":
            command += " *f23=" + f23 

        if f24 != "optional":
            command += " *f24=" + f24 

        if f25 != "optional":
            command += " *f25=" + f25 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if csv != "optional":
            command += " @csv=" + str(csv) 

        if nodd != "optional":
            command += " @nodd=" + str(nodd) 

        if dplace != "optional":
            command += " @dplace=" + str(dplace) 

        if implicit != "optional":
            command += " @implicit=" + str(implicit) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def panelest(self,
                 in_='required',
                 vmodparm='optional',
                 perim='optional',
                 disptin='optional',
                 out='optional',
                 sampout='optional',
                 x='required',
                 y='required',
                 z='optional',
                 value='required',
                 panel='optional',
                 xpt='optional',
                 ypt='optional',
                 zpt='optional',
                 minnum=1,
                 maxnum=100,
                 inside=1,
                 xdspace=0,
                 ydspace=0,
                 zdspace=0,
                 mindisc=50,
                 dplus=0,
                 dminus=0,
                 imethod=3,
                 vmodnum=1,
                 log=0,
                 power=2,
                 total=0,
                 vgonly=0,
                 anangle1=0,
                 anaxis1=3,
                 anangle2=0,
                 anaxis2=1,
                 anangle3=0,
                 anaxis3=3,
                 andist1=1,
                 andist2=1,
                 andist3=1,
                 print_=1,
                 retrieval='optional'):

        """
        PANELEST
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Undefined 
            Required=Yes
        vmodparm: Input
            Variogram - Model 
            Required=No
        perim: Input
            String 
            Required=No
        disptin: Input
            Point Data 
            Required=No

        Output Files:
        -------------

        out: Undefined
            The output results file, containing a record for each panel estimated. The fields include the 
            identifier, the estimated grade, the variance, and other associated information. 
            Required=No
        sampout: Undefined
            The sample output file. This will contain the samples used to estimate each panel, and the 
            assigned to each sample. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of sample data in the IN file. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y coordinate of sample data in the IN file. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Z coordinate of sample data in the IN file. 
            Default=Z
            Required=No
        value: Undefined : Undefined
            Field to be estimated in the IN file. 
            Default=Undefined
            Required=Yes
        panel: Numeric : PERIM,DISPTIN
            Panel identifier. This is a numeric or alpha field (max 40 characters) in the PERIM or DISPTIN 
            If a perimeter file is used then the PVALUE field may be used. 
            Default=PVALUE
            Required=No
        xpt: Undefined : Undefined
            X coordinate of discretisation points in the DISPTIN file. 
            Default=Undefined
            Required=No
        ypt: Undefined : Undefined
            Y coordinate of discretisation points in the DISPTIN file. 
            Default=Undefined
            Required=No
        zpt: Undefined : Undefined
            Z coordinate of discretisation points in the DISPTIN file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        minnum: 
            Minimum number of samples for panel to be estimated.(1). 
            Range=1,+
            Values=Undefined
            Default=1
            Required=No
        maxnum: 
            Maximum number of samples for panel to be estimated. If kriging is selected then the maximum 
            exceed 1399. 
            Range=1,+
            Values=Undefined
            Default=100
            Required=No
        inside: 
            If set to 1 samples must lie inside panel. This only applies if a PERIM file has been specified. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        xdspace: 
            The distance between discretisation points in X. If set to zero then a suitable spacing will be 
            automatically. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ydspace: 
            The distance between discretisation points in Y. If set to zero then a suitable spacing will be 
            automatically. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zdspace: 
            The distance between discretisation points in Z. If set to zero then a suitable spacing will be 
            automatically. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        mindisc: 
            Minimum number of discretisation points in panel before it can be estimated. 
            Range=1,+
            Values=Undefined
            Default=50
            Required=No
        dplus: 
            Perimeter projection distance measured in the increasing direction of the perpendicular 
            
            Range=0,+
            Values=Undefined
            Default=0
            Required=No
        dminus: 
            Perimeter projection distance measured in the decreasing direction of the perpendicular 
            
            Range=0,+
            Values=Undefined
            Default=0
            Required=No
        imethod: 
            Interpolation method: 1 - nearest neighbour 2 - inverse power of distance 3 - ordinary kriging 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        vmodnum: 
            Variogram model reference number as defined by the VREFNUM field in the VMODPARM file. (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        log: 
            Flag to indicate whether log kriging is selected. 0 = ordinary kriging 1 = log kriging 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        power: 
            Power for inverse power of distance method. 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        total: 
            If TOTAL is set to 1 then values for the total volume and area over all panels will be reported and 
            to the OUT file. If kriging is selected then the average variance will be calculated as the 
            average of the individual variances, weighted by the square of the area or volume. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        vgonly: 
            Flag controlling estimation (0). Option Description 0 - Calculate estimated grade and 
            for each panel. 1 - Only create the sample output file. Do not calculate estimated grade and 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        anangle1: 
            First rotation angle for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        anaxis1: 
            First rotation axis for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This parameter has a value 1 for rotation about the X 
            2 for rotation about the Y axis, and 3 for rotation about the Z axis. If it is set to 0 then there will 
            no rotation, irrespective of the value of ANANGLE1. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        anangle2: 
            Second rotation angle for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        anaxis2: 
            Second rotation axis for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This parameter has a value 1 for rotation about the X 
            2 for rotation about the Y axis, and 3 for rotation about the Z axis. If it is set to 0 then there will 
            no rotation, irrespective of the value of ANANGLE2. 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        anangle3: 
            Third rotation angle for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        anaxis3: 
            Third rotation axis for defining anisotropy when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This parameter has a value 1 for rotation about the X 
            2 for rotation about the Y axis, and 3 for rotation about the Z axis. If it is set to 0 then there will 
            no rotation, irrespective of the value of ANANGLE3. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        andist1: 
            Anisotropy distance measured along rotated X axis, when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This corresponds to the range of influence in that 
            
            Range=0.0001,+
            Values=Undefined
            Default=1
            Required=No
        andist2: 
            Anisotropy distance measured along rotated Y axis, when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This corresponds to the range of influence in that 
            
            Range=0.0001,+
            Values=Undefined
            Default=1
            Required=No
        andist3: 
            Anisotropy distance measured along rotated Z axis, when nearest neighbour or inverse power of 
            methods are selected ie IMETHOD = 1 or 2. This corresponds to the range of influence in that 
            
            Range=0.0001,+
            Values=Undefined
            Default=1
            Required=No
        print: 
            Output control flag (1). Option Description 0 Minimum output. This includes a summary of the 
            data and the results. 1 As 0 plus Lagrange multiplier and panel F value 2 As 1 plus a listing of 
            points. 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        """


        command = "panelest "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 

        if perim != "optional":
            command += " &perim=" + perim 

        if disptin != "optional":
            command += " &disptin=" + disptin 

        if out != "optional":
            command += " &out=" + out 

        if sampout != "optional":
            command += " &sampout=" + sampout 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if panel != "optional":
            command += " *panel=" + panel 

        if xpt != "optional":
            command += " *xpt=" + xpt 

        if ypt != "optional":
            command += " *ypt=" + ypt 

        if zpt != "optional":
            command += " *zpt=" + zpt 

        if minnum != "optional":
            command += " @minnum=" + str(minnum) 

        if maxnum != "optional":
            command += " @maxnum=" + str(maxnum) 

        if inside != "optional":
            command += " @inside=" + str(inside) 

        if xdspace != "optional":
            command += " @xdspace=" + str(xdspace) 

        if ydspace != "optional":
            command += " @ydspace=" + str(ydspace) 

        if zdspace != "optional":
            command += " @zdspace=" + str(zdspace) 

        if mindisc != "optional":
            command += " @mindisc=" + str(mindisc) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if imethod != "optional":
            command += " @imethod=" + str(imethod) 

        if vmodnum != "optional":
            command += " @vmodnum=" + str(vmodnum) 

        if log != "optional":
            command += " @log=" + str(log) 

        if power != "optional":
            command += " @power=" + str(power) 

        if total != "optional":
            command += " @total=" + str(total) 

        if vgonly != "optional":
            command += " @vgonly=" + str(vgonly) 

        if anangle1 != "optional":
            command += " @anangle1=" + str(anangle1) 

        if anaxis1 != "optional":
            command += " @anaxis1=" + str(anaxis1) 

        if anangle2 != "optional":
            command += " @anangle2=" + str(anangle2) 

        if anaxis2 != "optional":
            command += " @anaxis2=" + str(anaxis2) 

        if anangle3 != "optional":
            command += " @anangle3=" + str(anangle3) 

        if anaxis3 != "optional":
            command += " @anaxis3=" + str(anaxis3) 

        if andist1 != "optional":
            command += " @andist1=" + str(andist1) 

        if andist2 != "optional":
            command += " @andist2=" + str(andist2) 

        if andist3 != "optional":
            command += " @andist3=" + str(andist3) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def panelk(self,
               in1='required',
               in2='required',
               out='optional',
               x='required',
               y='required',
               value='required',
               panel='required',
               nugget=0,
               var1=1,
               range1=1,
               range2=1,
               vgangle1=0,
               search="optional",
               nmax=50,
               nsim=20,
               minsim="optional",
               vmethod=1,
               vgram=1,
               print_=1,
               retrieval='optional'):

        """
        PANELK
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input sample data file. This must contain the three fields X , Y and VALUE. 
            Required=Yes
        in2: Input
            The input panel data file. This must contain the 4 fields PANEL , PTN , XP field must be defined 
            and will often be called PVALUE. The strings may be open or closed. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            The output results file. This will contain the following fields: -FIELD The grade being 
            -PANEL Panel identifier copied from the IN2 file. -KRIGEST The kriged estimate. -KRIGVAR The 
            variance. -NUMSAM The number of samples used to make the kriged estimate. -AREA The area inside 
            panel. -SIMPTS The number of simulated points inside the panel. -FVALUE The average value of 
            variogram in the panel. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of sample data in the IN file. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y coordinate of sample data in the IN file. 
            Default=Y
            Required=Yes
        value: Undefined : Undefined
            Field to be kriged in the IN file. 
            Default=Undefined
            Required=Yes
        panel: Numeric : IN2
            Panel identifier. This is a numeric field in the IN2 file. Its name will often be PVALUE. 
            Default=PVALUE
            Required=Yes

        Parameters:
        -----------

        nugget: 
            Nugget variance (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        var1: 
            Spatial variance (1). The difference between the nugget variance 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        range1: 
            The range of the variogram in direction 1. (1) Direction 1 is used for defining the anisotropy 
            [ VGANGLE1] , which is measured clockwise from the North. It does not matter whether direction 1 
            the major or minor axis. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        range2: 
            The range of the variogram in direction 2, perpendicular to direction 1. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        vgangle1: 
            The angle between the N axis and direction 1, measured clockwise from N in degrees (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        search: 
            9999 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        nmax: 
            The maximum number of samples to be used. The default is (50), but the maximum is 300 for a PC and 
            for a workstation. 
            Range=1,1900
            Values=Undefined
            Default=50
            Required=No
        nsim: 
            The starting value for the number of simulated points in the X and Y directions for panel 
            The default value of (20) means that the initial square grid has 20x20=400 points. Refer to the 
            description of PANELK in the helpfile or process summary for details of the panel simulation 
            
            Range=Undefined
            Values=Undefined
            Default=20
            Required=No
        minsim: 
            400 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        vmethod: 
            Method for defining variogram parameters (1) Option Description 1 Use parameters NUGGET , 
            , RANGE1 , RANGE2 , and VGANGLE1. This is consistent with earlier versions of PANELK and can be 
            for a single structure spherical model. 2 Define parameters using interactive prompts. This 
            allows a selection of variogram models, defined using VGRAM. 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        vgram: 
            Variogram model type (1). Possible values are: Option Description 1 Single structure 
            model. 2 Two structure spherical model. 3 Linear model. 4 De Wijsian model. 5 Exponential 
            6 Gaussian model. 7 Experimental model. 8 NOT USED. 9 NOT USED. 10 Multi structure spherical 
            with anisotropy. 
            Range=1,10
            Values=1,2,3,4,5,6,7,10
            Default=1
            Required=No
        print: 
            Output control flag (1). Option Description 0 Minimum output. Just a summary of the sample data 
            a table of results is output. 1 As 0 plus a summary of all input files, fields and parameters. 2 As 1 
            a listing of all simulated points, plus all samples and kriged weights. 3 As 2 plus a listing of 
            points. 
            Range=0.3
            Values=0,1,2,3
            Default=1
            Required=No
        """


        command = "panelk "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 

        if out != "optional":
            command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if panel == "required":
            raise ValueError("panel is required.")

        command += " *panel=" + panel 

        if nugget != "optional":
            command += " @nugget=" + str(nugget) 

        if var1 != "optional":
            command += " @var1=" + str(var1) 

        if range1 != "optional":
            command += " @range1=" + str(range1) 

        if range2 != "optional":
            command += " @range2=" + str(range2) 

        if vgangle1 != "optional":
            command += " @vgangle1=" + str(vgangle1) 

        if search != "optional":
            command += " @search=" + str(search) 

        if nmax != "optional":
            command += " @nmax=" + str(nmax) 

        if nsim != "optional":
            command += " @nsim=" + str(nsim) 

        if minsim != "optional":
            command += " @minsim=" + str(minsim) 

        if vmethod != "optional":
            command += " @vmethod=" + str(vmethod) 

        if vgram != "optional":
            command += " @vgram=" + str(vgram) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pca(self,
            in_='required',
            scores='optional',
            sampid='required',
            f1='optional',
            f2='optional',
            f3='optional',
            f4='optional',
            f5='optional',
            f6='optional',
            f7='optional',
            f8='optional',
            f9='optional',
            f10='optional',
            matxtype=0,
            eigenmin=1,
            numeigen=0,
            maxvarpc="optional",
            scnorm=0,
            loadeign=0,
            print_=0,
            retrieval='optional'):

        """
        PCA
        ---
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        scores: Undefined
            Optional output file for principal component scores. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Field containing sample identification 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        matxtype: 
            Matrix type to be used to calculate components. Option Description (0) R matrix, standardised 
            values of original data. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        eigenmin: 
            Option Description (1) Eigenvalue required to select the number of components. Used in the 
            only, ie. when MATXTYPE = 0. Used also when NUMEIGEN = 0. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        numeigen: 
            Option Description (0) Maximum number of eigenvalues is set to the number of fields or to 10, 
            is the lower. Note that if a non default value of MAXVARPC is used, NUMEIGEN must be 0. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxvarpc: 
            95 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        scnorm: 
            Option Description (0) Normalised scores calculated. 1 Scores are not normalised. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        loadeign: 
            Option Description (0) Use factor loadings to calculate scores. 1 Use eigenvalues to 
            scores. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            > 0 Display scores on the screen (0). Note - Do not use for large files. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "pca "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if scores != "optional":
            command += " &scores=" + scores 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if matxtype != "optional":
            command += " @matxtype=" + str(matxtype) 

        if eigenmin != "optional":
            command += " @eigenmin=" + str(eigenmin) 

        if numeigen != "optional":
            command += " @numeigen=" + str(numeigen) 

        if maxvarpc != "optional":
            command += " @maxvarpc=" + str(maxvarpc) 

        if scnorm != "optional":
            command += " @scnorm=" + str(scnorm) 

        if loadeign != "optional":
            command += " @loadeign=" + str(loadeign) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pdrive(self,
               in_='required',
               penfile='optional',
               filter='optional',
               plottype="optional",
               spool=1,
               dfltfile=2,
               num.pens="optional",
               hatchwid="optional",
               squeeze="optional",
               angle=0,
               scale="optional",
               factor=1,
               xoffset=0,
               yoffset=0,
               pxend=0,
               pyend=0,
               pendmode=0,
               raster=0,
               fillopt=1,
               trmode=1,
               emptycol=0,
               edgeopt=1,
               edgecol=0,
               charbgr="optional",
               symbgr="optional",
               fitpaper=0,
               shadepct="optional",
               retrieval='optional'):

        """
        PDRIVE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Plot file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, XMAX, 
            YMAX, XSCALE, YSCALE, XORIG, YORIG, XRT, YTP, XPICRT, YPICTP, CHARSIZE and ASPRATIO 
            implicit). 
            Required=Yes
        penfile: Input
            Colour number to plotter pen mapping file. Must contain the fields and PEN. During plotting, 
            field in the plotfile will be translated into the PEN number in the PENFILE. The field may also 
            the code 1126-1140 and will cause any fill codes in the plotfile to be plotted by the PEN number in 
            PENFILE. 
            Required=No
        filter: Input
            Filter file to replace data values in the plot file, such as , with values more appropriate for 
            plotter. Expects fields FIELD, TEST, IN and OUT. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        plottype: 
            Type code for plotter. Select from the following list of plotters. Option Description 1. HCBS 
            file output 10. HP centre origin 7585,Draftmaster etc. 15. HP corner origin 7475,7550 etc 16. 
            Designjet 650C 20. DMP 52,56,58 30. CalComp with 906 controller 31. CalComp with 907 
            60. Oce,Schlumberger,Benson VDF Format 
            Range=1,60
            Values=Undefined
            Default=Undefined
            Required=Yes
        spool: 
            The plotfile may automatically be sent to the plotter once the plot file is generated. Spooled 
            is normally done in background mode. Option Description 0 To not spool the plot file. 1 To spool 
            plot file to the plotter. 2 To spool the plot file to the plotter, and then delete the plot file. 
            assumes the plot file spooler you are using makes a copy of the plot file (1). 
            Range=0,2
            Values=0,2
            Default=1
            Required=Yes
        dfltfile: 
            Used to determine how the name of the plot file is generated. Option Description 0 Force a prompt 
            a system filename. 1 Force the use the default filename. 2 Prompt for a system file if SPOOL is 
            to 0 or 1, but to use the default system file if SPOOL 
            Range=0,2
            Values=0,2
            Default=2
            Required=No
        num.pens: 
            64 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hatchwid: 
            This defines the method of plotting the fill codes [1126-1140]. If this value is absent then 
            cross hatching styles will be generated using the first available pen. If a value is specified 
            it will be used as the spacing between horizontal hatch lines. To get a solid fill, specify a 
            width equal to the size of the pen. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        squeeze: 
            Reduce the size of fill codes [1126-] by this amount. Useful for avoiding the overlapping of the 
            of fill codes during plotting. If a fill code is squeezed out completely on any axis, it will not 
            plotted. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        angle: 
            Rotate the plot by a given number of degrees. The default is (0) degrees. This is a replacement 
            the ROTATE parameter used on older versions of PDRIVE. 
            Range=0,360
            Values=Undefined
            Default=0
            Required=No
        scale: 
            The scale factor. E.g. enter 1000 for a scale of 1:1000. Note that user data units of metres are 
            if metres are not the unit, then the scale must be multiplied by factor f, where f=no. of metres in 
            user data unit [e.g. 0.3048 for feet]. If - [absent data] is entered, then the plot will be the 
            size [as defined in the prototype]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        factor: 
            A scaling factor used to change the size of the plot by multiplying the values in the plot file by 
            value. The default value is (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xoffset: 
            The X offset [along the paper] from the paper origin [mm] at which this plot will start (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yoffset: 
            The Y offset [along the paper] from the paper origin [mm] at which this plot will start (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        pxend: 
            The X offset from the current plot at which the pen will be left when the plot completes, and the 
            for the next plot established here if the plotter supports new origins. The default is (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        pyend: 
            The Y offset from the current plot at which the pen will be left when the plot completes, and the 
            for the next plot established here if the plotter supports new origins. The default is (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        pendmode: 
            Determines the corner on the plot the PXEND and PYEND offsets from. Option Description 0 for 
            left [0,0], 1 for bottom right [XPICRT,0], 2 for top left [0,YPICTP] 3 for top right 
            The default is the bottom left corner (0). 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        raster: 
            Determines whether a pen or a raster (HPGL2 capable) plotter is used. Use for any HPGL2 capable 
            HPGL2 polygon plotting features are used for plot codes 1126-1189,2000/2001,3000-3155. 
            sorting of plot by colour. For pen plotters, PDRIVE plots the various colours in numerical 
            to save time. The default is pen plotter (0) Option Description 0 plotter is a pen type. 1 plotter 
            a raster or inkjet type. Only for PLOTTYPE =10-19. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        fillopt: 
            Option Description 1 No polygon filling will take place. 2 Polygon filling will use fill types 
            in the plot file for each polygon. 3 Polygon filling will use fill types defined in the pen file 
            polygons with matching colours in the plot file. Only for RASTER =1 (1) 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        trmode: 
            Option Description 1 White polygon fill is transparent. 0 White polygon fill is opaque. Only 
            RASTER =1 (1) 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        emptycol: 
            Option Description 0 All polygons will be filled using the colour in the plotfile. >0: Polygons 
            this colour will be treated as empty [i.e. as if they had =0] Only for RASTER =1 (0) &gt;0 Polygons 
            this colour will be treated as empty [i.e. as if they had =0] Only for RASTER =1 (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        edgeopt: 
            Option Description 0 No polygon edging will take place. 1 Edge polygons using colour from plot 
            or EDGECOL 2 Force edging of empty polygons, using either EDGECOL or 1 3 Force edging of all 
            without edging, using either EDGECOL or 1 4 Force edging of all polygons using either EDGECOL or 
            Only for RASTER =1 (1) 
            Range=0,4
            Values=0,1,2,3,4
            Default=1
            Required=No
        edgecol: 
            Default colour for polygon edging [see EDGEOPT ] Only for RASTER =1 (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        charbgr: 
            Default colour for text background. Option Description 0 Opaque white background for text. 
            Coloured background for text. Undefined No background for text. Only for RASTER =1 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        symbgr: 
            Default colour for symbol background. Option Description 0 Opaque white background for 
            &gt;0: Coloured background for symbols. Undefined No background for symbols. Only for RASTER 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        fitpaper: 
            Fit to paper. Option Description 0 Plot at nominated scale. 1 Fit onto paper - preserve relative 
            dimensions. 2 Fit onto paper - adjust scales in X and Y independently. Only for PLOTTYPE =10-19 
            
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        shadepct: 
            100.0 
            Range=1,100.0
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "pdrive "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if penfile != "optional":
            command += " &penfile=" + penfile 

        if filter != "optional":
            command += " &filter=" + filter 


        # Required parameter error check

        if plottype == "required":
            raise ValueError("plottype is required.")

        command += " @plottype=" + str(plottype) 


        # Required parameter error check

        if spool == "required":
            raise ValueError("spool is required.")

        command += " @spool=" + str(spool) 

        if dfltfile != "optional":
            command += " @dfltfile=" + str(dfltfile) 

        if num.pens != "optional":
            command += " @num.pens=" + str(num.pens) 

        if hatchwid != "optional":
            command += " @hatchwid=" + str(hatchwid) 

        if squeeze != "optional":
            command += " @squeeze=" + str(squeeze) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if scale != "optional":
            command += " @scale=" + str(scale) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if pxend != "optional":
            command += " @pxend=" + str(pxend) 

        if pyend != "optional":
            command += " @pyend=" + str(pyend) 

        if pendmode != "optional":
            command += " @pendmode=" + str(pendmode) 

        if raster != "optional":
            command += " @raster=" + str(raster) 

        if fillopt != "optional":
            command += " @fillopt=" + str(fillopt) 

        if trmode != "optional":
            command += " @trmode=" + str(trmode) 

        if emptycol != "optional":
            command += " @emptycol=" + str(emptycol) 

        if edgeopt != "optional":
            command += " @edgeopt=" + str(edgeopt) 

        if edgecol != "optional":
            command += " @edgecol=" + str(edgecol) 

        if charbgr != "optional":
            command += " @charbgr=" + str(charbgr) 

        if symbgr != "optional":
            command += " @symbgr=" + str(symbgr) 

        if fitpaper != "optional":
            command += " @fitpaper=" + str(fitpaper) 

        if shadepct != "optional":
            command += " @shadepct=" + str(shadepct) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def perdtm(self,
               perimin='required',
               wiretr='required',
               wirept='required',
               retrieval='optional'):

        """
        PERDTM
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file 
            Required=Yes
        wiretr: Input
            Input DTM triangle file 
            Required=Yes
        wirept: Input
            Input DTM point file 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "perdtm "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def perfil(self,
               proto='required',
               perimin='optional',
               model='required',
               dplus='optional',
               dminus='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               attrib5='optional',
               mode=0,
               dplus="optional",
               dminus="optional",
               plane='XY',
               zone=0,
               optimise=2,
               fullcell=0,
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               pvalue="optional",
               resol=0,
               ovcheck=1,
               retrieval='optional'):

        """
        PERFIL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Prototype model file. This defines the model parameters. Records in this file are ignored. 
            Required=Yes
        perimin: Input
            The input perimeter file. The fields required are XP,YP,ZP,PTN, and PVALUE (standard 
            format). All perimeters in the file will be used. Perimeters must lie in the plane as specified 
            the PLANE parameter. The file may contain fields ATTRIB1-5 which can be carried across to the 
            model file. All cells within each perimeter will be assigned these values. If no perimeter file 
            specified, the entire model will be filled with cells (using the XSUBCELL , YSUBCELL and 
            parameters). In the latter case, a field ZONE with value ZONE is added to the model. 
            Required=No

        Output Files:
        -------------

        model: Block Model
            Output model file containing all cells and subcells which lie within the perimeters. This file 
            be sorted on IJK. The MODEL file must NOT be the same as the PROTO file. 
            Required=Yes

        Fields:
        -------

        dplus: Undefined : Undefined
            Field in PERIMIN defining the maximum distance measured in the increasing direction of the 
            axis. The default field name is DPLUS, which will be used if it exists in the PERIMIN file. 
            Default=Undefined
            Required=No
        dminus: Undefined : Undefined
            Field in PERIMIN defining the maximum distance measured in the decreasing direction of the 
            axis. The default field name is DMINUS, which will be used if it exists in the PERIMIN file. 
            Default=Undefined
            Required=No
        attrib1: Undefined : Undefined
            Field from the perimeter file to be placed into the output model file. This may be a multi- word 
            field. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Second field from the perimeter file to be placed into the output model file. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Third field from the perimeter file to be placed into the output model file. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Fourth field from the perimeter file to be placed into the output model file. 
            Default=Undefined
            Required=No
        attrib5: Undefined : Undefined
            Fifth field from the perimeter file to be placed into the output model file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        mode: 
            Option Description (0) Fill perimeters with regular [sub] cells [as FP No 0 0,3 0,1,2,3 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        dplus: 
            The maximum distance measured in the increasing direction of the perpendicular axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            The maximum distance measured in the decreasing direction of the perpendicular axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        plane: 
            Plane in which perimeters are to be filled. Either 'XY' [plan] or 'XZ' [E-W section] or 'YZ' [N-S 
            The default is 'XY'. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        zone: 
            Value to be inserted in the ZONE field (0). The latter is created if there is no perimeter file or 
            ATTRIB1-5 are not specified. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        optimise: 
            Optimise combination of cells to minimise number of subcells (2). Option Description 0 No 
            of subcells. 1 Combine subcells only if they form a complete parent 2 Combine subcells to form 
            number of subcells. No 2 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=2
            Required=No
        fullcell: 
            Controls splitting of cells perpendicular to the plane of the perimeter. Option Description 
            - split cells at projection distance. 1 - projection distance will be rounded to the nearest No 0 
            0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xsubcell: 
            Cell division in X direction (1). Max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Cell division in Y direction (1). Max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            Cell division in Z direction (1). Max 20. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        pvalue: 
            PVALUE of single perimeter to be selected from the PERIMIN file. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        resol: 
            Defines boundary resolution if MODE>0 Option Description (0) - precise boundary location. N - 
            rounded to nearest 1/Nth of parent cell No 0 Undefined Undefined 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ovcheck: 
            Option Description 0 - assumes perimeters do not overlap (i.e. duplicate (1) - check for 
            perimeters. No 1 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "perfil "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if dplus != "optional":
            command += " *dplus=" + dplus 

        if dminus != "optional":
            command += " *dminus=" + dminus 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if attrib5 != "optional":
            command += " *attrib5=" + attrib5 

        if mode != "optional":
            command += " @mode=" + str(mode) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if zone != "optional":
            command += " @zone=" + str(zone) 

        if optimise != "optional":
            command += " @optimise=" + str(optimise) 

        if fullcell != "optional":
            command += " @fullcell=" + str(fullcell) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if pvalue != "optional":
            command += " @pvalue=" + str(pvalue) 

        if resol != "optional":
            command += " @resol=" + str(resol) 

        if ovcheck != "optional":
            command += " @ovcheck=" + str(ovcheck) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def peropn(self,
               perimin='required',
               perimout='required',
               retrieval='optional'):

        """
        PEROPN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file. File must contain the fields XP, YP, ZP, PVALUE and PTN. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            Output perimeter file. All fields are copied from the input file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "peropn "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pertag(self,
               perimin='required',
               tagfile='required',
               perimout='required',
               retrieval='optional'):

        """
        PERTAG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file. Required fields are XP, YP and ZP. 
            Required=Yes
        tagfile: Undefined
            Input and output tag file - will be created if it doesn't already exist. Required fields are XP, 
            ZP and TAGFIELD. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            Output perimeter file. Will contain all fields in PERIMIN, plus TAGFIELD if not already there. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "pertag "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required input error check

        if tagfile == "required":
            raise ValueError("tagfile is required.")

        command += " &tagfile=" + tagfile 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pertra(self,
               perimin='required',
               intersec='optional',
               perimout='optional',
               plane='required',
               pvalue='required',
               ptn='required',
               x='required',
               y='required',
               z='required',
               tag='optional',
               direct=1,
               startpos="optional",
               stepsize="optional",
               numplane="optional",
               maxdist="optional",
               retrieval='optional'):

        """
        PERTRA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            The input perimeter file. This file must contain the fields declared in the command line as 
            PVALUE, PTN, X, Y and Z. Note that X, Y and Z are GLOBAL coordinates. If TAG is declared in the 
            line, it must appear in this file. This file must be sorted into PLANE, PVALUE, PTN order. 
            Required=Yes
        intersec: Input
            An optional output file of the lines of points produced where the input perimeters intersect 
            output perimeter planes. The output perimeters are constructed by arranging these points 
            lists. This file will contain fields PLANE, LN, X, Y and Z. Note that X, Y and Z are GLOBAL 
            A tag field will only appear if TAG is declared in the command line. 
            Required=No

        Output Files:
        -------------

        perimout: String
            An optional output file of perimeters in the planes indicated by the parameter values below. 
            file will contain fields PLANE, PVALUE, PTN, XP, YP and ZP. Note that XP, YP and ZP are GLOBAL 
            A tag field will only appear if TAG is declared in the command line. AT LEAST ONE OUTPUT FILE MUST 
            SPECIFIED. 
            Required=No

        Fields:
        -------

        plane: Undefined : Undefined
            Required field in PERIMIN. Plane identifier. This identifier must be such that, when the 
            are in ascending order, the planes are in sequence. PLANE will often be the same as X, Y or Z but 
            be the same field. It may be necessary to copy a field by using GENTRA. 
            Default=Undefined
            Required=Yes
        pvalue: Undefined : Undefined
            Required field in PERIMIN. Perimeter ID value. Note that there can be more than one perimeter in 
            plane but that, on input, they must not cross either themselves or each other. 
            Default=Undefined
            Required=Yes
        ptn: Undefined : Undefined
            Required field in PERIMIN. Point number in perimeter. 
            Default=Undefined
            Required=Yes
        x: Undefined : Undefined
            Required field in PERIMIN. Global X-coordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Required field in PERIMIN. Global Y-coordinate. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Required field in PERIMIN. Global Z-coordinate. 
            Default=Undefined
            Required=Yes
        tag: Undefined : Undefined
            Optional field. Ore body identifying value. If declared in the command line, it must appear in 
            and will appear in the output file(s). 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        direct: 
            Required parameter which specifies the plane of the output perimeters. 1 = XY, 2 = XZ, 3 = YZ 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=Yes
        startpos: 
            Required parameter which specifies the value of the coordinate perpendicular to the output 
            for the first output plane. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        stepsize: 
            Required parameter which specifies the distance between output planes. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        numplane: 
            Required parameter which specifies the number of output planes. Note that no harm is done if 
            planes are requested which do not intersect the input perimeters. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        maxdist: 
            Optional parameter which specifies a distance between input planes beyond which ore bodies 
            not to be linked. That is, if two adjacent input planes are more than this distance apart where 
            intersect an output plane, the perimeters on either side of the gap will be closed off. The 
            between two adjacent input planes is defined for this purpose as the distance between the 
            pair of points which could logically be joined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "pertra "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 

        if intersec != "optional":
            command += " &intersec=" + intersec 

        if perimout != "optional":
            command += " &perimout=" + perimout 


        # Required field error check

        if plane == "required":
            raise ValueError("plane is required.")

        command += " *plane=" + plane 


        # Required field error check

        if pvalue == "required":
            raise ValueError("pvalue is required.")

        command += " *pvalue=" + pvalue 


        # Required field error check

        if ptn == "required":
            raise ValueError("ptn is required.")

        command += " *ptn=" + ptn 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if tag != "optional":
            command += " *tag=" + tag 


        # Required parameter error check

        if direct == "required":
            raise ValueError("direct is required.")

        command += " @direct=" + str(direct) 


        # Required parameter error check

        if startpos == "required":
            raise ValueError("startpos is required.")

        command += " @startpos=" + str(startpos) 


        # Required parameter error check

        if stepsize == "required":
            raise ValueError("stepsize is required.")

        command += " @stepsize=" + str(stepsize) 


        # Required parameter error check

        if numplane == "required":
            raise ValueError("numplane is required.")

        command += " @numplane=" + str(numplane) 

        if maxdist != "optional":
            command += " @maxdist=" + str(maxdist) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def picfld(self,
               in_='required',
               out='required',
               fieldnam='optional',
               print_=0,
               append=0,
               sort=0,
               retrieval='optional'):

        """
        PICFLD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file, from which fields are to be selected. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file, containing selected field names. 
            Required=Yes

        Fields:
        -------

        fieldnam: Character : OUT
            Optional name for the field in OUT that is to contain the selected field names. The default is 
            
            Default=FIELDNAM
            Required=No

        Parameters:
        -----------

        print: 
            Option Description 0 No display of matching field names >0 Display field names as they are 
            (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        append: 
            If set to 1 then selected field names will be appended to the OUT file, provided it exists and has a 
            DD (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        sort: 
            If set to 1 then the output file will be sorted after all field names have been written to it (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "picfld "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if print_ != "optional":
            command += " @print=" + str(print_) 

        if append != "optional":
            command += " @append=" + str(append) 

        if sort != "optional":
            command += " @sort=" + str(sort) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def picrec(self,
               in_='required',
               fieldlst='optional',
               out='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               fieldnam='optional',
               append=0,
               retrieval='optional'):

        """
        PICREC
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            The name of the file from which records are to be selected. 
            Required=Yes
        fieldlst: Input
            Optional file to specify fields to output. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            The name of the file to which selected records are to be written. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            The name of the first field to be transferred from the input file to the output file. If no fields 
            explicitly named, all fields are copied. You may only apply relational and pattern matching 
            to fields that are to appear in the output file. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be copied. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be copied. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be copied. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be copied. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST that holds the names of the data fields to output in OUT. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        append: 
            If set to 1 then selected records will be appended to the OUT file, provided it exists and has the 
            fields as the input file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "picrec "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pitmod(self,
               wiretr='required',
               wirept='required',
               modelin='required',
               modelou='optional',
               results='required',
               f1='required',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               key='optional',
               density='optional',
               density=1,
               xsubcell=1,
               ysubcell=1,
               resol=0,
               zorig=0,
               bheight=0,
               retrieval='optional'):

        """
        PITMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Triangle file of update wireframe surface (DTM). 
            Required=Yes
        wirept: Input
            Point file of pit wireframe triangulated surface. 
            Required=Yes
        modelin: Input
            Block model for evaluation above wireframe. 
            Required=Yes

        Output Files:
        -------------

        modelou: Block model
            Block model portion inside pit. 
            Required=No
        results: Undefined
            Evaluation results data, by bench. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            Numeric grade field 1. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            Numeric grade field 2. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Numeric grade field 3. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Numeric grade field 4. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Numeric grade field 5. 
            Default=Undefined
            Required=No
        key: Undefined : Undefined
            Key field - numeric. 
            Default=Undefined
            Required=No
        density: Any : MODELIN
            Density field. 
            Default=DENSITY
            Required=No

        Parameters:
        -----------

        density: 
            Default DENSITY value. 
            Range=0,9999
            Values=nan
            Default=1
            Required=Yes
        xsubcell: 
            Cell division in X direction (1). Max 20. 
            Range=1,20
            Values=nan
            Default=1
            Required=No
        ysubcell: 
            Cell division in Y direction (1). Max 20. 
            Range=1,20
            Values=nan
            Default=1
            Required=No
        resol: 
            Defines boundary resolution in direction perpendicular to plane of filling. =(0) - precise 
            location. = N - boundary rounded to nearest 1/Nth of parent cell size. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zorig: 
            Specify an alternative bench origin. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        bheight: 
            Specify an alternative bench height. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        """


        command = "pitmod "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 

        if modelou != "optional":
            command += " &modelou=" + modelou 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if key != "optional":
            command += " *key=" + key 

        if density != "optional":
            command += " *density=" + density 


        # Required parameter error check

        if density == "required":
            raise ValueError("density is required.")

        command += " @density=" + str(density) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if resol != "optional":
            command += " @resol=" + str(resol) 

        if zorig != "optional":
            command += " @zorig=" + str(zorig) 

        if bheight != "optional":
            command += " @bheight=" + str(bheight) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pitres(self,
               results='required',
               model='optional',
               aux='optional',
               aaux='optional',
               baux='optional',
               grade='optional',
               row='optional',
               position=0,
               tsquash=0,
               gsquash=0,
               squash="optional",
               gunit="optional",
               munit="optional",
               elemnt="optional",
               tround=0,
               gdec=2,
               mround=0,
               sdec=0,
               lines=50,
               width="optional",
               numtab="optional",
               volume=0,
               tonnesa=0,
               retrieval='optional'):

        """
        PITRES
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        results: Input
            Input results file. In standard format as per Tabres 
            Required=Yes
        model: Input
            Optional input model file to obtain spatial location parameters (eg RL) 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        aux: Undefined : Undefined
            Auxiliary classification field. An additional "rocktype" field. Create separately - often 
            criteria are used. 
            Default=Undefined
            Required=No
        aaux: Undefined : Undefined
            Auxiliary area classification field. Creates separate table for each field value, integers 
            Mutually exclusive with BAUX 
            Default=Undefined
            Required=No
        baux: Undefined : Undefined
            Auxiliary bench classification field. Creates separate table for each Plane, using values of 
            field in each one, integers only. Mutually exclusive with AAUX 
            Default=Undefined
            Required=No
        grade: Undefined : Undefined
            Default grade field 
            Default=Undefined
            Required=No
        row: Undefined : Undefined
            Field to use in place of 'Number' in tables, ie replace RL, East, or North by something else. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        position: 
            Location in cell of reference position. (0) 0 = base of cell 0.5 = centre of cell 1 = top of cell 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        tsquash: 
            An amount subtracted from tonnes field width [10], +ve or -ve. Default is 0 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        gsquash: 
            An amount subtracted from grade field width [7], +ve or -ve. Default is 0 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        squash: 
            An amount subtracted from metal field widths [9 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        gunit: 
            Default grade units, in quotes. One of 'g/t', 'ppm', 'oz/t', '%', or 'dwt' 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        munit: 
            Default metal units, in quotes. One of 'oz', 'kg', or 'tonn' 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        elemnt: 
            Default grade element/compound symbol, in quotes. Maximum of 4 characters 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tround: 
            Rounding control for tonnes field. 1 = round to 10's 2 = 100's 3 = 1000's 4 = use units of 1000. 
            0 [none] 
            Range=0,4
            Values=0,2,3,4
            Default=0
            Required=No
        gdec: 
            Decimal places for grade field. 0 = 0 decimal place, 1 = 1 decimal place Default 2 decimal places 
            Range=0,4
            Values=Undefined
            Default=2
            Required=No
        mround: 
            Rounding control for metal field. 1 = use 0 decimal places for kg units [def 1] 2 = round to 10's, 3 = 
            4 = 1000's, Default 0 [none] 
            Range=0,4
            Values=0,1,2,3,4
            Default=0
            Required=No
        sdec: 
            Decimal places for strip ratio field. 0 = 0 decimal place Default 1 decimal place 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        lines: 
            Number of lines per page, not including headers. (50) 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        width: 
            Page width in mm, max of 240. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        numtab: 
            Optional table number, 1-99, for display. 
            Range=1,99
            Values=Undefined
            Default=Undefined
            Required=No
        volume: 
            1 = report in volumes rather than tonnes. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        tonnesa: 
            1 = report individual tonnage components for each grade (ie TonnesA, TonnesB, etc rather than 
            overall tonnes of a cell, ie Tonnes. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "pitres "


        # Required input error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 

        if model != "optional":
            command += " &model=" + model 

        if aux != "optional":
            command += " *aux=" + aux 

        if aaux != "optional":
            command += " *aaux=" + aaux 

        if baux != "optional":
            command += " *baux=" + baux 

        if grade != "optional":
            command += " *grade=" + grade 

        if row != "optional":
            command += " *row=" + row 

        if position != "optional":
            command += " @position=" + str(position) 

        if tsquash != "optional":
            command += " @tsquash=" + str(tsquash) 

        if gsquash != "optional":
            command += " @gsquash=" + str(gsquash) 

        if squash != "optional":
            command += " @squash=" + str(squash) 

        if gunit != "optional":
            command += " @gunit=" + str(gunit) 

        if munit != "optional":
            command += " @munit=" + str(munit) 

        if elemnt != "optional":
            command += " @elemnt=" + str(elemnt) 

        if tround != "optional":
            command += " @tround=" + str(tround) 

        if gdec != "optional":
            command += " @gdec=" + str(gdec) 

        if mround != "optional":
            command += " @mround=" + str(mround) 

        if sdec != "optional":
            command += " @sdec=" + str(sdec) 

        if lines != "optional":
            command += " @lines=" + str(lines) 

        if width != "optional":
            command += " @width=" + str(width) 

        if numtab != "optional":
            command += " @numtab=" + str(numtab) 

        if volume != "optional":
            command += " @volume=" + str(volume) 

        if tonnesa != "optional":
            command += " @tonnesa=" + str(tonnesa) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotan(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               value='required',
               charsz='optional',
               ndec="optional",
               xoffset="optional",
               yoffset="optional",
               angle=0,
               symbol=92,
               symsize=5,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTAN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Numeric : IN
            Field to be plotted along X axis. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Field to be plotted along Y axis. 
            Default=Y
            Required=Yes
        value: Undefined : Undefined
            Field for annotation. 
            Default=Undefined
            Required=Yes
        charsz: Undefined : Undefined
            Field to determine character size of annotation. If present it overrides the value of the 
            parameter. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        ndec: 
            Decimal places for annotation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        xoffset: 
            Annotation offset from point in X in millimetres. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yoffset: 
            Annotation offset from point in Y in millimetres. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        angle: 
            Annotation angle from X axis. 
            Range=0, 360
            Values=Undefined
            Default=0
            Required=Yes
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment 112 : Hexagon 
            Range=Undefined
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (5). 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=5
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=1,64
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotan "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if charsz != "optional":
            command += " *charsz=" + charsz 


        # Required parameter error check

        if ndec == "required":
            raise ValueError("ndec is required.")

        command += " @ndec=" + str(ndec) 


        # Required parameter error check

        if xoffset == "required":
            raise ValueError("xoffset is required.")

        command += " @xoffset=" + str(xoffset) 


        # Required parameter error check

        if yoffset == "required":
            raise ValueError("yoffset is required.")

        command += " @yoffset=" + str(yoffset) 


        # Required parameter error check

        if angle == "required":
            raise ValueError("angle is required.")

        command += " @angle=" + str(angle) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotar(self,
               in_='required',
               proto='required',
               plot='required',
               xfld='required',
               yfld='required',
               lenfld='required',
               azifld='required',
               ascale="optional",
               drawhead=0,
               position=3,
               headsize="optional",
               headangl=90,
               charsize=4,
               aspratio=0.9,
               nan=1,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTAR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. Must contain the fields defined by parameters XFLD, YFLD, LENFLD and AZIFLD. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last six values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot File
            Output plot file. 
            Required=Yes

        Fields:
        -------

        xfld: Undefined : Undefined
            Field to be plotted along X axis. 
            Default=Undefined
            Required=Yes
        yfld: Undefined : Undefined
            Field to be plotted along Y axis. 
            Default=Undefined
            Required=Yes
        lenfld: Undefined : Undefined
            Field controlling arrow length. 
            Default=Undefined
            Required=Yes
        azifld: Undefined : Undefined
            Field controlling arrow direction in degrees clockwise from north. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        ascale: 
            Scale for LENFLD in data units per plotted millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        drawhead: 
            Controls plotting of arrow head, 0 - No Arrow Head to be plotted. 1 - Arrow Head to be plotted. 
            (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        position: 
            Position at which arrow is plotted relative to point X Y: Option Description 1 - Plot Arrow Head 
            position [X,Y]. 2 - Plot Arrow Tail at position [X,Y]. 3 - Centre Arrow at position [X,Y]. 
            (3) 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        headsize: 
            3.0 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        headangl: 
            Angle in degrees between left and right lines of arrow head. Default: (90) 
            Range=1,90
            Values=Undefined
            Default=90
            Required=No
        charsize: 
            Character size in millimeters. Default: (4) 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        aspratio: 
            Aspect ratio, width / hieght for characters. Default: (0.9) 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot. Default: (1) 
            Range=1,64
            Values=Undefined
            Default=1
            Required=No
        xmin: 
            Minimum value of X for plot. Not required if the values XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE 
            already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. Not required if the values XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE 
            already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. Not required if the values XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE 
            already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. Not required if the values XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE 
            already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimeter. Not required if the values XMIN, XMAX, YMIN, YMAX, 
            YSCALE are already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimeter. Not required if the values XMIN, XMAX, YMIN, YMAX, 
            YSCALE are already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotar "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if xfld == "required":
            raise ValueError("xfld is required.")

        command += " *xfld=" + xfld 


        # Required field error check

        if yfld == "required":
            raise ValueError("yfld is required.")

        command += " *yfld=" + yfld 


        # Required field error check

        if lenfld == "required":
            raise ValueError("lenfld is required.")

        command += " *lenfld=" + lenfld 


        # Required field error check

        if azifld == "required":
            raise ValueError("azifld is required.")

        command += " *azifld=" + azifld 


        # Required parameter error check

        if ascale == "required":
            raise ValueError("ascale is required.")

        command += " @ascale=" + str(ascale) 

        if drawhead != "optional":
            command += " @drawhead=" + str(drawhead) 

        if position != "optional":
            command += " @position=" + str(position) 

        if headsize != "optional":
            command += " @headsize=" + str(headsize) 

        if headangl != "optional":
            command += " @headangl=" + str(headangl) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotcn(self,
               proto='optional',
               point='optional',
               wiretr='optional',
               wirept='optional',
               model='optional',
               plot='required',
               string='optional',
               x='optional',
               y='optional',
               z='optional',
               field='optional',
               seam='optional',
               plane='XY',
               position="optional",
               top="optional",
               bottom="optional",
               system=2,
               gridinc=-,
               cmin="optional",
               cmax="optional",
               cint="optional",
               hilight="optional",
               hi="optional",
               charsz=3.5,
               nan=1,
               ndp="optional",
               annotate=100,
               density=0,
               maxlink=+,
               extrap=0,
               gsmooth=0,
               power=2,
               radius=+,
               pvalst=1.0,
               pvalinc=1.0,
               xscale="optional",
               yscale="optional",
               append=0,
               print_=0,
               retrieval='optional'):

        """
        PLOTCN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. Optional only if APPEND=1 
            Required=No
        point: Input
            Input raw data point file. 
            Required=No
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=No
        wirept: Input
            Input wireframe point file. 
            Required=No
        model: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK and FIELD field. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes
        string: String
            Optional output string file. If selected this file be written out as well as the plot file and 
            contain fields XP, YP, ZP, PTN and PVALUE. The value of PVALUE field is determined from the 
            and PVALINC parameters. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            X field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Y field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        z: Undefined : Undefined
            Z field in input point file. Only required if contouring raw data, and the PLANE parameter is 
            
            Default=Undefined
            Required=No
        field: Undefined : Undefined
            Field to be contoured. Only required if contouring raw data or solid model. 
            Default=Undefined
            Required=No
        seam: Undefined : Undefined
            Seam ID field. Only required if contouring solid model. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the data for projection of data onto a plane. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam contour required. Only required if neither POSITION nor 
            appear. Both TOP and BOTTOM set for an isopach. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        system: 
            If set to 3 then perimeters in the STRING STRING file are treated as true 3D. eg if the graphics 
            is showing a YZ plane then a perimeter in this plane should have YP and ZP varing with XP constant. 
            default is (2). Under the default system XP and YP vary and ZP is constant, whichever plane is 
            
            Range=2,3
            Values=2,3
            Default=2
            Required=No
        gridinc: 
            Mesh interval in user data units (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        cmin: 
            Minimum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cmax: 
            Maximum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cint: 
            Contour interval in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hilight: 
            Highlight every Nth contour with HI. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hi: 
            Colour [as 'pen' number] for highlighting. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsz: 
            Character size in millimetres for contour annotation (3.5). 
            Range=Undefined
            Values=Undefined
            Default=3.5
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ndp: 
            Number of decimal places for annotation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        annotate: 
            Frequency of contour line annotation in millimetres (100). 
            Range=Undefined
            Values=Undefined
            Default=100
            Required=No
        density: 
            Maximum contour density in contour lines per millimetre. A default cutout is applied if not 
            (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxlink: 
            The maximum separation of points that will be joined by a triangle. By default a convex hull will 
            formed around all points (+). 
            Range=Undefined
            Values=Undefined
            Default=+
            Required=No
        extrap: 
            Distance to extrapolate the data before contouring in the plane of the contour (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        gsmooth: 
            Smoothing factor to apply to the mesh data before contouring. A value between 0 and 1 will 
            a result between the triangulated value at 0 and an inverse distance result for 1 (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        power: 
            Interpolation power (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        radius: 
            Interpolation search radius (+). 
            Range=Undefined
            Values=Undefined
            Default=+
            Required=No
        pvalst: 
            If STRING file requested, for the first string to be written PVALUE will be set to PVALST. For the 
            strings PVALUE is incremented by PVALINC (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        pvalinc: 
            If STRING file requested, PVALUE value increment (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >0 to display the contouring information. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "plotcn "

        if proto != "optional":
            command += " &proto=" + proto 

        if point != "optional":
            command += " &point=" + point 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 

        if model != "optional":
            command += " &model=" + model 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if string != "optional":
            command += " &string=" + string 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if field != "optional":
            command += " *field=" + field 

        if seam != "optional":
            command += " *seam=" + seam 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if system != "optional":
            command += " @system=" + str(system) 

        if gridinc != "optional":
            command += " @gridinc=" + str(gridinc) 

        if cmin != "optional":
            command += " @cmin=" + str(cmin) 

        if cmax != "optional":
            command += " @cmax=" + str(cmax) 

        if cint != "optional":
            command += " @cint=" + str(cint) 

        if hilight != "optional":
            command += " @hilight=" + str(hilight) 

        if hi != "optional":
            command += " @hi=" + str(hi) 

        if charsz != "optional":
            command += " @charsz=" + str(charsz) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if density != "optional":
            command += " @density=" + str(density) 

        if maxlink != "optional":
            command += " @maxlink=" + str(maxlink) 

        if extrap != "optional":
            command += " @extrap=" + str(extrap) 

        if gsmooth != "optional":
            command += " @gsmooth=" + str(gsmooth) 

        if power != "optional":
            command += " @power=" + str(power) 

        if radius != "optional":
            command += " @radius=" + str(radius) 

        if pvalst != "optional":
            command += " @pvalst=" + str(pvalst) 

        if pvalinc != "optional":
            command += " @pvalinc=" + str(pvalinc) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if append != "optional":
            command += " @append=" + str(append) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotcx(self,
               proto='optional',
               section='optional',
               bound='optional',
               point='optional',
               wiretr='optional',
               wirept='optional',
               model='optional',
               contour='optional',
               plot='required',
               string='optional',
               x='optional',
               y='optional',
               z='optional',
               field='optional',
               seam='optional',
               plane='XY',
               position="optional",
               top="optional",
               bottom="optional",
               type=0,
               log=0,
               freq=0,
               system=2,
               section=0,
               dplus="optional",
               dminus="optional",
               xgorig=-,
               ygorig=-,
               zgorig=-,
               gridhinc=-,
               gridvinc=-,
               gridinc=-,
               nox=-,
               noy=-,
               cmin="optional",
               cmax="optional",
               cint="optional",
               hilight="optional",
               hi="optional",
               charsz=3.5,
               nan=1,
               ndp="optional",
               annotate=100,
               density=0,
               csmooth=0.1,
               maxlink=+,
               cellsamp=1,
               extrap=0,
               gsmooth=0,
               power=2,
               radius=+,
               b=-,
               bcode=1001,
               pvalst=1.0,
               pvalinc=1.0,
               grcolr=-,
               xgridint=0,
               ygridint=0,
               zgridint=0,
               xgridndp=0,
               ygridndp=0,
               zgridndp=0,
               xscale="optional",
               yscale="optional",
               vertexag=1,
               append=0,
               print_="optional",
               retrieval='optional'):

        """
        PLOTCX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. Optional only if APPEND=1 
            Required=No
        section: Input
            Optional section definition file. 
            Required=No
        bound: Input
            Optional bounding perimeter. No contours will produced outside this perimeter. Must contain 
            XP, YP, ZP, PTN and PVALUE. This file must contain only one perimeter, must be clockwise and must 
            be closed. 
            Required=No
        point: Input
            Input raw data point file. 
            Required=No
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=No
        wirept: Input
            Input wireframe point file. 
            Required=No
        model: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK and FIELD. If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, 
            ANGLE3, ROTAXIS1, ROTAXIS2, and ROTAXIS3. 
            Required=No
        contour: Input
            Input file containing one or more of the following fields to specify control over contour 
            CVALUE Individual contour values. CINT Contour interval. C Contour colour value. LINECODE 
            linecode 1001 etc. CHARSZ Annotation character size. NDP Number of decimal places. ANNOTATE 
            of contour line annotation in millimetres. DENSITY Maximum contour density in lines per 
            The contour specification will be interpreted in logarithmic values if NLOG>0 and frequency 
            if FREQ>0.0. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes
        string: String
            Optional output string file. If selected this file be written out as well as the plot file and 
            contain fields XP, YP, ZP, PTN and PVALUE. The value of PVALUE field is determined from the 
            and PVALIN parameters. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            X field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Y field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        z: Undefined : Undefined
            Z field in input point file. Only required if contouring raw data, and either the PLANE 
            or a section definition file is supplied. 
            Default=Undefined
            Required=No
        field: Undefined : Undefined
            Field to be contoured. Required for contouring raw data or solid model. Optional for 
            a wireframe. 
            Default=Undefined
            Required=No
        seam: Undefined : Undefined
            Seam ID field. Only required if contouring solid model. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the data for projection of data onto a plane. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam contour required. Only required if neither POSITION nor 
            appear. Both TOP and BOTTOM set for an isopach. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        type: 
            Force the interpretation of the command line and contour specification file data: - derived 
            the parameters/files supplied Option Description 0 command line parameters 1 contour values 
            CVALUE field 2 contour values from CVALUE field with repetition in cycles 3 major/minor 
            intervals from CINT field. 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        log: 
            Logarithmic conversion of data to be contoured to base 10 [1] or base e [2], with the contour 
            interpreted in logarithmic values. Default is no conversion (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        freq: 
            Convert the data to be contoured to a frequency distribution, apply the specified contour 
            as percentages, and annotate the raw data values (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        system: 
            If set to 3 then perimeters in the BOUND and STRING files are treated as true 3D. eg if the graphics 
            is showing a YZ plane then a perimeter in this plane should have YP and ZP varing with XP constant. 
            default is (2). Under the default system XP and YP vary and ZP is constant, whichever plane is 
            
            Range=2,3
            Values=2,3
            Default=2
            Required=No
        section: 
            Force the specification of a section definition if non-zero (0). The definition can also be 
            from the section definition file, if supplied. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dplus: 
            The search distance measured in the increasing direction from the section definition plane. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            The search distance measured in the decreasing direction from the section definition plane. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xgorig: 
            Grid origin of mesh in user data units on the horizontal plotted axis. If a section definition is 
            then supply the true X coordinate (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        ygorig: 
            Grid origin of mesh in user data units on the vertical plotted axis. If a section definition is 
            then supply the true Y coordinate (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        zgorig: 
            Grid origin of mesh in user data units in the true Z coordinate for a section definition (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        gridhinc: 
            Grid interval of mesh in user data units on the horizontal plotted axis (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        gridvinc: 
            Grid interval of mesh in user data units on the vertical plotted axis (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        gridinc: 
            Alternate specification of regular mesh interval in user data units (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        nox: 
            Maximum number of mesh intervals on the horizontal plotted axis (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        noy: 
            Maximum number of mesh intervals on the vertical plotted axis (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        cmin: 
            Minimum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cmax: 
            Maximum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cint: 
            Contour interval in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hilight: 
            Highlight every Nth contour with HI. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hi: 
            Colour [as 'pen' number] for highlighting. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsz: 
            Character size in millimetres for contour annotation (3.5). 
            Range=Undefined
            Values=Undefined
            Default=3.5
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ndp: 
            Number of decimal places for annotation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        annotate: 
            Frequency of contour line annotation in millimetres (100). 
            Range=Undefined
            Values=Undefined
            Default=100
            Required=No
        density: 
            Maximum contour density in contour lines per millimetre. A default cutout is applied if not 
            (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        csmooth: 
            Smoothing factor to apply in contour generation by controlling the maximum step size in a mesh 
            A value of 0.1 will produce a smooth contour, 0.5 will produce a coarse contour. Use one of 0.1, 
            0.5 (0.1). 
            Range=Undefined
            Values=Undefined
            Default=0.1
            Required=No
        maxlink: 
            The maximum separation of points that will be joined by a triangle. By default a convex hull will 
            formed around all points (+). 
            Range=Undefined
            Values=Undefined
            Default=+
            Required=No
        cellsamp: 
            The number of intervals to sample cells to approximate the subcell variation for orthogonal 
            contouring of models (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        extrap: 
            Distance to extrapolate the data before contouring in the plane of the contour (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        gsmooth: 
            Smoothing factor to apply to the mesh data before contouring. A value between 0 and 1 will 
            a result between the triangulated value at 0 and an inverse distance result for 1 (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        power: 
            Interpolation power (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        radius: 
            Interpolation search radius (+). 
            Range=Undefined
            Values=Undefined
            Default=+
            Required=No
        b: 
            Colour for plotting boundary outline (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        bcode: 
            Linecode for plotting boundary outline (1001). 
            Range=Undefined
            Values=Undefined
            Default=1001
            Required=No
        pvalst: 
            If STRING file requested, for the first string to be written PVALUE will be set to PVALST. For the 
            strings PVALUE is incremented by PVALINC (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        pvalinc: 
            If STRING file requested, PVALUE value increment (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        grcolr: 
            Preferred grid colour where a grid is to be plotted for a specified section definition (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        xgridint: 
            X grid interval, 0 no X grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ygridint: 
            Y grid interval, 0 no Y grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zgridint: 
            Z grid interval, 0 no Z grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xgridndp: 
            X grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ygridndp: 
            Y grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zgridndp: 
            Z grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xscale: 
            X scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        vertexag: 
            Controls vertical exaggeration when a section definition file is included. This must be set to 
            different scales. The default is forced equal scales (1). If the input model is a Rotated Model 
            the process will always set VERTEXAG to 1 and display a warning message. = 0 allows different 
            for both axes determined by XSCALE and YSCALE if provided or else by filling the data area to the 
            limits. > 0 sets value of XSCALE/YSCALE. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >0 to display contouring information. 1 contour control file 2 mesh values 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotcx "

        if proto != "optional":
            command += " &proto=" + proto 

        if section != "optional":
            command += " &section=" + section 

        if bound != "optional":
            command += " &bound=" + bound 

        if point != "optional":
            command += " &point=" + point 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 

        if model != "optional":
            command += " &model=" + model 

        if contour != "optional":
            command += " &contour=" + contour 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if string != "optional":
            command += " &string=" + string 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if field != "optional":
            command += " *field=" + field 

        if seam != "optional":
            command += " *seam=" + seam 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if type != "optional":
            command += " @type=" + str(type) 

        if log != "optional":
            command += " @log=" + str(log) 

        if freq != "optional":
            command += " @freq=" + str(freq) 

        if system != "optional":
            command += " @system=" + str(system) 

        if section != "optional":
            command += " @section=" + str(section) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if xgorig != "optional":
            command += " @xgorig=" + str(xgorig) 

        if ygorig != "optional":
            command += " @ygorig=" + str(ygorig) 

        if zgorig != "optional":
            command += " @zgorig=" + str(zgorig) 

        if gridhinc != "optional":
            command += " @gridhinc=" + str(gridhinc) 

        if gridvinc != "optional":
            command += " @gridvinc=" + str(gridvinc) 

        if gridinc != "optional":
            command += " @gridinc=" + str(gridinc) 

        if nox != "optional":
            command += " @nox=" + str(nox) 

        if noy != "optional":
            command += " @noy=" + str(noy) 

        if cmin != "optional":
            command += " @cmin=" + str(cmin) 

        if cmax != "optional":
            command += " @cmax=" + str(cmax) 

        if cint != "optional":
            command += " @cint=" + str(cint) 

        if hilight != "optional":
            command += " @hilight=" + str(hilight) 

        if hi != "optional":
            command += " @hi=" + str(hi) 

        if charsz != "optional":
            command += " @charsz=" + str(charsz) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if density != "optional":
            command += " @density=" + str(density) 

        if csmooth != "optional":
            command += " @csmooth=" + str(csmooth) 

        if maxlink != "optional":
            command += " @maxlink=" + str(maxlink) 

        if cellsamp != "optional":
            command += " @cellsamp=" + str(cellsamp) 

        if extrap != "optional":
            command += " @extrap=" + str(extrap) 

        if gsmooth != "optional":
            command += " @gsmooth=" + str(gsmooth) 

        if power != "optional":
            command += " @power=" + str(power) 

        if radius != "optional":
            command += " @radius=" + str(radius) 

        if b != "optional":
            command += " @b=" + str(b) 

        if bcode != "optional":
            command += " @bcode=" + str(bcode) 

        if pvalst != "optional":
            command += " @pvalst=" + str(pvalst) 

        if pvalinc != "optional":
            command += " @pvalinc=" + str(pvalinc) 

        if grcolr != "optional":
            command += " @grcolr=" + str(grcolr) 

        if xgridint != "optional":
            command += " @xgridint=" + str(xgridint) 

        if ygridint != "optional":
            command += " @ygridint=" + str(ygridint) 

        if zgridint != "optional":
            command += " @zgridint=" + str(zgridint) 

        if xgridndp != "optional":
            command += " @xgridndp=" + str(xgridndp) 

        if ygridndp != "optional":
            command += " @ygridndp=" + str(ygridndp) 

        if zgridndp != "optional":
            command += " @zgridndp=" + str(zgridndp) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if vertexag != "optional":
            command += " @vertexag=" + str(vertexag) 

        if append != "optional":
            command += " @append=" + str(append) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotda(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               value='optional',
               vmax=2.5,
               symbol="optional",
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTDA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot File
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field to be plotted along X axis. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field to be plotted along Y axis. 
            Default=Undefined
            Required=Yes
        value: Undefined : Undefined
            Field to be used for defining symbol size. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        vmax: 
            VALUE value for 2.5 millimetre diameter symbol (2.5). 
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=No
        symbol: 
            91 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotda "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if value != "optional":
            command += " *value=" + value 

        if vmax != "optional":
            command += " @vmax=" + str(vmax) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotfr(self,
               proto='required',
               plot='required',
               xinc="optional",
               yinc="optional",
               ndx="optional",
               ndy="optional",
               igrid=0,
               noxaxis="optional",
               noyaxis="optional",
               xgstart="optional",
               ygstart="optional",
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTFR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        xinc: 
            Grid increment on X axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yinc: 
            Grid increment on Y axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndx: 
            Annotation decimal places on X axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndy: 
            Annotation decimal places on Y axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        igrid: 
            Option Description 0 frame only; 1 frame + outwards ticks; 2 frame + crosses at grid 
            3 frame + inwards ticks; 4 grid; 5-9 as 0-4 minus frame. 10 as 4 but anno- tation parallel to grid 
            11-2 0 as 1-10 with annotation on right and top as well. Negative values of IGRID give an 
            frame around the full plot area. 
            Range=0,20
            Values=Undefined
            Default=0
            Required=Yes
        noxaxis: 
            Suppresses plotting of X-axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        noyaxis: 
            Suppresses plotting of Y-axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xgstart: 
            Start point of X grid, ticks Default is XMIN. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ygstart: 
            Start point of Y grid, ticks Default is YMIN. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotfr "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if xinc == "required":
            raise ValueError("xinc is required.")

        command += " @xinc=" + str(xinc) 


        # Required parameter error check

        if yinc == "required":
            raise ValueError("yinc is required.")

        command += " @yinc=" + str(yinc) 


        # Required parameter error check

        if ndx == "required":
            raise ValueError("ndx is required.")

        command += " @ndx=" + str(ndx) 


        # Required parameter error check

        if ndy == "required":
            raise ValueError("ndy is required.")

        command += " @ndy=" + str(ndy) 


        # Required parameter error check

        if igrid == "required":
            raise ValueError("igrid is required.")

        command += " @igrid=" + str(igrid) 

        if noxaxis != "optional":
            command += " @noxaxis=" + str(noxaxis) 

        if noyaxis != "optional":
            command += " @noyaxis=" + str(noyaxis) 

        if xgstart != "optional":
            command += " @xgstart=" + str(xgstart) 

        if ygstart != "optional":
            command += " @ygstart=" + str(ygstart) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotft(self,
               proto='required',
               plot='required',
               xtype=1,
               ytype=1,
               ndx="optional",
               ndy="optional",
               igridx=0,
               igridy="optional",
               noxaxis=0,
               noyaxis=0,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTFT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        xtype: 
            Option Description 1 linear 2 log base 10 3 log base e 4 probability x scale Min/max limits must be 
            in the appropriate transformed units (e.g. logs, or for probability, phi unit values in the 
            of say -4 to +4) 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=Yes
        ytype: 
            Option Description 1 linear 2 log base 10 3 log base e 4 probability y scale. Min/max limits must 
            defined in the appropriate transformed units (e.g. logs, or for probability, phi unit values 
            the range of say -4 to +4) 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=Yes
        ndx: 
            Annotation decimal places on X axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndy: 
            Annotation decimal places on Y axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        igridx: 
            Option Description 0 frame only 1 frame + outwards ticks 2 frame + inwards and outwards tick 3 
            + inwards tick 4 grid 5-9 as 0-4 minus frame. Negative value will cause outer frame around full 
            area. 
            Range=0,10
            Values=Undefined
            Default=0
            Required=Yes
        igridy: 
            Option Description 0 no numbering 1 outwards ticks 2 inwards and outwards ticks 3 inwards ticks 
            grid; 
            Range=0,4
            Values=Undefined
            Default=Undefined
            Required=Yes
        noxaxis: 
            >0 suppresses plotting of X-axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        noyaxis: 
            >0 suppresses plotting of Y-axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotft "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if xtype == "required":
            raise ValueError("xtype is required.")

        command += " @xtype=" + str(xtype) 


        # Required parameter error check

        if ytype == "required":
            raise ValueError("ytype is required.")

        command += " @ytype=" + str(ytype) 


        # Required parameter error check

        if ndx == "required":
            raise ValueError("ndx is required.")

        command += " @ndx=" + str(ndx) 


        # Required parameter error check

        if ndy == "required":
            raise ValueError("ndy is required.")

        command += " @ndy=" + str(ndy) 


        # Required parameter error check

        if igridx == "required":
            raise ValueError("igridx is required.")

        command += " @igridx=" + str(igridx) 


        # Required parameter error check

        if igridy == "required":
            raise ValueError("igridy is required.")

        command += " @igridy=" + str(igridy) 

        if noxaxis != "optional":
            command += " @noxaxis=" + str(noxaxis) 

        if noyaxis != "optional":
            command += " @noyaxis=" + str(noyaxis) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotfx(self,
               proto='optional',
               plot='required',
               xinc="optional",
               yinc="optional",
               ibase=1,
               ndx=0,
               ndy=0,
               ticklx=0,
               tickly=0,
               xgstart="optional",
               ygstart="optional",
               tblock=0,
               emptytb=0,
               tunits=1,
               tscale=-,
               lblock=0,
               tpos=1,
               lpos=1,
               xgid="optional",
               ygid="optional",
               drawnum="optional",
               logo=0,
               splan=0,
               pldist="optional",
               prdist="optional",
               dminus="optional",
               dplus="optional",
               plx1="optional",
               plx2="optional",
               ply1="optional",
               ply2="optional",
               charsize=2.5,
               aspratio="optional",
               append=0,
               nan=1,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTFX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        xinc: 
            Grid increment on X axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yinc: 
            Grid increment on Y axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ibase: 
            Baseplan size: Option Description 1 A0 horizontal - 1000 x 800 mm 2 A0 vertical - 800 x 1000 mm 3 B1 
            - 900 x 650 mm 4 B1 vertical - 650 x 900 mm 5 A1 horizontal - 800 x 560 mm 6 A1 vertical - 560 x 800 mm 7 A3 
            - 350 x 250 mm 8 A3 vertical - 250 x 350 mm 9 user defined 10 user defined with single thickness title 
            user defined with no outer frame For options 1-8 a plot prototype file is not required, but 
            xmin , xmax , xscale , ymin , ymax , yscale must be entered. 
            Range=1,11
            Values=Undefined
            Default=1
            Required=Yes
        ndx: 
            Annotation decimal places on X axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ndy: 
            Annotation decimal places on Y axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ticklx: 
            Length of grid ticks on X axis in mm. = 0 for full lines (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        tickly: 
            Length of grid ticks on Y axis in mm. = 0 for full lines (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xgstart: 
            Start point of X grid, ticks Default is XMIN. To suppress plotting of X-axis set XGSTART to '+'. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ygstart: 
            Start point of Y grid, ticks Default is YMIN. To suppress plotting of Y-axis set YGSTART to '+'. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tblock: 
            Option Description 0 for no title block 1 for standard title block 2 for basic title block 3 for 
            title block (0). Titles are prompted for interactively. 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        emptytb: 
            Option Description 0 for filled title block 1 for empty title block 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        tunits: 
            Units for scale bar in title box. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        tscale: 
            Scale to be plotted in the title box and used for the scale bar. This is a natural scale i.e. for 
            enter 1000. If TUNITS is not specified then units are assumed to be metres. Note if TUNITS is used 
            TSCALE is not required. If used it will overwrite the value calculated by TUNITS. The default is 
            1000 (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        lblock: 
            Option Description 0 for no legend block 1 for standard legend block [100x100mm] 2 for wide 
            block [200x100mm] 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        tpos: 
            Title block position; Option Description 1 for bottom right 2 for bottom left 3 for top left 4 for 
            right; (1) 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        lpos: 
            Legend position; Option Description 1 for bottom right 2 for bottom left 3 for top left 4 for top 
            5 same as title box but to side 6 same as title box but above/below; (1) 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=1
            Required=No
        xgid: 
            Text following grid number on X axis, max 4 characters, enclosed in single quotes if alpha, eg. 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ygid: 
            Text following grid number on X axis, max 4 characters, enclosed in single quotes if alpha, eg. 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        drawnum: 
            Plot drawing number, max of 4 characters. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        logo: 
            Plot logo; Option Description 0 for none 1 to plot logo (0). This will be prompted for following 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        splan: 
            Selection of plan window. If selected then the following 6 parameters must also be set. Option 
            0 no section plan window 1 plot plan window. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        pldist: 
            Width of plan window in user data units. Must equal PLDIST for corresponding PLOTSX command. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        prdist: 
            Section projection distance. Should equal DISTANCE on the PLOTSX command. Horizontal grid 
            are drawn in the plan window along the section line and at PRDIST either side of it. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            Negative distance from section plane. For sections where PRDIST differs on either side. If not 
            then PRDIST will be used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dplus: 
            Positive distance from section plane. For sections where PRDIST differs on either side. If not 
            then PRDIST will be used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        plx1: 
            X Co-ordinate at start of section line. Must equal X1 on PLOTSX command. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        plx2: 
            X Co-ordinate at end of section line. Must equal X2 on PLOTSX command. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ply1: 
            Y Co-ordinate at start of section line. Must equal Y1 on PLOTSX command. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ply2: 
            Y Co-ordinate at end of section line. Must equal Y2 on PLOTSX command. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres of grid annotation (2.5). 
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=No
        aspratio: 
            1.1 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, assuming it 
            and is a proper plot file. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotfx "

        if proto != "optional":
            command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if xinc == "required":
            raise ValueError("xinc is required.")

        command += " @xinc=" + str(xinc) 


        # Required parameter error check

        if yinc == "required":
            raise ValueError("yinc is required.")

        command += " @yinc=" + str(yinc) 


        # Required parameter error check

        if ibase == "required":
            raise ValueError("ibase is required.")

        command += " @ibase=" + str(ibase) 

        if ndx != "optional":
            command += " @ndx=" + str(ndx) 

        if ndy != "optional":
            command += " @ndy=" + str(ndy) 

        if ticklx != "optional":
            command += " @ticklx=" + str(ticklx) 

        if tickly != "optional":
            command += " @tickly=" + str(tickly) 

        if xgstart != "optional":
            command += " @xgstart=" + str(xgstart) 

        if ygstart != "optional":
            command += " @ygstart=" + str(ygstart) 

        if tblock != "optional":
            command += " @tblock=" + str(tblock) 

        if emptytb != "optional":
            command += " @emptytb=" + str(emptytb) 

        if tunits != "optional":
            command += " @tunits=" + str(tunits) 

        if tscale != "optional":
            command += " @tscale=" + str(tscale) 

        if lblock != "optional":
            command += " @lblock=" + str(lblock) 

        if tpos != "optional":
            command += " @tpos=" + str(tpos) 

        if lpos != "optional":
            command += " @lpos=" + str(lpos) 

        if xgid != "optional":
            command += " @xgid=" + str(xgid) 

        if ygid != "optional":
            command += " @ygid=" + str(ygid) 

        if drawnum != "optional":
            command += " @drawnum=" + str(drawnum) 

        if logo != "optional":
            command += " @logo=" + str(logo) 

        if splan != "optional":
            command += " @splan=" + str(splan) 

        if pldist != "optional":
            command += " @pldist=" + str(pldist) 

        if prdist != "optional":
            command += " @prdist=" + str(prdist) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if plx1 != "optional":
            command += " @plx1=" + str(plx1) 

        if plx2 != "optional":
            command += " @plx2=" + str(plx2) 

        if ply1 != "optional":
            command += " @ply1=" + str(ply1) 

        if ply2 != "optional":
            command += " @ply2=" + str(ply2) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if append != "optional":
            command += " @append=" + str(append) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotgr(self,
               proto='required',
               plot='required',
               angle="optional",
               x0="optional",
               y0="optional",
               xr0="optional",
               yr0="optional",
               xstart="optional",
               xinc="optional",
               xend="optional",
               ystart="optional",
               yinc="optional",
               yend="optional",
               ndec="optional",
               factor=1,
               noannot=0,
               xoffset="optional",
               yoffset="optional",
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTGR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        angle: 
            Rotation angle in degrees, measured from the rotated axes towards the X-Y plot axes. 
            Range=0,360
            Values=Undefined
            Default=Undefined
            Required=Yes
        x0: 
            X co-ordinate of known point in both systems, in unrotated co-ordinate system. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        y0: 
            Y co-ordinate of known point in both systems, in unrotated co-ordinate system. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        xr0: 
            X co-ordinate of known point in both systems, in rotated co-ordinate system. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yr0: 
            Y co-ordinate of known point in both systems, in rotated co-ordinate system. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        xstart: 
            First required line in rotated co-ordinate system X direction. Set XSTART , XINC , XEND all to 0 
            no X lines. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        xinc: 
            Increment between grid lines in rotated co-ordinate system X direction. Set to 0 for one line 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        xend: 
            Last required line in rotated co-ordinate system X direction. Set to XSTART for one line only. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ystart: 
            First required line in rotated co-ordinate system Y direction. Set YSTART , YINC , YEND all to 0 
            no Y lines. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yinc: 
            Increment between grid lines in rotated co-ordinate system Y direction. Set to 0 for one line 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        yend: 
            Last required line in rotated co-ordinate system Y direction. Set to YSTART for one line only. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndec: 
            Number of decimal places for annotation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        factor: 
            The rotated co-ordinate system units will be e.g. 0.3048 for a grid in feet on an unrotated grid 
            metres (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        noannot: 
            Option Description 1 do not plot annotation on lines (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xoffset: 
            The offset in millimetres of the start of the annotation from the start of each grid line 
            along the line. [Default=1.0 CHARSIZE]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yoffset: 
            The offset in millimetres of the start of the annotation from the start of each grid line 
            at right angles to the line. [Default=0.5 CHARSIZE]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio [width to ht.] for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotgr "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if angle == "required":
            raise ValueError("angle is required.")

        command += " @angle=" + str(angle) 


        # Required parameter error check

        if x0 == "required":
            raise ValueError("x0 is required.")

        command += " @x0=" + str(x0) 


        # Required parameter error check

        if y0 == "required":
            raise ValueError("y0 is required.")

        command += " @y0=" + str(y0) 


        # Required parameter error check

        if xr0 == "required":
            raise ValueError("xr0 is required.")

        command += " @xr0=" + str(xr0) 


        # Required parameter error check

        if yr0 == "required":
            raise ValueError("yr0 is required.")

        command += " @yr0=" + str(yr0) 


        # Required parameter error check

        if xstart == "required":
            raise ValueError("xstart is required.")

        command += " @xstart=" + str(xstart) 


        # Required parameter error check

        if xinc == "required":
            raise ValueError("xinc is required.")

        command += " @xinc=" + str(xinc) 


        # Required parameter error check

        if xend == "required":
            raise ValueError("xend is required.")

        command += " @xend=" + str(xend) 


        # Required parameter error check

        if ystart == "required":
            raise ValueError("ystart is required.")

        command += " @ystart=" + str(ystart) 


        # Required parameter error check

        if yinc == "required":
            raise ValueError("yinc is required.")

        command += " @yinc=" + str(yinc) 


        # Required parameter error check

        if yend == "required":
            raise ValueError("yend is required.")

        command += " @yend=" + str(yend) 


        # Required parameter error check

        if ndec == "required":
            raise ValueError("ndec is required.")

        command += " @ndec=" + str(ndec) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if noannot != "optional":
            command += " @noannot=" + str(noannot) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plothi(self,
               in_='required',
               proto='required',
               plot='required',
               x1='required',
               x2='required',
               y='required',
               retrieval='optional'):

        """
        PLOTHI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x1: Undefined : Undefined
            Field marking bin start (LOWER if file generated by HISTOG). 
            Default=Undefined
            Required=Yes
        x2: Undefined : Undefined
            Field marking bin end (UPPER if file generated by HISTOG). 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field to be plotted in Y (FREQENCY if file generated by HISTOG). 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        """


        command = "plothi "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x1 == "required":
            raise ValueError("x1 is required.")

        command += " *x1=" + x1 


        # Required field error check

        if x2 == "required":
            raise ValueError("x2 is required.")

        command += " *x2=" + x2 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotli(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               linecode=1,
               close=0,
               symbol=92,
               symsize=3,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTLI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Line X co-ordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Line Y co-ordinate. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        linecode: 
            Line Type to be used to join each point. Default (1). Line Types: Option Description 1 Solid line 
            Bold line 3 Dashed line 4 Dotted line 5 Dot-Dash line 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=No
        close: 
            Option Description 1 joins the first and last points [for perimeters]. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment 
            Range=91,98
            Values=91,92,93,94,95,96,97,98
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (3). Set to 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotli "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if close != "optional":
            command += " @close=" + str(close) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotln(self,
               in_='required',
               proto='required',
               plot='required',
               x1='required',
               y1='required',
               x2='required',
               y2='required',
               linecode=1,
               symbol=92,
               symsize=3,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTLN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x1: Undefined : Undefined
            Line segment start X co-ordinate. 
            Default=Undefined
            Required=Yes
        y1: Undefined : Undefined
            Line segment start Y co-ordinate. 
            Default=Undefined
            Required=Yes
        x2: Undefined : Undefined
            Line segment end X co-ordinate. 
            Default=Undefined
            Required=Yes
        y2: Undefined : Undefined
            Line segment end Y co-ordinate. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        linecode: 
            Line Type to be used to join each point. Default (1). Line Types: Option Description 1 Solid line 
            Bold line 3 Dashed line 4 Dotted line 5 Dot-Dash line 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=No
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment 
            Range=91,98
            Values=91,92,93,94,95,96,97,98
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (3). Set to 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotln "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x1 == "required":
            raise ValueError("x1 is required.")

        command += " *x1=" + x1 


        # Required field error check

        if y1 == "required":
            raise ValueError("y1 is required.")

        command += " *y1=" + y1 


        # Required field error check

        if x2 == "required":
            raise ValueError("x2 is required.")

        command += " *x2=" + x2 


        # Required field error check

        if y2 == "required":
            raise ValueError("y2 is required.")

        command += " *y2=" + y2 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotmx(self,
               in_='required',
               proto='required',
               section='optional',
               annfile='optional',
               legend='optional',
               plot='required',
               modcol='optional',
               charsize=2,
               charsmin="optional",
               aspratio=1.0,
               nan=1,
               frame=1,
               shrink=0.5,
               annotate=0,
               anncol=-,
               annpos=1,
               box=1,
               boxcol=-,
               shade=0,
               symbol=92,
               symsize=0,
               grcolr=-,
               xgridint=0,
               ygridint=0,
               zgridint=0,
               xgridndp=0,
               ygridndp=0,
               zgridndp=0,
               iconsize=25,
               iconcol1=-,
               iconcol2=-,
               title=1,
               titcol=-,
               titchs=2,
               legend=1,
               legcol=-,
               legchs=-,
               append=0,
               xscale="optional",
               yscale="optional",
               vertexag=1,
               retrieval='optional'):

        """
        PLOTMX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. This must contain the fields XC, YC, ZC, XINX, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK. If it is a Rotated Model then it must also include the fields X0, Y0, Z0, ANGLE1, 
            ANGLE3, ROTAXIS1, ROTAXIS2, ROTAXIS2. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE, (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes
        section: Input
            Optional section definition file. Must contain the fields SVALUE,XCENTRE,YCENTRE, 
            
            Required=No
        annfile: Input
            Optional annotation input file for specifying annotations as an alternative to the 
            input. Only used if the ANNOTATE=1. Compulsory fields: FIELD A8- Field to annotate. CHARSIZE N 
            Annotate character size. N - Annotate colour. XOFFSET N - X offset in mm. YOFFSET N - Y offset in 
            ANGLE N - Angle of annotation. NDP N - Number of decimal places. Optional fields if FIELD is 
            LOWER N - Lower bound non-inclusive. UPPER N - Upper bound inclusive. LOWER and UPPER define the 
            on FIELD for which the particular annotation will plotted. Special values - and + may be used. 
            Required=No
        legend: Input
            Optional shading legend input file which may be used as an alternative to interactive input. 
            used if the SHADE=1. Compulsory fields: FIELD A8- Field to annotate, must be N. CODE N - Fillcode 
            use for shading. LOWER N - Lower bound non-inclusive. UPPER N - Upper bound inclusive. LOWER and 
            define the range on FIELD for which the particular shading will plotted. Special values - and + 
            be used. Optional fields: N - Used if CODE is one of 1100 box outline; 1101-1105 hatchings; to set 
            otherwise the shading colour is determined from fillcode. SHRINK N - Amount in mm the shaded box 
            be shrunk inside the true cell outline. If missing and BOX=1 then shrink will be set to 2 times the 
            value. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        modcol: Undefined : Undefined
            Model colour field, used preferentially for plotting box outline, symbol and pattern 
            
            Default=Undefined
            Required=No

        Parameters:
        -----------

        charsize: 
            Default character size in millimetres (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        charsmin: 
            1.3 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        frame: 
            nan 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        shrink: 
            box shrink to avoid overplot, in mm (0.5) 
            Range=Undefined
            Values=Undefined
            Default=0.5
            Required=No
        annotate: 
            nan 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        anncol: 
            Default annotation colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        annpos: 
            Reference position for annotation offsets (1). If a Rotated Model is used then ANNPOS should be 
            to 1. 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=No
        box: 
            nan 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        boxcol: 
            Default box colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        shade: 
            nan 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plotted symbol. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : Cross (x) 94 : 
            95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment 
            Range=Undefined
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (0). 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        grcolr: 
            Preferred grid colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        xgridint: 
            X grid interval, 0 no X grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ygridint: 
            Y grid interval, 0 no Y grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zgridint: 
            Z grid interval, 0 no Z grid (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xgridndp: 
            X grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ygridndp: 
            Y grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        zgridndp: 
            Z grid number of decimal places (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        iconsize: 
            Icon size (25). 0 for no icon. 
            Range=Undefined
            Values=Undefined
            Default=25
            Required=No
        iconcol1: 
            Preferred icon box colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        iconcol2: 
            Preferred icon section colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        title: 
            Option Description 0 default title only 1 default plus prompted title 2 prompted title only 3 no 
            (1). 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        titcol: 
            Preferred title colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        titchs: 
            Preferred title character size (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        legend: 
            nan 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        legcol: 
            Preferred legend colour (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        legchs: 
            Preferred legend character size (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xscale: 
            X scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        vertexag: 
            Controls vertical exaggeration. This must be set to allow different scales. The default is 
            equal scales (1). If the input model is a Rotated Model then the process will always set VERTEXAG 
            1 and display a warning message. = 0 allows different scales for both axes determined by XSCALE 
            YSCALE if provided or else by filling the data area to the section limits. > 0 sets value of 
            = 1 forces equal scales. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "plotmx "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if section != "optional":
            command += " &section=" + section 

        if annfile != "optional":
            command += " &annfile=" + annfile 

        if legend != "optional":
            command += " &legend=" + legend 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if modcol != "optional":
            command += " *modcol=" + modcol 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if charsmin != "optional":
            command += " @charsmin=" + str(charsmin) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if frame != "optional":
            command += " @frame=" + str(frame) 

        if shrink != "optional":
            command += " @shrink=" + str(shrink) 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if anncol != "optional":
            command += " @anncol=" + str(anncol) 

        if annpos != "optional":
            command += " @annpos=" + str(annpos) 

        if box != "optional":
            command += " @box=" + str(box) 

        if boxcol != "optional":
            command += " @boxcol=" + str(boxcol) 

        if shade != "optional":
            command += " @shade=" + str(shade) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if grcolr != "optional":
            command += " @grcolr=" + str(grcolr) 

        if xgridint != "optional":
            command += " @xgridint=" + str(xgridint) 

        if ygridint != "optional":
            command += " @ygridint=" + str(ygridint) 

        if zgridint != "optional":
            command += " @zgridint=" + str(zgridint) 

        if xgridndp != "optional":
            command += " @xgridndp=" + str(xgridndp) 

        if ygridndp != "optional":
            command += " @ygridndp=" + str(ygridndp) 

        if zgridndp != "optional":
            command += " @zgridndp=" + str(zgridndp) 

        if iconsize != "optional":
            command += " @iconsize=" + str(iconsize) 

        if iconcol1 != "optional":
            command += " @iconcol1=" + str(iconcol1) 

        if iconcol2 != "optional":
            command += " @iconcol2=" + str(iconcol2) 

        if title != "optional":
            command += " @title=" + str(title) 

        if titcol != "optional":
            command += " @titcol=" + str(titcol) 

        if titchs != "optional":
            command += " @titchs=" + str(titchs) 

        if legend != "optional":
            command += " @legend=" + str(legend) 

        if legcol != "optional":
            command += " @legcol=" + str(legcol) 

        if legchs != "optional":
            command += " @legchs=" + str(legchs) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if vertexag != "optional":
            command += " @vertexag=" + str(vertexag) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotpa(self,
               in_='required',
               proto='required',
               desc='optional',
               plot='required',
               x='required',
               y='required',
               apvalue='optional',
               aptn='optional',
               pcode='optional',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               linecode=1,
               noclose=0,
               symbol=92,
               symsize=0,
               annotate=0,
               ndp=0,
               ndp1="optional",
               ndp2="optional",
               ndp3="optional",
               ndp4="optional",
               ndp5="optional",
               ptnannot=0,
               extdis=4,
               ptnsize=2.5,
               charsize=4,
               aspratio=0.9,
               nan=14,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTPA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. This must contain at least two numeric variables ( X and Y) for plotting against 
            other. 
            Required=Yes
        proto: Input
            The prototype plot file, as input. If this does not contain plot scale information, then this 
            be provided through the optional parameters XMIN , XMAX , YMIN , YMAX , XSCALE , YSCALE. 
            Required=Yes
        desc: Input
            Optional input description file for the case of ANNOTATE=3 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            The line X co-ordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            The line Y co-ordinate. 
            Default=Undefined
            Required=Yes
        apvalue: Undefined : Undefined
            Field used for PVALUE annotation. Default is PVALUE. 
            Default=Undefined
            Required=No
        aptn: Undefined : Undefined
            Field used for PTN annotation. Default is PTN. 
            Default=Undefined
            Required=No
        pcode: Undefined : Undefined
            Optional second perimeter keyfield. The field is of type Alphanumeric and 4 characters. Both 
            and PVALUE will be annotated by default unless APVALUE is specified. 
            Default=Undefined
            Required=No
        f1: Undefined : Undefined
            First annotation field for ANNOTATE=3 case 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second annotation field. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third annotation field. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth annotation field. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth annotation field. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        linecode: 
            Option Description 1 Narrow line. 2 Broad line. 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        noclose: 
            Option Description 0 joins the first and last points of the perimeter; =1 does not join the first 
            last points of the perimeter (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plots the symbol specified at each perimeter point (92). 91=o, 92=+, 93=x. 
            Range=Undefined
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        annotate: 
            Option Description 0 no annotation 1 annotate within a break in the perimeter boundary 2 
            along the inside of the perimeter boundary 3 annotate in the 'centre' of the perimeter All 
            to be plotted must be included in the Fn list taken from the DESC file. Default (0). 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        ndp: 
            Number of decimal places in the annotation if the annotation field is numeric (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ndp1: 
            Number of decimal places in the first annotation field F1. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndp2: 
            Number of decimal places in the second annotation field F2. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndp3: 
            Number of decimal places in the third annotation field F3. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndp4: 
            Number of decimal places in the fourth annotation field F4. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndp5: 
            Number of decimal places in the fifth annotation field F5. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ptnannot: 
            Option Description 0 no annotation; =1 annotate the perimeter with the perimeter point number 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        extdis: 
            distance along bisector of perimeter corners for annotation of perimeters. Negative to 
            outside the perimeter (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        ptnsize: 
            annotation size for perimeter point number labelling. (2.5) 
            Range=Undefined
            Values=Undefined
            Default=2.5
            Required=No
        charsize: 
            Character size in millimetres (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as "pen" number] for plot. (14) 
            Range=Undefined
            Values=Undefined
            Default=14
            Required=No
        xmin: 
            Minimum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotpa "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if desc != "optional":
            command += " &desc=" + desc 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if apvalue != "optional":
            command += " *apvalue=" + apvalue 

        if aptn != "optional":
            command += " *aptn=" + aptn 

        if pcode != "optional":
            command += " *pcode=" + pcode 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if noclose != "optional":
            command += " @noclose=" + str(noclose) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if ndp1 != "optional":
            command += " @ndp1=" + str(ndp1) 

        if ndp2 != "optional":
            command += " @ndp2=" + str(ndp2) 

        if ndp3 != "optional":
            command += " @ndp3=" + str(ndp3) 

        if ndp4 != "optional":
            command += " @ndp4=" + str(ndp4) 

        if ndp5 != "optional":
            command += " @ndp5=" + str(ndp5) 

        if ptnannot != "optional":
            command += " @ptnannot=" + str(ptnannot) 

        if extdis != "optional":
            command += " @extdis=" + str(extdis) 

        if ptnsize != "optional":
            command += " @ptnsize=" + str(ptnsize) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotpe(self,
               in_='required',
               proto='required',
               plot='required',
               afield='optional',
               sfield='optional',
               xp='optional',
               yp='optional',
               pcode='optional',
               symcode='optional',
               pfill='optional',
               linecode=1,
               noclose=0,
               symbol=92,
               symsize=0,
               annotate=0,
               axoffset=0,
               ayoffset=0,
               angle=0,
               ndp="optional",
               sylvalue="optional",
               sylscale=3,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               fillcode="optional",
               retrieval='optional'):

        """
        PLOTPE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE (numeric, explicit). 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        afield: Undefined : Undefined
            Field used for annotation. Default is PVALUE. 
            Default=Undefined
            Required=No
        sfield: Undefined : Undefined
            Field used for crest symbol plotting. 
            Default=Undefined
            Required=No
        xp: Undefined : Undefined
            Field containing X coordinate. 
            Default=Undefined
            Required=No
        yp: Undefined : Undefined
            Field containing Y coordinate. 
            Default=Undefined
            Required=No
        pcode: Undefined : Undefined
            The PCODE value will control the line code of each string. If used, it will override the LINECODE 
            
            Default=Undefined
            Required=No
        symcode: Undefined : Undefined
            The SYMCODE value will control the symbol used on each string. If used, it will override the 
            parameter. 
            Default=Undefined
            Required=No
        pfill: Undefined : Undefined
            The PFILL value will control the filling of each string. If used, it will override the FILLCODE 
            
            Default=Undefined
            Required=No

        Parameters:
        -----------

        linecode: 
            Option Description 1 narrow line 2 broad line 3 dashed line 4 dotted line 5 long dash, short dash; 
            dash dot 7 dash dot dot 8 zigzag line 
            Range=1,8
            Values=1,2,3,4,5,6,7,8
            Default=1
            Required=No
        noclose: 
            Option Description 0 joins the first and last points of the perimeter; =1 does not join the first 
            last points of the perimeter (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star . Can also be from the standard symbol set (codes 201 
            267)( ) 
            Range=91,267
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        annotate: 
            Option Description 0 no annotation; 1 annotate at top; 2 annotate at centre (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        axoffset: 
            Offset on the X axis of annotation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ayoffset: 
            Offset on the Y axis of annotation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        angle: 
            Angle of annotation from the X axis (0). 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        ndp: 
            Number of decimal places in the annotation if the annotation field is numeric. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        sylvalue: 
            Value of SFIELD field for plotting of crest symbol. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        sylscale: 
            Crest symbol line width in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        fillcode: 
            Fill code for filling closed perimeters. Option Description 1 - 64 solid colour fill 401 - 414 
            fill 3001 - 3030 hatch fill. 
            Range=1,3030
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotpe "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if afield != "optional":
            command += " *afield=" + afield 

        if sfield != "optional":
            command += " *sfield=" + sfield 

        if xp != "optional":
            command += " *xp=" + xp 

        if yp != "optional":
            command += " *yp=" + yp 

        if pcode != "optional":
            command += " *pcode=" + pcode 

        if symcode != "optional":
            command += " *symcode=" + symcode 

        if pfill != "optional":
            command += " *pfill=" + pfill 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if noclose != "optional":
            command += " @noclose=" + str(noclose) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if axoffset != "optional":
            command += " @axoffset=" + str(axoffset) 

        if ayoffset != "optional":
            command += " @ayoffset=" + str(ayoffset) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if sylvalue != "optional":
            command += " @sylvalue=" + str(sylvalue) 

        if sylscale != "optional":
            command += " @sylscale=" + str(sylscale) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if fillcode != "optional":
            command += " @fillcode=" + str(fillcode) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotpi(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               explode=0,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTPI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain fields X,Y,S1,S2,CODE (numeric, explicit) and XMIN, XMAX, 
            YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field to be plotted along X axis. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field to be plotted along Y axis. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        explode: 
            Distance in mm used to separate the pie slices (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        append: 
            Plot append flag.(0) If 1 then the new plot will be appended to the PLOT file if exists and is a 
            plot file. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotpi "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if explode != "optional":
            command += " @explode=" + str(explode) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotpx(self,
               in_='required',
               proto='required',
               in2='optional',
               plot='required',
               afield='optional',
               dash='optional',
               noanno='optional',
               auxanno='optional',
               annotate=0,
               linecode=1,
               noclose=0,
               symbol=92,
               symsize=0,
               axoffset=0,
               ayoffset=0,
               angle=0,
               ndp="optional",
               charsize=3,
               aspratio=0.9,
               nan=1,
               nointann=1,
               charsmin="optional",
               interval="optional",
               roadann=0,
               slopeann=1,
               slopecol=-1,
               benchcol=-1,
               ffanncol=-1,
               ffannsz=-1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTPX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE (numeric, explicit). 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes
        in2: Input
            Optional 2nd input perimeter file containing annotation and slope lines. Should contain std 
            fields, plus an optional alpha field for annotation (max 40 chars) 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        afield: Undefined : Undefined
            Field used for perimeter annotation. Default is PVALUE. May be alpha up to 8 characters. 
            Default=Undefined
            Required=No
        dash: Numeric : IN
            Field used for dashing patterns [1-4]. (0) 
            Default=0
            Required=No
        noanno: Undefined : Undefined
            Field used for to prevent annotation of a perimeter under a range of conditions: 0 = no effect 1 = 
            annotation at all on the perimeter 2 = no road annotion on the perimeter 3 = no annotation of the 
            if annotation lines are present and it is not intersected. 4 = combination of 2 
            Default=Undefined
            Required=No
        auxanno: Undefined : Undefined
            Field used for free form annotation in IN2. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        annotate: 
            Type of annotation. (0) 0 = no annotation 1 = annotate perimeter ends 2 = annotate perimeter 
            3 = inline perimeter annotation and/or use IN2 file to define annotation, slope 
            and free form annotations. 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        linecode: 
            Option Description 1 narrow line; =2 broad line (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        noclose: 
            Option Description 0 joins the first and last points of the perimeter; 1 does not join the first 
            last points of the perimeter (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plots the symbol specified at each perimeter point 91=o, 92=+, 93=x (92). 
            Range=Undefined
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        axoffset: 
            Offset on the X axis of annotation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ayoffset: 
            Offset on the Y axis of annotation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        angle: 
            Angle of annotation from the X axis (0). 
            Range=-360, 360
            Values=Undefined
            Default=0
            Required=No
        ndp: 
            Number of decimal places in the annotation if the annotation field is numeric. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 0 indicates use the colour field. Parameters specific to 
            
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        nointann: 
            0 = annotate non intersected perimeters (1) 1 = Do not annotate non intersected perimeters 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        charsmin: 
            0.8 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        interval: 
            Interval for perimeter annotation when no annotation lines, in mm. [default is 120] 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        roadann: 
            For annotate=3: (0) 0 = no annotation at road bends 1 = annotate contours at road bends, with line 
            = annotate contours at road bends, with cross 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        slopeann: 
            For annotate=3: (1) 1 = just plot slope lines 2 = plot slope lines 3 = plot lines 4 = plot lines, 
            
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        slopecol: 
            Colour of 'slope symbols', for annotate=3 (-1) -1 = same as default parameter 0 = use colour 
            if present >=1 = any other colour. Default is -1. 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        benchcol: 
            Colour of bench RL's, for annotate=3 (-1) -1 = same as default parameter 0 = use colour field if 
            >=1 = any other colour. Default is -1. 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        ffanncol: 
            Colour of free form annotation, for annotate=3 -1 = same as default parameter 0 = use colour 
            if present >=1 = any other colour. Default is -1. (-1) 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        ffannsz: 
            default character size of free form annotation, for annotate=3 (-1) Remaining parameters 
            Range=Undefined
            Values=Undefined
            Default=-1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotpx "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if in2 != "optional":
            command += " &in2=" + in2 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if afield != "optional":
            command += " *afield=" + afield 

        if dash != "optional":
            command += " *dash=" + dash 

        if noanno != "optional":
            command += " *noanno=" + noanno 

        if auxanno != "optional":
            command += " *auxanno=" + auxanno 

        if annotate != "optional":
            command += " @annotate=" + str(annotate) 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if noclose != "optional":
            command += " @noclose=" + str(noclose) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if axoffset != "optional":
            command += " @axoffset=" + str(axoffset) 

        if ayoffset != "optional":
            command += " @ayoffset=" + str(ayoffset) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if nointann != "optional":
            command += " @nointann=" + str(nointann) 

        if charsmin != "optional":
            command += " @charsmin=" + str(charsmin) 

        if interval != "optional":
            command += " @interval=" + str(interval) 

        if roadann != "optional":
            command += " @roadann=" + str(roadann) 

        if slopeann != "optional":
            command += " @slopeann=" + str(slopeann) 

        if slopecol != "optional":
            command += " @slopecol=" + str(slopecol) 

        if benchcol != "optional":
            command += " @benchcol=" + str(benchcol) 

        if ffanncol != "optional":
            command += " @ffanncol=" + str(ffanncol) 

        if ffannsz != "optional":
            command += " @ffannsz=" + str(ffannsz) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotsi(self,
               in_='required',
               proto='required',
               icon='optional',
               plot='required',
               x='required',
               y='required',
               layer='optional',
               nan='optional',
               field='optional',
               ndec='optional',
               charsize='optional',
               aspratio='optional',
               xoffset='optional',
               yoffset='optional',
               angle='optional',
               a='optional',
               symbol='optional',
               symsize='optional',
               s='optional',
               sfield='optional',
               scutmm='optional',
               scutval='optional',
               ivalue='optional',
               irotref='optional',
               iangle='optional',
               ixoffset='optional',
               iyoffset='optional',
               iscale='optional',
               iasprat='optional',
               ndec="optional",
               charsize="optional",
               aspratio="optional",
               xoffset="optional",
               yoffset="optional",
               angle="optional",
               a="optional",
               symbol="optional",
               symsize="optional",
               s="optional",
               scutmm="optional",
               scutval="optional",
               ivalue="optional",
               irotref="optional",
               iangle="optional",
               ixoffset="optional",
               iyoffset="optional",
               iscale="optional",
               iasprat="optional",
               layer="optional",
               nan="optional",
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTSI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes
        icon: Input
            Input icon file. An icon is a small number of plot file records that describe some feature or 
            The icon file may contain a number of icons. In addition to the normal DATAMINE plot file 
            the icon file will contain the explicit fields IVALUE, ITEXT, IXSIZE and IYSIZE. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field to specify distance along X axis for plotting symbol(s). 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field to specify distance along Y axis for plotting symbol(s). 
            Default=Undefined
            Required=Yes
        layer: Undefined : Undefined
            Plot layer 
            Default=Undefined
            Required=No
        nan: Undefined : Undefined
            Colour 
            Default=Undefined
            Required=No
        field: Undefined : Undefined
            Field to be annotated, or plotted 
            Default=Undefined
            Required=No
        ndec: Undefined : Undefined
            Decimal places for annotation. 
            Default=Undefined
            Required=No
        charsize: Undefined : Undefined
            Character size in millimetres. 
            Default=Undefined
            Required=No
        aspratio: Undefined : Undefined
            Aspect ratio, width / ht. for chars. 
            Default=Undefined
            Required=No
        xoffset: Undefined : Undefined
            Annotation offset from point in X in mm. 
            Default=Undefined
            Required=No
        yoffset: Undefined : Undefined
            Annotation offset from point in Y in mm. 
            Default=Undefined
            Required=No
        angle: Undefined : Undefined
            Annotation angle from X axis. 
            Default=Undefined
            Required=No
        a: Undefined : Undefined
            Annotation colour for plot. 
            Default=Undefined
            Required=No
        symbol: Undefined : Undefined
            Plotted symbol. 91=o, 92=+, 93=x. 
            Default=Undefined
            Required=No
        symsize: Undefined : Undefined
            Symbol size in millimetres. 0=none. 
            Default=Undefined
            Required=No
        s: Undefined : Undefined
            Symbol colour for plot. 
            Default=Undefined
            Required=No
        sfield: Undefined : Undefined
            Field to determine symbol size. 
            Default=Undefined
            Required=No
        scutmm: Undefined : Undefined
            Maximum size for symbol in mm. 
            Default=Undefined
            Required=No
        scutval: Undefined : Undefined
            Data value for maximum symbol size. 
            Default=Undefined
            Required=No
        ivalue: Undefined : Undefined
            Icon IVALUE to plot at X,Y. 
            Default=Undefined
            Required=No
        irotref: Undefined : Undefined
            Position of icon origin. 0..9 
            Default=Undefined
            Required=No
        iangle: Undefined : Undefined
            Rotation angle from X axis. 
            Default=Undefined
            Required=No
        ixoffset: Undefined : Undefined
            Icon X offset from point in millimetres. 
            Default=Undefined
            Required=No
        iyoffset: Undefined : Undefined
            Icon Y offset from point in millimetres. 
            Default=Undefined
            Required=No
        iscale: Undefined : Undefined
            Scaling factor. 
            Default=Undefined
            Required=No
        iasprat: Undefined : Undefined
            Aspect ratio, width / ht. for icons. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        ndec: 
            Decimal places for annotation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xoffset: 
            Annotation offset from point in X in mm. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yoffset: 
            Annotation offset from point in Y in mm. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        angle: 
            Annotation angle from X axis. 
            Range=-360, 360
            Values=Undefined
            Default=Undefined
            Required=No
        a: 
            Annotation colour for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        symbol: 
            Plotted symbol. 91=o, 92=+, 93=x. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        symsize: 
            Symbol size in millimetres. 0=none 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        s: 
            Symbol colour for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        scutmm: 
            Maximum size for symbol in mm. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        scutval: 
            Data value for maximum symbol size. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ivalue: 
            Icon IVALUE to plot at X,Y. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        irotref: 
            Position of icon origin. 0..9 
            Range=0,9
            Values=Undefined
            Default=Undefined
            Required=No
        iangle: 
            Rotation angle from X axis. 
            Range=-360, 360
            Values=Undefined
            Default=Undefined
            Required=No
        ixoffset: 
            Icon X offset from point in millimetres. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        iyoffset: 
            Icon Y offset from point in millimetres. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        iscale: 
            Scaling factor. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        iasprat: 
            Aspect ratio, width / ht. for icons. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        layer: 
            Plot layer 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        nan: 
            Colour 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotsi "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if icon != "optional":
            command += " &icon=" + icon 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if layer != "optional":
            command += " *layer=" + layer 

        if nan != "optional":
            command += " *nan=" + nan 

        if field != "optional":
            command += " *field=" + field 

        if ndec != "optional":
            command += " *ndec=" + ndec 

        if charsize != "optional":
            command += " *charsize=" + charsize 

        if aspratio != "optional":
            command += " *aspratio=" + aspratio 

        if xoffset != "optional":
            command += " *xoffset=" + xoffset 

        if yoffset != "optional":
            command += " *yoffset=" + yoffset 

        if angle != "optional":
            command += " *angle=" + angle 

        if a != "optional":
            command += " *a=" + a 

        if symbol != "optional":
            command += " *symbol=" + symbol 

        if symsize != "optional":
            command += " *symsize=" + symsize 

        if s != "optional":
            command += " *s=" + s 

        if sfield != "optional":
            command += " *sfield=" + sfield 

        if scutmm != "optional":
            command += " *scutmm=" + scutmm 

        if scutval != "optional":
            command += " *scutval=" + scutval 

        if ivalue != "optional":
            command += " *ivalue=" + ivalue 

        if irotref != "optional":
            command += " *irotref=" + irotref 

        if iangle != "optional":
            command += " *iangle=" + iangle 

        if ixoffset != "optional":
            command += " *ixoffset=" + ixoffset 

        if iyoffset != "optional":
            command += " *iyoffset=" + iyoffset 

        if iscale != "optional":
            command += " *iscale=" + iscale 

        if iasprat != "optional":
            command += " *iasprat=" + iasprat 

        if ndec != "optional":
            command += " @ndec=" + str(ndec) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if a != "optional":
            command += " @a=" + str(a) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if s != "optional":
            command += " @s=" + str(s) 

        if scutmm != "optional":
            command += " @scutmm=" + str(scutmm) 

        if scutval != "optional":
            command += " @scutval=" + str(scutval) 

        if ivalue != "optional":
            command += " @ivalue=" + str(ivalue) 

        if irotref != "optional":
            command += " @irotref=" + str(irotref) 

        if iangle != "optional":
            command += " @iangle=" + str(iangle) 

        if ixoffset != "optional":
            command += " @ixoffset=" + str(ixoffset) 

        if iyoffset != "optional":
            command += " @iyoffset=" + str(iyoffset) 

        if iscale != "optional":
            command += " @iscale=" + str(iscale) 

        if iasprat != "optional":
            command += " @iasprat=" + str(iasprat) 

        if layer != "optional":
            command += " @layer=" + str(layer) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotsk(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               z='required',
               length='required',
               a0='required',
               b0='required',
               bhid='required',
               from_='required',
               to='required',
               x1="optional",
               y1="optional",
               x2="optional",
               y2="optional",
               distance="optional",
               ndp="optional",
               angle=-,
               dhd=0,
               xoffset=0,
               yoffset=0,
               linecode=1,
               notick=0,
               noannot=0,
               anbothol=0,
               dtrwidth=0,
               ppsymbol=92,
               ppsymsiz=0,
               enexdhd=0,
               lincolfq=14,
               lincolch=14,
               lincolcq=14,
               dtrtypfq=4,
               dtrtypch=1,
               dtrtypcq=3,
               antickm=1,
               verbose=0,
               charsize=4,
               aspratio=0.9,
               nan=14,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTSK
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input drillhole file, in standard sample format. If there is a field in this file, then the given 
            number will be applied to each sample trace or barplot. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Numeric : IN
            Sample centre X co-ordinate. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Sample centre Y co-ordinate. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Sample centre Z co-ordinate (elevation). 
            Default=Z
            Required=Yes
        length: Numeric : IN
            Sample length. 
            Default=LENGTH
            Required=Yes
        a0: Numeric : IN
            Sample bearing. 
            Default=A0
            Required=Yes
        b0: Numeric : IN
            Sample dip. 
            Default=B0
            Required=Yes
        bhid: Numeric : IN
            Drillhole identifier. 
            Default=BHID
            Required=Yes
        from: Numeric : IN
            Downhole distance to sample top. 
            Default=FROM
            Required=Yes
        to: Numeric : IN
            Downhole distance to sample bottom. 
            Default=TO
            Required=Yes

        Parameters:
        -----------

        x1: 
            X co-ordinate of section line start. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        y1: 
            Y co-ordinate of section line start. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        x2: 
            X co-ordinate of section line end. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        y2: 
            Y co-ordinate of section line end. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        distance: 
            X1,Y1 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndp: 
            Number of decimal places for grade values. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        angle: 
            Angle for drillhole id, 0=horizontal, -90=vertically upwards, -= at angle of first sample 
            
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        dhd: 
            Plot downhole distances at given interval (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xoffset: 
            Annotation offset in mm. to the right of sample centre at rt. angles to sample (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yoffset: 
            Annotation offset in mm. up from sample centre along sample (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        linecode: 
            Line Type to be used to join each point. Default (1). Line Types: 1 : Solid line 2 : Bold line 3 : 
            line 4 : Dotted line 5 : Dot-Dash line 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=No
        notick: 
            Option Description 1 Suppress sample tick marks. (0). No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        noannot: 
            Option Description 1 Suppress BHID annotation (0). No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        anbothol: 
            Option Description 1 BHID annotation at bottom of hole (0). No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dtrwidth: 
            Double trace width in mm. when the trace is in the section, 0 = single trace. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ppsymbol: 
            Symbol at section plane Pierce Point (92). 
            Range=Undefined
            Values=Undefined
            Default=92
            Required=No
        ppsymsiz: 
            Pierce Point symbol size in mm. 0= no symbol (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        enexdhd: 
            Annotate down the hole distance and distance from the section line at entry and exit. section 
            and exit. (0) (0) = No annotation. 1 = Annotation. Distance from the secton line is positive on 
            side away from the viewer. -1 = Annotation. Distance from the section line is negative on the 
            away from the viewer. 
            Range=-1,1
            Values=-1,1
            Default=0
            Required=No
        lincolfq: 
            Trace colour in section far quarter. (14) 
            Range=Undefined
            Values=Undefined
            Default=14
            Required=No
        lincolch: 
            Trace colour in section centre half. (14) 
            Range=Undefined
            Values=Undefined
            Default=14
            Required=No
        lincolcq: 
            Trace colour in section close quarter. (14) 
            Range=Undefined
            Values=Undefined
            Default=14
            Required=No
        dtrtypfq: 
            Double trace line type when the trace is in the far quarter of the section. 1= Solid line. 2= Broad 
            line. 3= Long dash 3 mm. dash, 3 mm. intervals. 4= Dots, 1 dot per mm. (4) 
            Range=1,4
            Values=1,2,3,4
            Default=4
            Required=No
        dtrtypch: 
            Double trace line type when the trace is in the central half of the section. 1= Solid line. 2= 
            solid line. 3= Long dash 3 mm. dash, 3 mm. intervals. 4= Dots, 1 dot per mm. (1) 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        dtrtypcq: 
            Double trace line type when the trace is in the closest quarter of the section. 1= Solid line. 2= 
            solid line. 3= Long dash 3 mm. dash, 3 mm. intervals. 4= Dots, 1 dot per mm. (3) 
            Range=1,4
            Values=1,2,3,4
            Default=3
            Required=No
        antickm: 
            Tick marks to delineate annotations. These are single sided ticks, with a length equal to 
            1= ticks, 0= no ticks. (1) 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        verbose: 
            0= Annotate only when the value changes. 1= Annotate all intervals even if the value of 
            intervals is similar. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        charsize: 
            Character size in millimetres (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (14). 
            Range=Undefined
            Values=Undefined
            Default=14
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot [Suggest 0]. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be 
            if this information is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot [Suggest section length as defined by X1 , Y1 , X2 , Y2]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot [Lowest Z value]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot [Highest Z value]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotsk "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required field error check

        if length == "required":
            raise ValueError("length is required.")

        command += " *length=" + length 


        # Required field error check

        if a0 == "required":
            raise ValueError("a0 is required.")

        command += " *a0=" + a0 


        # Required field error check

        if b0 == "required":
            raise ValueError("b0 is required.")

        command += " *b0=" + b0 


        # Required field error check

        if bhid == "required":
            raise ValueError("bhid is required.")

        command += " *bhid=" + bhid 


        # Required field error check

        if from_ == "required":
            raise ValueError("from_ is required.")

        command += " *from_=" + from_ 


        # Required field error check

        if to == "required":
            raise ValueError("to is required.")

        command += " *to=" + to 


        # Required parameter error check

        if x1 == "required":
            raise ValueError("x1 is required.")

        command += " @x1=" + str(x1) 


        # Required parameter error check

        if y1 == "required":
            raise ValueError("y1 is required.")

        command += " @y1=" + str(y1) 


        # Required parameter error check

        if x2 == "required":
            raise ValueError("x2 is required.")

        command += " @x2=" + str(x2) 


        # Required parameter error check

        if y2 == "required":
            raise ValueError("y2 is required.")

        command += " @y2=" + str(y2) 


        # Required parameter error check

        if distance == "required":
            raise ValueError("distance is required.")

        command += " @distance=" + str(distance) 


        # Required parameter error check

        if ndp == "required":
            raise ValueError("ndp is required.")

        command += " @ndp=" + str(ndp) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if dhd != "optional":
            command += " @dhd=" + str(dhd) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if notick != "optional":
            command += " @notick=" + str(notick) 

        if noannot != "optional":
            command += " @noannot=" + str(noannot) 

        if anbothol != "optional":
            command += " @anbothol=" + str(anbothol) 

        if dtrwidth != "optional":
            command += " @dtrwidth=" + str(dtrwidth) 

        if ppsymbol != "optional":
            command += " @ppsymbol=" + str(ppsymbol) 

        if ppsymsiz != "optional":
            command += " @ppsymsiz=" + str(ppsymsiz) 

        if enexdhd != "optional":
            command += " @enexdhd=" + str(enexdhd) 

        if lincolfq != "optional":
            command += " @lincolfq=" + str(lincolfq) 

        if lincolch != "optional":
            command += " @lincolch=" + str(lincolch) 

        if lincolcq != "optional":
            command += " @lincolcq=" + str(lincolcq) 

        if dtrtypfq != "optional":
            command += " @dtrtypfq=" + str(dtrtypfq) 

        if dtrtypch != "optional":
            command += " @dtrtypch=" + str(dtrtypch) 

        if dtrtypcq != "optional":
            command += " @dtrtypcq=" + str(dtrtypcq) 

        if antickm != "optional":
            command += " @antickm=" + str(antickm) 

        if verbose != "optional":
            command += " @verbose=" + str(verbose) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotsx(self,
               in1='required',
               proto='required',
               in2='optional',
               in3='optional',
               annfile='optional',
               plot='required',
               sampcolr='optional',
               x1="optional",
               y1="optional",
               x2="optional",
               y2="optional",
               ndp="optional",
               distance="optional",
               dminus="optional",
               dplus="optional",
               optmse=0,
               pltype=1,
               barann=0,
               plview=0,
               pldist="optional",
               blevel="optional",
               trace=1,
               tiklen=1,
               tiktyp=1,
               side=1,
               dhd=0,
               dhdist=0,
               dhdoff=0,
               eoh=0,
               xoffset=0,
               yoffset=0,
               bhsize="optional",
               bhcol="optional",
               bhang="optional",
               bhpos=1,
               trcol=-1,
               tikcol=-1,
               anncol=-1,
               barcol=-1,
               filgap=0,
               gaplen=1,
               fill=0,
               charsize=4,
               charsmin="optional",
               aspratio=0.9,
               append=0,
               nan=1,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTSX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input drillhole file, in standard sample format. If there is a field in this file, then the given 
            number will be applied to each sample trace or barplot. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes
        in2: Input
            Optional input collar file, in standard collar format. 
            Required=No
        in3: Input
            Optional input survey file, in standard survey format. 
            Required=No
        annfile: Input
            Optional annotation input file for specifying annotations as an alternative to the 
            input. If specified then PLTYPE , XOFFSET , YOFFSET are ignored. Compulsory fields: FIELD A8- 
            to annotate. TYPE N - Annotation type; 1 = annotate relative to trace; 2 = bar plot; 3 = annotate 
            to previous bar plot; 4 = line plot; SIDE N - Side of trace 1=RHS,2=LHS. Optional fields: 
            N - Annotate character size. N - Annotate/bar/line colour. XOFFSET N - Offset perpendicular to 
            YOFFSET N - Offset along trace. NDP N - Number of decimal places. For bars: CUTVAL N - Value of 
            for maximum bar. CUTMM N - Optional height of maximum bar, default is 10mm. Optional fields if 
            is numeric: LOWER N - Lower bound non-inclusive. UPPER N - Upper bound inclusive. LOWER and 
            define the range on FIELD for which the particular annotation will plotted. Special values - 
            + may be used. For TYPE = 2 and 4 offsets apply to base of bar or line axis. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        sampcolr: Undefined : Undefined
            Sample colour field, used preferentially for plotting of trace, assays, ticks and barplots. 
            
            Default=Undefined
            Required=No

        Parameters:
        -----------

        x1: 
            X co-ordinate of section line start. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        y1: 
            Y co-ordinate of section line start. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        x2: 
            X co-ordinate of section line end. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        y2: 
            Y co-ordinate of section line end. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ndp: 
            Number of decimal places for grade values. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        distance: 
            Maximum projection distance to section. Must be specifed unless DPLUS and DMINUS are both 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            Negative distance from section plane. If not specified then DISTANCE will be used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dplus: 
            Positive distance from section plane. If not specified then DISTANCE will be used. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        optmse: 
            Level of hole trace filling and smoothing: 0=none; 1=join gaps; 2=split long samples 
            splitting; (0) 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        pltype: 
            Type of plot: 0=plot trace only; 1=annotate sample values; 2=single side barplot; 3=double 
            barplot; 4=line plot; (1) 
            Range=0,4
            Values=0,1,2,3,4
            Default=1
            Required=No
        barann: 
            Annotation outside bars on barplot type plots: 0=no; 1=yes; (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        plview: 
            Plot orientation: 0=standard section plot; 1=section with plan window; 2=plan plot; (0) 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        pldist: 
            Plan window distance for PLVIEW=1 only. default = 2 DISTANCE 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        blevel: 
            Bench level for use with PLVIEW=2 only. [R.L. of plan plot] 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        trace: 
            0 = no hole trace or EOH tick; 1 = plot trace; 2 = plot trace with symbol marking intersection with 
            plane; 3 = as 1 above with thick line code 1002; 4 = as 2 above with thick line code 1002; 
            Range=0,4
            Values=0,1,2,3,4
            Default=1
            Required=No
        tiklen: 
            Tick length each side of hole; (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        tiktyp: 
            Tick positioning; 0=no ticks; 1=both sides; 2=RHS; 3=LHS; (1) 
            Range=0,3
            Values=0,1,2,3
            Default=1
            Required=No
        side: 
            Side of hole to use in annotation or barplots. 1=RHS; 2=LHS; (1) 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        dhd: 
            Plot downhole distance or distance to section 0=none; 1=plot downhole distance; 2=plot 
            of sample from section; 3=both; (0) 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        dhdist: 
            Plot DHD parameter[s] at given interval [integer] (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        dhdoff: 
            DHD parameter[s] offset in millimetres from hole trace at the right angles to sample. Value > 0 
            h. side, <0 left h. side. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        eoh: 
            End of hole annotation: 0=nothing; 1='EOH'; 2=downhole distance; 3=both 1 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        xoffset: 
            Offset in millimetres from sample centre of annotation at rt. angles to sample (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        yoffset: 
            Offset in millimetres from sample centre of annotation along sample (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        bhsize: 
            Borehole id annotation size: 0=suppress; default= CHARSIZE value; 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bhcol: 
            Borehole id annotation colour: default= value; 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bhang: 
            Angle for drillhole id, 0=horizontal, -90=vertically upwards, -= in line with hole trace; += 
            90 degrees to hole trace. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bhpos: 
            Borehole id position: 1=top of hole; 2=bottom of hole; (1) 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        trcol: 
            Colour of trace: -1=same as default parameter; 0=use colour field if present; >=1 any other 
            (-1) 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        tikcol: 
            Colour of ticks: -1=same as default parameter; 0=use colour field if present; >=1 any other 
            (-1) 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        anncol: 
            Colour of assay [or other] annotation down the side of the hole: -1=same as default parameter; 
            colour field if present; >=1 any other colour. (-1) 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        barcol: 
            Colour of bars: -1=same as default parameter; 0=use colour field if present; >=1 any other 
            (-1) 
            Range=-1,64
            Values=Undefined
            Default=-1
            Required=No
        filgap: 
            Controls filling of gaps and splitting of long samples/gaps in straight [1 survey pt] holes: 
            not filled; 1=gaps filled; 2=enables splitting according to GAPLEN even if hole is straight. 
            
            Range=0,1,2
            Values=0,1,2
            Default=0
            Required=No
        gaplen: 
            Length to split long samples or gaps to for more accurate plotting for OPTMSE=2. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        fill: 
            Line density in mm for pseudo colour fill of sample barplot. Zero for no fill (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        charsize: 
            Character size in millimetres (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        charsmin: 
            Minimum annotation character size. If space available for annotation is less than CHARSMIN 
            annotation is not plotted at all. Otherwise the characters are shrunk to fit in available 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, assuming it 
            and is a proper plot file. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xmin: 
            Minimum value of X for plot [Suggest 0]. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be 
            if this information is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot [Suggest section length as defined by X1 , Y1 , X2 , Y2]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot [Lowest Z value]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot [Highest Z value]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotsx "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if in2 != "optional":
            command += " &in2=" + in2 

        if in3 != "optional":
            command += " &in3=" + in3 

        if annfile != "optional":
            command += " &annfile=" + annfile 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if sampcolr != "optional":
            command += " *sampcolr=" + sampcolr 


        # Required parameter error check

        if x1 == "required":
            raise ValueError("x1 is required.")

        command += " @x1=" + str(x1) 


        # Required parameter error check

        if y1 == "required":
            raise ValueError("y1 is required.")

        command += " @y1=" + str(y1) 


        # Required parameter error check

        if x2 == "required":
            raise ValueError("x2 is required.")

        command += " @x2=" + str(x2) 


        # Required parameter error check

        if y2 == "required":
            raise ValueError("y2 is required.")

        command += " @y2=" + str(y2) 


        # Required parameter error check

        if ndp == "required":
            raise ValueError("ndp is required.")

        command += " @ndp=" + str(ndp) 

        if distance != "optional":
            command += " @distance=" + str(distance) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if optmse != "optional":
            command += " @optmse=" + str(optmse) 

        if pltype != "optional":
            command += " @pltype=" + str(pltype) 

        if barann != "optional":
            command += " @barann=" + str(barann) 

        if plview != "optional":
            command += " @plview=" + str(plview) 

        if pldist != "optional":
            command += " @pldist=" + str(pldist) 

        if blevel != "optional":
            command += " @blevel=" + str(blevel) 

        if trace != "optional":
            command += " @trace=" + str(trace) 

        if tiklen != "optional":
            command += " @tiklen=" + str(tiklen) 

        if tiktyp != "optional":
            command += " @tiktyp=" + str(tiktyp) 

        if side != "optional":
            command += " @side=" + str(side) 

        if dhd != "optional":
            command += " @dhd=" + str(dhd) 

        if dhdist != "optional":
            command += " @dhdist=" + str(dhdist) 

        if dhdoff != "optional":
            command += " @dhdoff=" + str(dhdoff) 

        if eoh != "optional":
            command += " @eoh=" + str(eoh) 

        if xoffset != "optional":
            command += " @xoffset=" + str(xoffset) 

        if yoffset != "optional":
            command += " @yoffset=" + str(yoffset) 

        if bhsize != "optional":
            command += " @bhsize=" + str(bhsize) 

        if bhcol != "optional":
            command += " @bhcol=" + str(bhcol) 

        if bhang != "optional":
            command += " @bhang=" + str(bhang) 

        if bhpos != "optional":
            command += " @bhpos=" + str(bhpos) 

        if trcol != "optional":
            command += " @trcol=" + str(trcol) 

        if tikcol != "optional":
            command += " @tikcol=" + str(tikcol) 

        if anncol != "optional":
            command += " @anncol=" + str(anncol) 

        if barcol != "optional":
            command += " @barcol=" + str(barcol) 

        if filgap != "optional":
            command += " @filgap=" + str(filgap) 

        if gaplen != "optional":
            command += " @gaplen=" + str(gaplen) 

        if fill != "optional":
            command += " @fill=" + str(fill) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if charsmin != "optional":
            command += " @charsmin=" + str(charsmin) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if append != "optional":
            command += " @append=" + str(append) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotti(self,
               proto='required',
               plot='required',
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTTI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotti "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plottr(self,
               wiretr='required',
               wirept='required',
               proto='required',
               plot='required',
               linecode=1,
               nan=1,
               append=0,
               symbol=92,
               symsize=5,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTTR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Input wireframe triangle file. 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        linecode: 
            Line Type to be used to join each point. Default (1). Line Types: 1 : Solid line 2 : Bold line 3 : 
            line 4 : Dotted line 5 : Dot-Dash line 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, assuming it 
            and is a proper plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment 
            Range=91,98
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (5). 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=5
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plottr "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plottx(self,
               in_='required',
               proto='required',
               plot='required',
               xstart="optional",
               ystart="optional",
               angle=0,
               nobox=0,
               margin=3,
               space="optional",
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               retrieval='optional'):

        """
        PLOTTX
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input text file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        xstart: 
            X position, in millimetres, for start of text (top left hand corner of box). 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ystart: 
            Y position, in millimetres, for start of text (top left hand corner of box). 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        angle: 
            Angle of text clockwise from the X axis (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        nobox: 
            Option Description 0 a box is plotted around the text, =1 a box is not No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        margin: 
            The margin, in millimetres, between the text and the surrounding box (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        space: 
            A word which if encountered as the first word in a text record is interpreted as a blank line. Must 
            between quotes; e.g '----'. Default is ' '. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "plottx "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required parameter error check

        if xstart == "required":
            raise ValueError("xstart is required.")

        command += " @xstart=" + str(xstart) 


        # Required parameter error check

        if ystart == "required":
            raise ValueError("ystart is required.")

        command += " @ystart=" + str(ystart) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if nobox != "optional":
            command += " @nobox=" + str(nobox) 

        if margin != "optional":
            command += " @margin=" + str(margin) 

        if space != "optional":
            command += " @space=" + str(space) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotva(self,
               in_='required',
               proto='required',
               plot='required',
               x='required',
               y='required',
               symcode='optional',
               angle=0,
               symbol=92,
               symsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        PLOTVA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. This must contain X and Y fields and at least one value field. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field to be plotted along X axis. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field to be plotted along Y axis. 
            Default=Undefined
            Required=Yes
        symcode: Undefined : Undefined
            The SYMCODE value will control the symbol used on each point. If used, it will override the 
            parameter. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        angle: 
            Angle for symbol plotting in degrees from the X axis.(0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        symbol: 
            Plotted symbol at each point. Default (92). Point symbol number 91 : Circle (o) 92 : Cross (+) 93 : 
            (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star 98 : Pie Segment. Can also be from the standard 
            set (codes 201 - 267) ( ) 
            Range=91,267
            Values=Undefined
            Default=92
            Required=No
        symsize: 
            Symbol size in millimetres (3). Set to 0 for no symbol. 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "plotva "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if symcode != "optional":
            command += " *symcode=" + symcode 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if symbol != "optional":
            command += " @symbol=" + str(symbol) 

        if symsize != "optional":
            command += " @symsize=" + str(symsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def plotws(self,
               wiretr='required',
               wirept='required',
               proto='required',
               section='optional',
               plot='required',
               linecode=1001,
               frame=0,
               charsize=4,
               aspratio=0.9,
               nan=1,
               append=0,
               xscale="optional",
               yscale="optional",
               vertexag=1,
               retrieval='optional'):

        """
        PLOTWS
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Input wireframe triangle file. 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2 and CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. 
            Required=Yes
        section: Input
            Optional section definition file. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        linecode: 
            (1001) Line code for plotting - 1001 faint, or 1002 bold. 
            Range=1001, 1006
            Values=Undefined
            Default=1001
            Required=No
        frame: 
            (0) Set to 1 if frame required around plot. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        charsize: 
            Character size in millimetres (4). 
            Range=Undefined
            Values=Undefined
            Default=4
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xscale: 
            X scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimetre. If specified here or in PROTO this value will override 
            limits. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        vertexag: 
            Controls vertical exaggeration. This must be set to allow different scales. The default is 
            equal scales (1). = 0 allows different scales for both axes determined by XSCALE and YSCALE if 
            or else by filling the data area to the section limits. > 0 sets value of XSCALE/YSCALE. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "plotws "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 

        if section != "optional":
            command += " &section=" + section 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if linecode != "optional":
            command += " @linecode=" + str(linecode) 

        if frame != "optional":
            command += " @frame=" + str(frame) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if vertexag != "optional":
            command += " @vertexag=" + str(vertexag) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pltabl(self,
               in_='required',
               plot='required',
               retrieval='optional'):

        """
        PLTABL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "pltabl "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def pltlay(self,
               proto='optional',
               icon='optional',
               plot='required',
               asize=0,
               xscale="optional",
               yscale="optional",
               unit=0,
               append=1,
               retrieval='optional'):

        """
        PLTLAY
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype. 
            Required=No
        icon: Plot
            Icon file. An icon is a small number of plot file records that describe some feature that is 
            required on mine plans, e.g. mine shafts. This input/output icon file may contain a number of 
            icons. In addition to the normal DATAMINE plot file fields, the icon file will contain the 
            fields IVALUE, ITEXT, IXSIZE and IYSIZE. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. This file will contain all of the plot data that has been generated during the 
            operation of PLTLAY. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        asize: 
            Type of A size paper, for initial plot size if no prototype file supplied. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        xscale: 
            Initial X plot scale factor if no prototype file supplied. E.g. enter 1000 for a scale of 1:1000. 
            that user data units of metres are assumed; if metres are not the unit, then the scale must be 
            by factor f, where f=no. of metres in 1 user data unit [e.g. 0.3048 for feet]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Initial Y plot scale factor if no prototype file supplied. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        unit: 
            This parameter indicates the type of data that will be brought into the process. The default is 
            (0) and a unit value of 1 indicates user units of imperial feet. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        append: 
            If an input plot prototype file has been supplied, any plot records in this file may 
            copied to the final output plot file by setting this parameter to 1.(1) 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "pltlay "

        if proto != "optional":
            command += " &proto=" + proto 

        if icon != "optional":
            command += " &icon=" + icon 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if asize != "optional":
            command += " @asize=" + str(asize) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if unit != "optional":
            command += " @unit=" + str(unit) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def polreg(self,
               in_='required',
               out='optional',
               x='required',
               y='required',
               order=1,
               print_=0,
               retrieval='optional'):

        """
        POLREG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing the coefficients. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X co-ordinate of the sample data. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y co-ordinate of the sample data. 
            Default=Y
            Required=Yes

        Parameters:
        -----------

        order: 
            Order of the polynomial required (1,2,3,4 or 5). 
            Range=1,5
            Values=1,2,3,4,5
            Default=1
            Required=Yes
        print: 
            If set to 1 then a table of estimated values, based on the regression equation, will be written to 
            Command window. The default is (0), do not create the table. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "polreg "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if out != "optional":
            command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required parameter error check

        if order == "required":
            raise ValueError("order is required.")

        command += " @order=" + str(order) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def polydc(self,
               in_='required',
               srcparm='optional',
               wiretr='optional',
               wirept='optional',
               out='required',
               model='optional',
               polytr='optional',
               polypt='optional',
               x='required',
               y='required',
               z='required',
               wtfield='optional',
               zone='optional',
               compleng=0,
               xinc="optional",
               yinc="optional",
               zinc="optional",
               srefnum="optional",
               radius=100,
               maxgrdpt=10,
               retrieval='optional'):

        """
        POLYDC
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Undefined 
            Required=Yes
        srcparm: Input
            Undefined 
            Required=No
        wiretr: Input
            Wireframe Triangle 
            Required=No
        wirept: Input
            Wireframe Points 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output file containing declustered weights. This will be a copy of the IN file, but will also 
            the field DCWEIGHT. 
            Required=Yes
        model: Undefined
            Output model file containing sample identifier for each grid point. 
            Required=No
        polytr: Wireframe Triangle
            Output wireframe triangle file describing polyhedra. Using this option can increase 
            time VERY significantly. Do not use if more than a few hundred samples in the IN file. 
            Required=No
        polypt: Wireframe Points
            Output wireframe points file describing polyhedra. Using this option can increase 
            time VERY significantly. Do not use if more than a few hundred samples in the IN file. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of sample data. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y coordinate of sample data. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Z coordinate of sample data. 
            Default=Z
            Required=Yes
        wtfield: Undefined : Undefined
            Field to be used for calculating declustered weights. This ensures that records containing 
            data values for that field will be ignored. If a WTFIELD field is not specified then the Z field is 
            
            Default=Undefined
            Required=No
        zone: Undefined : Undefined
            Field in wireframe triangle file identifying different zones. If selected then a set of 
            will be calculated for each zone. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        compleng: 
            Composite length for discretising samples. 
            Range=0,+
            Values=Undefined
            Default=0
            Required=No
        xinc: 
            Grid increment size in X. If not specified a default is calculated with XINC, YINC, ZINC being 
            
            Range=0.0001,+
            Values=Undefined
            Default=Undefined
            Required=No
        yinc: 
            Grid increment size in Y. If not specified a default is calculated with XINC, YINC, ZINC being 
            
            Range=0.0001,+
            Values=Undefined
            Default=Undefined
            Required=No
        zinc: 
            Grid increment size in Z. If not specified a default is calculated with XINC, YINC, ZINC being 
            
            Range=0.0001,+
            Values=Undefined
            Default=Undefined
            Required=No
        srefnum: 
            Search volume reference number. Only used if a search volume file has been selected. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        radius: 
            Search radius for calculating weights. Only used if a search volume file has not been selected. 
            Range=0.0001,+
            Values=Undefined
            Default=100
            Required=No
        maxgrdpt: 
            Maximum number of grid points (* 1,000,000). The process will terminate if more than the 
            will be created. 
            Range=1,100
            Values=Undefined
            Default=10
            Required=No
        """


        command = "polydc "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if srcparm != "optional":
            command += " &srcparm=" + srcparm 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if model != "optional":
            command += " &model=" + model 

        if polytr != "optional":
            command += " &polytr=" + polytr 

        if polypt != "optional":
            command += " &polypt=" + polypt 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if wtfield != "optional":
            command += " *wtfield=" + wtfield 

        if zone != "optional":
            command += " *zone=" + zone 

        if compleng != "optional":
            command += " @compleng=" + str(compleng) 

        if xinc != "optional":
            command += " @xinc=" + str(xinc) 

        if yinc != "optional":
            command += " @yinc=" + str(yinc) 

        if zinc != "optional":
            command += " @zinc=" + str(zinc) 

        if srefnum != "optional":
            command += " @srefnum=" + str(srefnum) 

        if radius != "optional":
            command += " @radius=" + str(radius) 

        if maxgrdpt != "optional":
            command += " @maxgrdpt=" + str(maxgrdpt) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ppqqplot(self,
                 in1='required',
                 in2='required',
                 ppout='optional',
                 ppplot='optional',
                 qqout='optional',
                 qqplot='optional',
                 value1='required',
                 value2='required',
                 weight1='optional',
                 weight2='optional',
                 key='optional',
                 minimum1=0,
                 minimum2=0,
                 maximum1="optional",
                 maximum2="optional",
                 plottype=1,
                 binsize=1,
                 diagonal=1,
                 progress=1,
                 display=1,
                 retrieval='optional'):

        """
        PPQQPLOT
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First input data file. There must be a minimum of 5 records. 
            Required=Yes
        in2: Input
            Second input data file. This can be the same as the first input file IN1. There must be a minimum of 
            records. 
            Required=Yes

        Output Files:
        -------------

        ppout: Table
            Output table for PP plot. At least one of the four output files must be specified. 
            Required=No
        ppplot: Plot
            Output plot file for PP plot. At least one of the four output files must be specified. 
            Required=No
        qqout: Table
            Output table for QQ plot. At least one of the four output files must be specified. 
            Required=No
        qqplot: Plot
            Output plot file for PP plot. At least one of the four output files must be specified. 
            Required=No

        Fields:
        -------

        value1: Undefined : Undefined
            Field in input file IN1 to be plotted along the X axis of the PP and QQ plot. 
            Default=Undefined
            Required=Yes
        value2: Undefined : Undefined
            Field in input file IN2 to be plotted along the Y axis of the PP and QQ plot. 
            Default=Undefined
            Required=Yes
        weight1: Undefined : Undefined
            Weighting field for VALUE1 in input file IN1. 
            Default=Undefined
            Required=No
        weight2: Undefined : Undefined
            Weighting field for VALUE2 in input file IN2. 
            Default=Undefined
            Required=No
        key: Undefined : Undefined
            Key field in the input IN1 and optionally IN2 file. The plot will include a line or set of symbols 
            each key field value. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        minimum1: 
            Minimum value of VALUE1 field in input file IN1. Values below the minimum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        minimum2: 
            Minimum value of VALUE2 field in input file IN2. Values below the minimum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maximum1: 
            Maximum value of VALUE1 field in input file IN1. Values above the maximum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maximum2: 
            Maximum value of VALUE2 field in input file IN2. Values above the maximum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        plottype: 
            Flag to specify plot type (1); =1 : Scatter plot, using symbol X; =2 : Line plot 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        binsize: 
            Bin size for PP plot. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        diagonal: 
            Flag to control whether the diagonal (45 degree line) should be included on the plot (1). =0 : no 
            line; =1 : include diagonal line. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        progress: 
            Flag to control amount of output written to Output Window (1). =0 : no output; =1 : progress 
            
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        display: 
            Flag to select whether or not to display plot files. =0 : do not display plot files. =1 : display 
            files. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "ppqqplot "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 

        if ppout != "optional":
            command += " &ppout=" + ppout 

        if ppplot != "optional":
            command += " &ppplot=" + ppplot 

        if qqout != "optional":
            command += " &qqout=" + qqout 

        if qqplot != "optional":
            command += " &qqplot=" + qqplot 


        # Required field error check

        if value1 == "required":
            raise ValueError("value1 is required.")

        command += " *value1=" + value1 


        # Required field error check

        if value2 == "required":
            raise ValueError("value2 is required.")

        command += " *value2=" + value2 

        if weight1 != "optional":
            command += " *weight1=" + weight1 

        if weight2 != "optional":
            command += " *weight2=" + weight2 

        if key != "optional":
            command += " *key=" + key 

        if minimum1 != "optional":
            command += " @minimum1=" + str(minimum1) 

        if minimum2 != "optional":
            command += " @minimum2=" + str(minimum2) 

        if maximum1 != "optional":
            command += " @maximum1=" + str(maximum1) 

        if maximum2 != "optional":
            command += " @maximum2=" + str(maximum2) 

        if plottype != "optional":
            command += " @plottype=" + str(plottype) 

        if binsize != "optional":
            command += " @binsize=" + str(binsize) 

        if diagonal != "optional":
            command += " @diagonal=" + str(diagonal) 

        if progress != "optional":
            command += " @progress=" + str(progress) 

        if display != "optional":
            command += " @display=" + str(display) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def promod(self,
               in_='required',
               out='required',
               remnants='optional',
               key1='optional',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               density='optional',
               density=1.0,
               xincmin="optional",
               yincmin="optional",
               zincmin="optional",
               overlap=0,
               optimise=2,
               tol=0.001,
               accuracy=0.001,
               print_=0,
               retrieval='optional'):

        """
        PROMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, and IJK. May also contain value fields. It must be sorted by IJK. 
            Required=Yes

        Output Files:
        -------------

        out: Block Model
            Output model. Will contain all the fields held in the IN file. It will be sorted by IJK. 
            Required=Yes
        remnants: Block Model
            Optional output model file holding remnants of any subcell outside its parent cell. 
            Required=No

        Fields:
        -------

        key1: Undefined : Undefined
            Field from the IN file which must be the same for two or more subcells to be combined if OPTIMISE=1 
            2. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Second field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Third field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Fourth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Fifth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Sixth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Seventh field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Eighth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Ninth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Tenth field from the IN file field which must be the same for subcells to be combined if 
            or 2. 
            Default=Undefined
            Required=No
        density: Undefined : Undefined
            Field to weight values in OUT when combining subcells if OPTIMISE=1 or 2. If a field called 
            exists in the IN file it will be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        density: 
            Density value used if DENSITY field value in a sub-cell is absent. Default (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        xincmin: 
            Defines minimum subcell dimension in X. Any subcell with a dimension less than this will be 
            (if OPTIMISE=1 or 2, and if possible) with an adjacent subcell regardless of key field{s} 
            Default is parent cell X size / 1000. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yincmin: 
            Defines minimum subcell dimension in Y. Any subcell with a dimension less than this will be 
            (if OPTIMISE=1 or 2, and if possible) with an adjacent subcell regardless of key field{s} 
            Default is parent cell Y size / 1000. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        zincmin: 
            Defines minimum subcell dimension in Z. Any subcell with a dimension less than this will be 
            (if OPTIMISE=1 or 2, and if possible) with an adjacent subcell regardless of key field{s} 
            Default is parent cell Z size / 1000. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        overlap: 
            Overlap checking and resolution. Default (0). Option Description 0 - Existence of an overlap 
            the IN model will be 1 - Existence of an overlap in the model will be reported. 2 - Overlaps will be 
            according to ADDMOD No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        optimise: 
            Optimise combination of subcells to minimise number. Default (2). Option Description 0 - No 
            of subcells. 1 - Combination of subcells only if they form a complete 2 - Combination of subcells 
            form minimum number No 2 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=2
            Required=No
        tol: 
            Tolerance on numerical key field{s} comparison. Subcells with key numeric fields within TOL 
            each other may be combined if OPTIMISE=1 or 2. TOL is specified as a percentage of the range of 
            for each field. Default (0.001). 
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        accuracy: 
            Accuracy indicates the size below which a cell is deemed to be invisible. Default (0.001). Note 
            these cells are ignored by the PROMOD process. 
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        print: 
            Print flag. Default (0). Option Description 0 - minimum output. 1 - details of every overlap in 
            model. 2 - details of each combination of subcells. 3 - details of all subcells extending 
            the 4 - as 1 plus 2. 5 - as 1 plus 2 plus 3. No 0 0,5 0,1,2,3,4,5 
            Range=0,5
            Values=0,1,2,3,4,5
            Default=0
            Required=No
        """


        command = "promod "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if remnants != "optional":
            command += " &remnants=" + remnants 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if density != "optional":
            command += " *density=" + density 

        if density != "optional":
            command += " @density=" + str(density) 

        if xincmin != "optional":
            command += " @xincmin=" + str(xincmin) 

        if yincmin != "optional":
            command += " @yincmin=" + str(yincmin) 

        if zincmin != "optional":
            command += " @zincmin=" + str(zincmin) 

        if overlap != "optional":
            command += " @overlap=" + str(overlap) 

        if optimise != "optional":
            command += " @optimise=" + str(optimise) 

        if tol != "optional":
            command += " @tol=" + str(tol) 

        if accuracy != "optional":
            command += " @accuracy=" + str(accuracy) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def proper(self,
               perimin='required',
               perimout='optional',
               mode=0,
               area=0,1,
               close=0,
               clockwse="optional",
               vplane=1,
               dmax="optional",
               tol=0,
               reduce=0,
               extend=0,
               cross=0,
               retrieval='optional'):

        """
        PROPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            The input perimeter file. The fields required are XP,YP,ZP,PTN, and PVALUE (standard 
            format). All perimeters in the file will be used. All other fields will be copied. Perimeters 
            be planar. 
            Required=Yes

        Output Files:
        -------------

        perimout: String
            Output perimeter file. Contains all fields from the input file plus optionally AREA. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        mode: 
            For MODE=1 only parameters CLOSE, DMAX, TOL, REDUCE are used to treat strings. =0 : Treat as 
            =1 : Treat as strings. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        area: 
            field containing perimeter area creation flag =0 : dont create field AREA in PERIMOUT . =1 : 
            field AREA in PERIMOUT . 
            Range=0,1
            Values=0,1
            Default=0,1
            Required=No
        close: 
            =0 : will remove last point of a perimeter if perimeter is closed. . =1 : will add first point to end 
            perimeter if perimeter not closed.. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        clockwse: 
            =0 : make all perimeters anti-clockwise. =1 : make all perimeters clockwise. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        vplane: 
            Viewing plane for clockwise sense for non-orthogonal planes (1). =1 : XY plane from +Z. =2 : XZ 
            from -Y. =3 : YZ plane from +X. 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        dmax: 
            The maximum chord length used when inserting additional points into long chords. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tol: 
            Minimum allowable chord length used when removing points. Default is (0) for removal of 
            duplicates. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        reduce: 
            Percentage point reduction 0 to 90 (0). 
            Range=0,90
            Values=Undefined
            Default=0
            Required=No
        extend: 
            +/- perpendicular extension distance (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        cross: 
            Option Description (0) do not attempt to resolve crossovers in extended No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "proper "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 

        if perimout != "optional":
            command += " &perimout=" + perimout 

        if mode != "optional":
            command += " @mode=" + str(mode) 

        if area != "optional":
            command += " @area=" + str(area) 

        if close != "optional":
            command += " @close=" + str(close) 

        if clockwse != "optional":
            command += " @clockwse=" + str(clockwse) 

        if vplane != "optional":
            command += " @vplane=" + str(vplane) 

        if dmax != "optional":
            command += " @dmax=" + str(dmax) 

        if tol != "optional":
            command += " @tol=" + str(tol) 

        if reduce != "optional":
            command += " @reduce=" + str(reduce) 

        if extend != "optional":
            command += " @extend=" + str(extend) 

        if cross != "optional":
            command += " @cross=" + str(cross) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def qnlm(self,
             in_='required',
             scores='optional',
             sampid='required',
             f1='optional',
             f2='optional',
             f3='optional',
             f4='optional',
             f5='optional',
             f6='optional',
             f7='optional',
             f8='optional',
             f9='optional',
             f10='optional',
             convlim=0.0001,
             magic=0.35,
             maxit=100,
             standard=0,
             znorm=0,
             print_=0,
             retrieval='optional'):

        """
        QNLM
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        scores: Undefined
            Optional output file for non linear mapping scores. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Sample identifier field in input file. 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        convlim: 
            Convergence limit (0.0001) 
            Range=Undefined
            Values=Undefined
            Default=0.0001
            Required=No
        magic: 
            Convergence [magic] factor (0.35) 
            Range=Undefined
            Values=Undefined
            Default=0.35
            Required=No
        maxit: 
            Maximum number of iterations (100) 
            Range=Undefined
            Values=Undefined
            Default=100
            Required=No
        standard: 
            >0 Input data to be standardised (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        znorm: 
            >0 NLM scores in output file SCORES to be Z normalised (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >0 Display two dimensional x - y coordinates to the screen (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "qnlm "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if scores != "optional":
            command += " &scores=" + scores 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if convlim != "optional":
            command += " @convlim=" + str(convlim) 

        if magic != "optional":
            command += " @magic=" + str(magic) 

        if maxit != "optional":
            command += " @maxit=" + str(maxit) 

        if standard != "optional":
            command += " @standard=" + str(standard) 

        if znorm != "optional":
            command += " @znorm=" + str(znorm) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def quantile(self,
                 in_='required',
                 results='required',
                 primary='optional',
                 print_='optional',
                 value='required',
                 key='optional',
                 weight='optional',
                 quantil1=10,
                 quantil2=0,
                 cutoff=0,
                 topcut=0,
                 topgrade="optional",
                 retrieval='optional'):

        """
        QUANTILE
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample file 
            Required=Yes

        Output Files:
        -------------

        results: Undefined
            Output file containing sample quantile information for primary and secondary subdivisions. 
            Required=Yes
        primary: Table File
            Output file containing sample quantile information for the primary subdivision only. 
            Required=No
        print: Table File
            System print file, containing sample quantile information. This is a copy of the contents of 
            RESULTS file, but to a system file. The extension .pri will be added automatically to the file 
            
            Required=No

        Fields:
        -------

        value: Undefined : Undefined
            Name of the field containing the grade to be analysed. 
            Default=Undefined
            Required=Yes
        key: Undefined : Undefined
            Key field for grouping the data. A separate quantile analysis is carried out for each unique 
            of the key field. 
            Default=Undefined
            Required=No
        weight: Undefined : Undefined
            Field containing the weight used when calculating quantile means and accumulating the grade 
            For example if the input data is a desurveyed data file then LENGTH could be used. If no field is 
            then all samples have an equal weight. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        quantil1: 
            The primary quantile. The number of primary subdivisions or bins for grouping the samples. For 
            setting QUANTIL1=10 will divide the samples into deciles; QUANTIL1=4 will give quartiles. 
            Range=2,+
            Values=Undefined
            Default=10
            Required=No
        quantil2: 
            The secondary quantile. The top bin of the primary subdivision can be further split into equal 
            For example if QUANTIL1=10 and QUANTIL2=4, then the top 10% will be split into 4 equal groups of 
            If set to 0 then the top bin is not resplit. 
            Range=0,+
            Values=Undefined
            Default=0
            Required=No
        cutoff: 
            Cutoff grade. Only samples greater than or equal to the cutoff grade are selected for analysis. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        topcut: 
            Flag to specify whether or not a topcut grade should be applied: 0 = No topcut applied. 1 = Topcut 
            at grade defined in TOPGRADE 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        topgrade: 
            Grade to be applied as a topcut, if TOPCUT is set to 1. Any value greater than TOPGRADE will be 
            to equal to TOPGRADE. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "quantile "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 

        if primary != "optional":
            command += " &primary=" + primary 

        if print_ != "optional":
            command += " &print=" + print_ 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if key != "optional":
            command += " *key=" + key 

        if weight != "optional":
            command += " *weight=" + weight 

        if quantil1 != "optional":
            command += " @quantil1=" + str(quantil1) 

        if quantil2 != "optional":
            command += " @quantil2=" + str(quantil2) 

        if cutoff != "optional":
            command += " @cutoff=" + str(cutoff) 

        if topcut != "optional":
            command += " @topcut=" + str(topcut) 

        if topgrade != "optional":
            command += " @topgrade=" + str(topgrade) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def rank(self,
             in_='required',
             out='required',
             value='required',
             rank='required',
             cumprop='required',
             phi='required',
             retrieval='optional'):

        """
        RANK
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Numeric or up to 4-character alpha field to be ranked. 
            Default=Undefined
            Required=Yes
        rank: Undefined : Undefined
            New field to be created in output file, to contain rank order values. 
            Default=Undefined
            Required=Yes
        cumprop: Undefined : Undefined
            New field to be created in output file, to contain cumulative frequency values of field RANK 
            of CUMPROP lie between 0 and 1]. 
            Default=Undefined
            Required=Yes
        phi: Undefined : Undefined
            New field to be created in output file, to contain PHI [inverse normal distribution] transform 
            field CUMPROP [values of PHI lie between -3.5 and +3.5]. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        """


        command = "rank "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if rank == "required":
            raise ValueError("rank is required.")

        command += " *rank=" + rank 


        # Required field error check

        if cumprop == "required":
            raise ValueError("cumprop is required.")

        command += " *cumprop=" + cumprop 


        # Required field error check

        if phi == "required":
            raise ValueError("phi is required.")

        command += " *phi=" + phi 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def reblock(self,
                modin='required',
                modout='required',
                density='required',
                fillvol='optional',
                voidvol='optional',
                vwfld1-15='optional',
                domfld1-10='optional',
                addfld1-10='optional',
                minfld1-5='optional',
                maxfld1-5='optional',
                retrieval='optional'):

        """
        REBLOCK
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modin: Input
            Input block model file 
            Required=Yes

        Output Files:
        -------------

        modout: Block Model
            Reblocked output model file 
            Required=Yes

        Fields:
        -------

        density: Undefined : Undefined
            Density field. If the model does not include a DENSITY field then the density can be set with 
            @DENSITY. The output file will always contain a DENSITY field. 
            Default=Undefined
            Required=Yes
        fillvol: Undefined : Undefined
            The proportion of each full cell in the output model that was filled with cells in the input 
            Only output if @FULLCELL=1. 
            Default=Undefined
            Required=No
        voidvol: Undefined : Undefined
            The proportion of each full cell in the output model that was filled with cells in the input 
            Calculated as 1 - FILLVOL. Only output if @FULLCELL=1. 
            Default=Undefined
            Required=No
        vwfld1-15: Undefined : Undefined
            Field(s) to be volume weighted 
            Default=Undefined
            Required=No
        domfld1-10: Undefined : Undefined
            Field(s) to be treated as dominant. 
            Default=Undefined
            Required=No
        addfld1-10: Undefined : Undefined
            Field(s) to be treated as additive 
            Default=Undefined
            Required=No
        minfld1-5: Undefined : Undefined
            Field(s) to be set using minimum value 
            Default=Undefined
            Required=No
        maxfld1-5: Undefined : Undefined
            Field(s) to be set using maximum value 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "reblock "


        # Required input error check

        if modin == "required":
            raise ValueError("modin is required.")

        command += " &modin=" + modin 


        # Required output error check

        if modout == "required":
            raise ValueError("modout is required.")

        command += " &modout=" + modout 


        # Required field error check

        if density == "required":
            raise ValueError("density is required.")

        command += " *density=" + density 

        if fillvol != "optional":
            command += " *fillvol=" + fillvol 

        if voidvol != "optional":
            command += " *voidvol=" + voidvol 

        if vwfld1-15 != "optional":
            command += " *vwfld1-15=" + vwfld1-15 

        if domfld1-10 != "optional":
            command += " *domfld1-10=" + domfld1-10 

        if addfld1-10 != "optional":
            command += " *addfld1-10=" + addfld1-10 

        if minfld1-5 != "optional":
            command += " *minfld1-5=" + minfld1-5 

        if maxfld1-5 != "optional":
            command += " *maxfld1-5=" + maxfld1-5 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def recblkst(self,
                 modelin='required',
                 blocks string file of mining outlines='required',
                 prevtr triangle file of first or initial mining surface='required',
                 prevpt triangle point file of first or initial mining surface='required',
                 minedtr triangle file of the second or mined surface='required',
                 minedpt triangle point file of the second or mined surface='required',
                 perimin optional string file to control the overall area of processing='optional',
                 modelout='required',
                 blockres='required',
                 blockres='required',
                 blockid='required',
                 dplus='optional',
                 dminus='optional',
                 key1='optional',
                 density='optional',
                 grade1-10='optional',
                 dplus="optional",
                 dminus="optional",
                 xsubcell=1,
                 ysubcell=0,
                 zsubcell=0,
                 splits=0,
                 factor="optional",
                 setabsnt=0,
                 bench=0,
                 retrieval='optional'):

        """
        RECBLKST
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modelin: Input
            Input model file for reconciliation. 
            Required=Yes
        blocks string file of mining outlines: Input
            Input string file containing mining outlines. These are projected up and down to define 
            volumes. Each string must have all its points on the same elevation. 
            Required=Yes
        prevtr triangle file of first or initial mining surface: Input
            The wireframe triangle file of the initial mining surface. 
            Required=Yes
        prevpt triangle point file of first or initial mining surface: Input
            The wireframe point file of the initial mining surface. 
            Required=Yes
        minedtr triangle file of the second or mined surface: Input
            The wireframe triangle file of the second or mined surface. 
            Required=Yes
        minedpt triangle point file of the second or mined surface: Input
            The wireframe point file of the second or mined surface 
            Required=Yes
        perimin optional string file to control the overall area of processing: Input
            If specified this optional file must contain at least one perimeter (e.g. a bounding pit 
            to control the area in which processing occurs. 
            Required=No

        Output Files:
        -------------

        modelout: Block Model
            Output reconciliation model. This contains subcells between the first (designed) and second 
            surface with flags defining the planned cells. 
            Required=Yes
        blockres: Results
            Output results file containing tonnes and grades within each mining block outline. 
            Required=Yes
        blockres: Results
            Output results file containing tonnes and grades for categories of PLANNED and MINED. The 
            with value of CODE from 1 to 5, are as follows: CODE=1, SOURCE=PLANNED: The total amount of 
            material in the model: the quantity of material in the volume below the first surface that is 
            by the mining block outlines. CODE=2, SOURCE=MINED: The total amount of MINED material in the 
            the amount of material between the two surfaces. CODE=3, SOURCE=PLANNED and MINED: The total 
            of PLANNED and MINED material in the model: the amount of material between the two surfaces and 
            within the mining blocks. CODE=4, SOURCE=PLANNED Only: The total amount of PLANNED and NOT 
            material in the model: the amount of material in the mining blocks that is not between the 
            CODE=5, SOURCE=MINED Only: The total amount of MINED and NOT PLANNED material in the model: the 
            of material between the surfaces that is not in the mining blocks. 
            Required=Yes

        Fields:
        -------

        blockid: Undefined : Undefined
            The field name in the input BLOCKS outlines file that identifies individual mining blocks 
            Default=Undefined
            Required=Yes
        dplus: Undefined : Undefined
            The (optional) field name in the input BLOCKS outlines file that specifies the amount of 
            projection of each mining block. The default field name is DPLUS, which will be used if it exists 
            the BLOCKS file If this is not specified the DPLUS parameter value is used 
            Default=Undefined
            Required=No
        dminus: Undefined : Undefined
            The (optional) field name in the input BLOCKS outlines file that specifies the amount of 
            projection of each mining block. If this is not specified the DMINUS parameter value is used 
            Default=Undefined
            Required=No
        key1: Undefined : Undefined
            A key field in the model file that is used to categorise results. For example this might be a rock 
            or zone identifier. 
            Default=Undefined
            Required=No
        density: Any : MODELIN
            The Density field in the input block model. 
            Default=DENSITY
            Required=No
        grade1-10: Undefined : Undefined
            Grade fields in the input block model to be evaluated and included in the results. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        dplus: 
            The projection distance measured in the increasing vertical direction to be used to create 
            from the input mining outlines. This is used if there is no DPLUS field in the mining outlines 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            The projection distance measured in the decreasing vertical direction to be used to create 
            from the input mining outlines. This is used if there is no DPLUS field in the mining outlines 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xsubcell: 
            Cell division in X direction for splitting against perimeters (1). Max 20. This is the same as 
            control in the PERFIL process. A value of 1 will generate no splitting. A higher number will 
            subcells which more closely represent the perimeter shape but there will be more of them. 
            Range=1,20
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Cell division in X direction for splitting against perimeters (1). Max 20. This is the same as 
            control in the PERFIL process. A value of 1 will generate no splitting. A higher number will 
            subcells which more closely represent the perimeter shape but there will be more of them. 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        zsubcell: 
            Cell division in X direction for splitting against perimeters (1). Max 20. This is the same as 
            control in the PERFIL process. A value of 1 will generate no splitting. A higher number will 
            subcells which more closely represent the perimeter shape but there will be more of them. 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        splits: 
            Maximum amount of splitting to be allowed when spitting cells with topography. The default 
            is 3. =0 : no splitting: parent cell. =1 : 1 split: 2 x 2 subcells. =2 : 2 splits: 4 x 4 subcells. =3 : 3 
            8 x 8 subcells. 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        factor: 
            Scaling factor to adjust the units of the Volume and Tonnage in the output files. Volume and 
            are divided by this factor. This is the same parameter as used in the TONGRAD process 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        setabsnt: 
            Set to 1 to allow TONGRAD to internally reset absent grade and Density values. If this is used, 
            grade values are set to their default values. If the default value is absent grade values are set 
            zero. If Density values are absent the default DENSITY parameter value is used. 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        bench: 
            Set to 1 to categorize the reserve comparisons by benches. =0 : Do not categorize by benches. =1 : 
            the results by benches (as defined by the model ZINC default value). 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        """


        command = "recblkst "


        # Required input error check

        if modelin == "required":
            raise ValueError("modelin is required.")

        command += " &modelin=" + modelin 


        # Required input error check

        if blocks string file of mining outlines == "required":
            raise ValueError("blocks string file of mining outlines is required.")

        command += " &blocks string file of mining outlines=" + blocks string file of mining outlines 


        # Required input error check

        if prevtr triangle file of first or initial mining surface == "required":
            raise ValueError("prevtr triangle file of first or initial mining surface is required.")

        command += " &prevtr triangle file of first or initial mining surface=" + prevtr triangle file of first or initial mining surface 


        # Required input error check

        if prevpt triangle point file of first or initial mining surface == "required":
            raise ValueError("prevpt triangle point file of first or initial mining surface is required.")

        command += " &prevpt triangle point file of first or initial mining surface=" + prevpt triangle point file of first or initial mining surface 


        # Required input error check

        if minedtr triangle file of the second or mined surface == "required":
            raise ValueError("minedtr triangle file of the second or mined surface is required.")

        command += " &minedtr triangle file of the second or mined surface=" + minedtr triangle file of the second or mined surface 


        # Required input error check

        if minedpt triangle point file of the second or mined surface == "required":
            raise ValueError("minedpt triangle point file of the second or mined surface is required.")

        command += " &minedpt triangle point file of the second or mined surface=" + minedpt triangle point file of the second or mined surface 

        if perimin optional string file to control the overall area of processing != "optional":
            command += " &perimin optional string file to control the overall area of processing=" + perimin optional string file to control the overall area of processing 


        # Required output error check

        if modelout == "required":
            raise ValueError("modelout is required.")

        command += " &modelout=" + modelout 


        # Required output error check

        if blockres == "required":
            raise ValueError("blockres is required.")

        command += " &blockres=" + blockres 


        # Required output error check

        if blockres == "required":
            raise ValueError("blockres is required.")

        command += " &blockres=" + blockres 


        # Required field error check

        if blockid == "required":
            raise ValueError("blockid is required.")

        command += " *blockid=" + blockid 

        if dplus != "optional":
            command += " *dplus=" + dplus 

        if dminus != "optional":
            command += " *dminus=" + dminus 

        if key1 != "optional":
            command += " *key1=" + key1 

        if density != "optional":
            command += " *density=" + density 

        if grade1-10 != "optional":
            command += " *grade1-10=" + grade1-10 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if splits != "optional":
            command += " @splits=" + str(splits) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if setabsnt != "optional":
            command += " @setabsnt=" + str(setabsnt) 

        if bench != "optional":
            command += " @bench=" + str(bench) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def reccop(self,
               in_='required',
               retrieval='optional'):

        """
        RECCOP
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "reccop "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def recmodel(self,
                 model='required',
                 results='required',
                 planned='required',
                 mined='required',
                 key1='optional',
                 density='optional',
                 grade1-10='optional',
                 value="optional",
                 modltype=1,
                 factor=1,
                 setabsnt=0,
                 bench=0,
                 retrieval='optional'):

        """
        RECMODEL
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Input model file for reconciliation. It must contain a field identifying the planned cells to 
            reconciled with the wireframe volumes. If the model has been created by NPV Scheduler this 
            may be the optimally planned pushback identifier PSB_PIT 
            Required=Yes

        Output Files:
        -------------

        results: Results
            Output results file containing the reserve comparisons. This contains up to 5 records for 
            separate reconciled volume: Total Planned, Total Mined, Planned and Mined, Planned Only and 
            Only. Volumes are defined by the PLANNED and MINED fields and can be further broken down by the 
            field and BENCH parameter. 
            Required=Yes

        Fields:
        -------

        planned: Undefined : Undefined
            Field in MODEL file used to group the planned blocks. If comparing wireframe designs with 
            reserves in an NPV Scheduler model this field may be PSB_PIT. 
            Default=Undefined
            Required=Yes
        mined: Undefined : Undefined
            Field in the WIRETR file defining the volumes to be compared to the corresponding PLANNED block 
            cells. 
            Default=Undefined
            Required=Yes
        key1: Undefined : Undefined
            Optional Key field in the MODEL file used to categorize results (e.g. a Rock type field). 
            Default=Undefined
            Required=No
        density: Any : MODEL
            Density field in the MODEL file used to calculate tonnages. 
            Default=DENSITY
            Required=No
        grade1-10: Undefined : Undefined
            Grade field in the model file 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        value: 
            Value of PLANNED and MINED fields to compare. If undefined or zero then all values of MINED field 
            be compared. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        modltype: 
            Type of wireframe model to be filled; one of the following options, with default of (1) :- 1 2 3 4 5 6 
            Range=1, 6
            Values=1,2,3,4,5,6
            Default=1
            Required=Yes
        factor: 
            Scaling factor to adjust the units of the Volume and Tonnage in the output files. Volume and 
            are divided by this factor. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        setabsnt: 
            Set to 1 to allow TONGRAD to internally reset absent grade and Density values. If this is used, 
            grade values are set to their default values. If the default value is absent grade values are set 
            zero. If Density values are absent the default DENSITY parameter value is used." 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        bench: 
            Set to 1 to categorize the reserve comparisons by benches. 0 Do not categorize by benches 1 
            the results by benches (as defined by 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        """


        command = "recmodel "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required field error check

        if planned == "required":
            raise ValueError("planned is required.")

        command += " *planned=" + planned 


        # Required field error check

        if mined == "required":
            raise ValueError("mined is required.")

        command += " *mined=" + mined 

        if key1 != "optional":
            command += " *key1=" + key1 

        if density != "optional":
            command += " *density=" + density 

        if grade1-10 != "optional":
            command += " *grade1-10=" + grade1-10 

        if value != "optional":
            command += " @value=" + str(value) 


        # Required parameter error check

        if modltype == "required":
            raise ValueError("modltype is required.")

        command += " @modltype=" + str(modltype) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if setabsnt != "optional":
            command += " @setabsnt=" + str(setabsnt) 

        if bench != "optional":
            command += " @bench=" + str(bench) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def recmodwf(self,
                 model='required',
                 wiretr='required',
                 wirept='required',
                 modout='optional',
                 results='required',
                 planned='required',
                 mined='required',
                 key1='optional',
                 density='optional',
                 grade1-10='optional',
                 value="optional",
                 modltype=1,
                 factor=1,
                 setabsnt=0,
                 bench=0,
                 retrieval='optional'):

        """
        RECMODWF
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Input model file for reconciliation. It must contain a field identifying the planned cells to 
            reconciled with the wireframe volumes. If the model has been created by NPV Scheduler this 
            may be the optimally planned pushback identifier PSB_PIT 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file used to define the mined volume(s). This should contain a field 
            the design to be reconciled. 
            Required=Yes
        wirept: Input
            Input wireframe point file used to to define the mine volume(s). 
            Required=Yes

        Output Files:
        -------------

        modout: Block Model
            Output model file containing cell divisions defined by the input wireframes. This file will 
            the MINED field with values derived from the input wireframe. If the input file already 
            a MINED field its values are overwritten. The previous values are saved in a field called 
            
            Required=No
        results: Results
            Output results file containing the reserve comparisons. This contains up to 5 records for 
            separate reconciled volume: Total Planned, Total Mined, Planned and Mined, Planned Only and 
            Only. Volumes are defined by the PLANNED and MINED fields and can be further broken down by the 
            field and BENCH parameter. 
            Required=Yes

        Fields:
        -------

        planned: Undefined : Undefined
            Field in MODEL file used to group the planned blocks. If comparing wireframe designs with 
            reserves in an NPV Scheduler model this field may be PSB_PIT. 
            Default=Undefined
            Required=Yes
        mined: Undefined : Undefined
            Field in the WIRETR file defining the volumes to be compared to the corresponding PLANNED block 
            cells. 
            Default=Undefined
            Required=Yes
        key1: Undefined : Undefined
            Optional Key field in the MODEL file used to categorize results (e.g. a Rock type field). 
            Default=Undefined
            Required=No
        density: Any : MODEL
            Density field in the MODEL file used to calculate tonnages. 
            Default=DENSITY
            Required=No
        grade1-10: Undefined : Undefined
            Grade field in the model file 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        value: 
            Value of PLANNED and MINED fields to compare. If undefined or zero then all values of MINED field 
            be compared. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        modltype: 
            Type of wireframe model to be filled; one of the following options, with default of (1) :- 1 2 3 4 5 6 
            Range=1, 6
            Values=1,2,3,4,5,6
            Default=1
            Required=Yes
        factor: 
            Scaling factor to adjust the units of the Volume and Tonnage in the output files. Volume and 
            are divided by this factor. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        setabsnt: 
            Set to 1 to allow TONGRAD to internally reset absent grade and Density values. If this is used, 
            grade values are set to their default values. If the default value is absent grade values are set 
            zero. If Density values are absent the default DENSITY parameter value is used." 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        bench: 
            Set to 1 to categorize the reserve comparisons by benches. 0 Do not categorize by benches 1 
            the results by benches (as defined by 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        """


        command = "recmodwf "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if modout != "optional":
            command += " &modout=" + modout 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 


        # Required field error check

        if planned == "required":
            raise ValueError("planned is required.")

        command += " *planned=" + planned 


        # Required field error check

        if mined == "required":
            raise ValueError("mined is required.")

        command += " *mined=" + mined 

        if key1 != "optional":
            command += " *key1=" + key1 

        if density != "optional":
            command += " *density=" + density 

        if grade1-10 != "optional":
            command += " *grade1-10=" + grade1-10 

        if value != "optional":
            command += " @value=" + str(value) 


        # Required parameter error check

        if modltype == "required":
            raise ValueError("modltype is required.")

        command += " @modltype=" + str(modltype) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if setabsnt != "optional":
            command += " @setabsnt=" + str(setabsnt) 

        if bench != "optional":
            command += " @bench=" + str(bench) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def regmod(self,
               in1='required',
               in2='required',
               fieldlst='optional',
               out='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               f11='optional',
               f12='optional',
               f13='optional',
               f14='optional',
               f15='optional',
               f16='optional',
               f17='optional',
               f18='optional',
               f19='optional',
               f20='optional',
               f21='optional',
               f22='optional',
               f23='optional',
               f24='optional',
               f25='optional',
               fieldnam='optional',
               print_=0,
               retrieval='optional'):

        """
        REGMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input model prototype file, defining the new model origin, number of cells and cell sizes. This 
            typically set up by process PROTOM. The fields required are XMORIG, YMORIG, ZMORIG, NX, NY, NZ, 
            YINC, ZINC (all implicit) and IJK, XC, YC, and ZC (all explicit). 
            Required=Yes
        in2: Input
            Input model file for conversion. This must have the fields XMORIG, YMORIG, ZMORIG, NX, NY, NZ 
            and IJK, XC, YC and ZC (explicit). XINC, YINC and ZINC must exist as either explicit (sub-cells 
            or implicit (no sub-cells). There must also be at least one explicit numeric data field, to be 
            as F1. The records may be in any order, but speed is increased if they are in IJK order. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------

        out: Block Model
            Output model file. This will have the model parameters of the input prototype file on IN1 , and 
            contain up to twenty five averaged fields ( F1-F25). It will also contain the fields FILLVOL and 
            
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            First explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Nineth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Eleventh explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Twelfth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Thirteenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Fourteenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Fifteenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Sixteenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Seventeenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Eighteenth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Nineteenth explicit numeric field to be averaged. F6 to F25 may also be specified. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Twentieth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f21: Undefined : Undefined
            Twenty-first explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f22: Undefined : Undefined
            Twenty-second explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f23: Undefined : Undefined
            Twenty-third explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f24: Undefined : Undefined
            Twenth-fourth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f25: Undefined : Undefined
            Twenty-fifth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        print: 
            >=2 display for each input cell or sub-cell that intersects with an output model cell; 
            [IJK of input and output cell, sub-cell no., input cell centre, volume intersected, total 
            to date in output cell, F1 value] and for each output cell, IJK, FILLVOL and VOIDVOL values, and 
            F1 value. (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "regmod "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if f21 != "optional":
            command += " *f21=" + f21 

        if f22 != "optional":
            command += " *f22=" + f22 

        if f23 != "optional":
            command += " *f23=" + f23 

        if f24 != "optional":
            command += " *f24=" + f24 

        if f25 != "optional":
            command += " *f25=" + f25 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def regmow(self,
               in1='required',
               in2='required',
               out='required',
               bltype='optional',
               f1='required',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               airval="optional",
               cutoff1="optional",
               restrict=0,
               print_=0,
               retrieval='optional'):

        """
        REGMOW
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            Input model prototype file, defining the new model origin, number of cells and cell sizes. This 
            typically set up by process PROTOM. The fields required are XMORIG, YMORIG, ZMORIG, NX, NY, NZ, 
            YINC, ZINC (all implicit) and IJK, XC, YC, and ZC (all explicit). 
            Required=Yes
        in2: Input
            Input model file for conversion. This must have the fields XMORIG, YMORIG, ZMORIG, NX, NY, NZ 
            and IJK, XC, YC and ZC (explicit). XINC, YINC and ZINC must exist as either explicit (sub-cells 
            or implicit (no sub-cells). There must also be at least one explicit numeric data field, to be 
            as F1. The records may be in any order, but speed is greatly increased if they are in IJK order. 
            Required=Yes

        Output Files:
        -------------

        out: Block Model File
            Output model file. This will have the model parameters of the input prototype file on IN1 , and 
            contain up to five averaged fields ( F1-F5). It will also contain the fields OREVOL, WASVOL and 
            
            Required=Yes

        Fields:
        -------

        bltype: Undefined : Undefined
            Field in IN2 which contains a specific value AIRVAL when the sub-cell is air. 
            Default=Undefined
            Required=No
        f1: Undefined : Undefined
            First explicit numeric field to be averaged. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            Second explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth explicit numeric field to be averaged. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        airval: 
            The value of the BLTYPE field that will be used to recognize air blocks and sub-blocks in the 
            model. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cutoff1: 
            If the value in field F1 is below this, the sub-cell is treated as waste. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        restrict: 
            Set to 1 if only the blocks on the input model are to be reported in the regularized model. Default 
            0. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            >=2 display for each input cell or sub-cell that intersects with an output model cell; 
            [IJK of input and output cell, sub-cell no., input cell centre, volume intersected, total 
            to date in output cell, F1 value] and for each output cell, IJK, WASVOL, OREVOL, the F1 name and 
            F1 value. (0). 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        """


        command = "regmow "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if bltype != "optional":
            command += " *bltype=" + bltype 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if airval != "optional":
            command += " @airval=" + str(airval) 

        if cutoff1 != "optional":
            command += " @cutoff1=" + str(cutoff1) 

        if restrict != "optional":
            command += " @restrict=" + str(restrict) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def rename(self,
               in_='required',
               out='required',
               retrieval='optional'):

        """
        RENAME
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be renamed. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            New file name (must not exist). 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "rename "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def repork(self,
               in_='required',
               key1='optional',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               key11='optional',
               key12='optional',
               key13='optional',
               key14='optional',
               key15='optional',
               key16='optional',
               key17='optional',
               key18='optional',
               key19='optional',
               key20='optional',
               key21='optional',
               key22='optional',
               key23='optional',
               key24='optional',
               key25='optional',
               lines="optional",
               noff=0,
               prntcols="optional",
               hedcentr=0,
               hedspace="optional",
               compress="optional",
               mindsply=0,
               sysfile=0,
               retrieval='optional'):

        """
        REPORK
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1, optional 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Keyfield 2, optional 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3, optional 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4, optional 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5, optional 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6, optional 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7, optional 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8, optional 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9, optional 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10, optional 
            Default=Undefined
            Required=No
        key11: Undefined : Undefined
            Keyfield 11, optional 
            Default=Undefined
            Required=No
        key12: Undefined : Undefined
            Keyfield 12, optional 
            Default=Undefined
            Required=No
        key13: Undefined : Undefined
            Keyfield 13, optional 
            Default=Undefined
            Required=No
        key14: Undefined : Undefined
            Keyfield 14, optional 
            Default=Undefined
            Required=No
        key15: Undefined : Undefined
            Keyfield 15, optional 
            Default=Undefined
            Required=No
        key16: Undefined : Undefined
            Keyfield 16, optional 
            Default=Undefined
            Required=No
        key17: Undefined : Undefined
            Keyfield 17, optional 
            Default=Undefined
            Required=No
        key18: Undefined : Undefined
            Keyfield 18, optional 
            Default=Undefined
            Required=No
        key19: Undefined : Undefined
            Keyfield 19, optional 
            Default=Undefined
            Required=No
        key20: Undefined : Undefined
            Keyfield 20, optional 
            Default=Undefined
            Required=No
        key21: Undefined : Undefined
            Keyfield 21, optional 
            Default=Undefined
            Required=No
        key22: Undefined : Undefined
            Keyfield 22, optional 
            Default=Undefined
            Required=No
        key23: Undefined : Undefined
            Keyfield 23, optional 
            Default=Undefined
            Required=No
        key24: Undefined : Undefined
            Keyfield 24, optional 
            Default=Undefined
            Required=No
        key25: Undefined : Undefined
            Keyfield 25, optional 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        lines: 
            Number of lines per page of output. If negative will be double spaced. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        noff: 
            If set to 1, suppresses form feeds (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        prntcols: 
            132 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hedcentr: 
            If set to 1, page heading to be centred (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        hedspace: 
            Number of lines spacing required between the page headings, key block, and table headings. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        compress: 
            Set to 1 for compressed print option (only for some printers. Uses DPL24C convention). 
            Range=0,1
            Values=Undefined
            Default=Undefined
            Required=No
        mindsply: 
            Set to 1 to suppress screen display of the full report tabulation (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        sysfile: 
            Option Description 1 to send report to a system file rather than the printer or print file (0). 
            name is requested: 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "repork "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if key11 != "optional":
            command += " *key11=" + key11 

        if key12 != "optional":
            command += " *key12=" + key12 

        if key13 != "optional":
            command += " *key13=" + key13 

        if key14 != "optional":
            command += " *key14=" + key14 

        if key15 != "optional":
            command += " *key15=" + key15 

        if key16 != "optional":
            command += " *key16=" + key16 

        if key17 != "optional":
            command += " *key17=" + key17 

        if key18 != "optional":
            command += " *key18=" + key18 

        if key19 != "optional":
            command += " *key19=" + key19 

        if key20 != "optional":
            command += " *key20=" + key20 

        if key21 != "optional":
            command += " *key21=" + key21 

        if key22 != "optional":
            command += " *key22=" + key22 

        if key23 != "optional":
            command += " *key23=" + key23 

        if key24 != "optional":
            command += " *key24=" + key24 

        if key25 != "optional":
            command += " *key25=" + key25 

        if lines != "optional":
            command += " @lines=" + str(lines) 

        if noff != "optional":
            command += " @noff=" + str(noff) 

        if prntcols != "optional":
            command += " @prntcols=" + str(prntcols) 

        if hedcentr != "optional":
            command += " @hedcentr=" + str(hedcentr) 

        if hedspace != "optional":
            command += " @hedspace=" + str(hedspace) 

        if compress != "optional":
            command += " @compress=" + str(compress) 

        if mindsply != "optional":
            command += " @mindsply=" + str(mindsply) 

        if sysfile != "optional":
            command += " @sysfile=" + str(sysfile) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def report(self,
               in_='required',
               lines="optional",
               noff=0,
               sysfile=0,
               retrieval='optional'):

        """
        REPORT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        lines: 
            Number of lines per page of output. If negative will be double spaced. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        noff: 
            If set to 1, suppresses form feeds (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        sysfile: 
            Option Description 1 to send report to a system file rather than the printer or print file (0). 
            name is requested: 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "report "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if lines != "optional":
            command += " @lines=" + str(lines) 

        if noff != "optional":
            command += " @noff=" + str(noff) 

        if sysfile != "optional":
            command += " @sysfile=" + str(sysfile) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def rescat(self,
               proto='required',
               in_='required',
               model='required',
               value='required',
               x='required',
               y='required',
               z='required',
               radius="optional",
               rescat=1,
               ellipse=0,
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               print_="optional",
               retrieval='optional'):

        """
        RESCAT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Input prototype model. This may be just fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK. May contain cells and sub-cells. 
            Required=Yes
        in: Input
            Input sample data (sorted on X). Must contain the fields X , Y , Z , VALUE. 
            Required=Yes

        Output Files:
        -------------

        model: Block Model
            Output model. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            Value field. Even if the VALUE field is not copied to the output file a VALUE field is still 
            (as for any other model interpolation process). 
            Default=Undefined
            Required=Yes
        x: Undefined : Undefined
            Name of X field in IN sample file. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Name of Y field in IN sample file. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Name of Z field in IN sample file. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        radius: 
            Search radius.[Maximum Value] 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        rescat: 
            Reserve category parameter controlling fields in the output model: (1) RESCAT VALUE DISTANCE 
            0 X - - 1 X X X 2 X X - 3 X - X 4 - X X 5 - X - 6 - - X 'X' indicates included. '-' indicates not. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ellipse: 
            Ellipsoid weighting parameter (0). If set to 1 then the user will be prompted to enter distance 
            parameters. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xsubcell: 
            No. of sub-cells/cell in X (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            No. of sub-cells/cell in Y (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            No. of sub-cells/cell in Z (1). Above three parameters only used if input prototype does not 
            contain cells. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        print: 
            >=1 Display co-ordinates and interpolated values. 
            Range=0,1
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "rescat "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required parameter error check

        if radius == "required":
            raise ValueError("radius is required.")

        command += " @radius=" + str(radius) 

        if rescat != "optional":
            command += " @rescat=" + str(rescat) 

        if ellipse != "optional":
            command += " @ellipse=" + str(ellipse) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def restri(self,
               in1='required',
               in2='required',
               out='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        RESTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            File to have records selected (sorted on required keyfields). 
            Required=Yes
        in2: Input
            File with required values of keyfields (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield for matching. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "restri "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def rnlm(self,
             in_='required',
             scores='optional',
             sampid='required',
             f1='optional',
             f2='optional',
             f3='optional',
             f4='optional',
             f5='optional',
             f6='optional',
             f7='optional',
             f8='optional',
             f9='optional',
             f10='optional',
             convlim=0.0001,
             magic=0.35,
             maxit=100,
             print_=0,
             retrieval='optional'):

        """
        RNLM
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        scores: Undefined
            Optional output file for principal component scores. 
            Required=No

        Fields:
        -------

        sampid: Undefined : Undefined
            Field containing sample identification 
            Default=Undefined
            Required=Yes
        f1: Undefined : Undefined
            First field to be used. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field to be used. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field to be used. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field to be used. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field to be used. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field to be used. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field to be used. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field to be used. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field to be used. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field to be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        convlim: 
            Convergence limit (0.0001) 
            Range=Undefined
            Values=Undefined
            Default=0.0001
            Required=No
        magic: 
            Convergence [magic] factor (0.35) 
            Range=Undefined
            Values=Undefined
            Default=0.35
            Required=No
        maxit: 
            Maximum number of iterations (100) 
            Range=Undefined
            Values=Undefined
            Default=100
            Required=No
        print: 
            Option Description (0) Print configuration results to screen. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "rnlm "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if scores != "optional":
            command += " &scores=" + scores 


        # Required field error check

        if sampid == "required":
            raise ValueError("sampid is required.")

        command += " *sampid=" + sampid 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if convlim != "optional":
            command += " @convlim=" + str(convlim) 

        if magic != "optional":
            command += " @magic=" + str(magic) 

        if maxit != "optional":
            command += " @maxit=" + str(maxit) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def selcop(self,
               in_='required',
               fieldlst='optional',
               out='required',
               f1='required',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               f11='optional',
               f12='optional',
               f13='optional',
               f14='optional',
               f15='optional',
               f16='optional',
               f17='optional',
               f18='optional',
               f19='optional',
               f20='optional',
               f21='optional',
               f22='optional',
               f23='optional',
               f24='optional',
               f25='optional',
               fieldnam='optional',
               retrieval='optional'):

        """
        SELCOP
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output file with selected fields. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            Selected field 1. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            Optional second selected field. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Optional third selected field. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Optional fourth selected field. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Optional fifth selected field. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Optional sixth selected field. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Optional seventh selected field. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Optional eighth selected field. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Optional ninth selected field. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Optional tenth selected field. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Optional eleventh selected field. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Optional twelfth selected field. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Optional thirteenth selected field. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Optional fourteenth selected field. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Optional fifteenth selected field. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Optional sixteenth selected field. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Optional seventeenth selected field. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Optional eighteenth selected field. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Optional nineteenth selected field. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Optional twentieth selected field. 
            Default=Undefined
            Required=No
        f21: Undefined : Undefined
            Optional twenty first selected field. 
            Default=Undefined
            Required=No
        f22: Undefined : Undefined
            Optional twenty second selected field. 
            Default=Undefined
            Required=No
        f23: Undefined : Undefined
            Optional twenty third selected field. 
            Default=Undefined
            Required=No
        f24: Undefined : Undefined
            Optional twenty fourth selected field. 
            Default=Undefined
            Required=No
        f25: Undefined : Undefined
            Optional twenty fifth selected field. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "selcop "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if f21 != "optional":
            command += " *f21=" + f21 

        if f22 != "optional":
            command += " *f22=" + f22 

        if f23 != "optional":
            command += " *f23=" + f23 

        if f24 != "optional":
            command += " *f24=" + f24 

        if f25 != "optional":
            command += " *f25=" + f25 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def seldel(self,
               in_='required',
               fieldlst='optional',
               out='required',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               f11='optional',
               f12='optional',
               f13='optional',
               f14='optional',
               f15='optional',
               f16='optional',
               f17='optional',
               f18='optional',
               f19='optional',
               f20='optional',
               f21='optional',
               f22='optional',
               f23='optional',
               f24='optional',
               f25='optional',
               fieldnam='optional',
               retrieval='optional'):

        """
        SELDEL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output file with deleted fields. 
            Required=Yes

        Fields:
        -------

        f1: Undefined : Undefined
            Deleted field 1. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Optional second deleted field. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Optional third deleted field. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Optional fourth deleted field. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Optional fifth deleted field. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Optional sixth deleted field. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Optional seventh deleted field. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Optional eighth deleted field. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Optional ninth deleted field. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Optional tenth deleted field. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Optional eleventh deleted field. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Optional twelfth deleted field. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Optional thirteenth deleted field. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Optional fourteenth deleted field. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Optional fifteenth deleted field. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Optional sixteenth deleted field. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Optional seventeenth deleted field. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Optional eighteenth deleted field. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Optional nineteenth deleted field. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Optional twentieth deleted field. 
            Default=Undefined
            Required=No
        f21: Undefined : Undefined
            Optional twenty first deleted field. 
            Default=Undefined
            Required=No
        f22: Undefined : Undefined
            Optional twenty second deleted field. 
            Default=Undefined
            Required=No
        f23: Undefined : Undefined
            Optional twenty third deleted field. 
            Default=Undefined
            Required=No
        f24: Undefined : Undefined
            Optional twenty fourth deleted field. 
            Default=Undefined
            Required=No
        f25: Undefined : Undefined
            Optional twenty fifth deleted field. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "seldel "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if f21 != "optional":
            command += " *f21=" + f21 

        if f22 != "optional":
            command += " *f22=" + f22 

        if f23 != "optional":
            command += " *f23=" + f23 

        if f24 != "optional":
            command += " *f24=" + f24 

        if f25 != "optional":
            command += " *f25=" + f25 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def selexy(self,
               in_='required',
               perim='required',
               out='required',
               x='required',
               y='required',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               outside=0,
               perim="optional",
               print_=0,
               retrieval='optional'):

        """
        SELEXY
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file for selection. Must have explicit numeric fields X and Y. 
            Required=Yes
        perim: Input
            Perimeter file to control selection. Must have perimeter points in clockwise order, with the 
            closed. The fields required are XP,YP,ZP,PTN, and PVALUE (standard perimeter format). All 
            in the file will be used, up to a maximum of 100, or the number that will fit into the real part of the 
            array (usually 100,000 for all except your application on the PC, where it is 10,000). 
            which do not fit will be ignored with a warning. May also contain fields ATTRIB1-4 which can be 
            across to the output file. The value of these fields at the first point is used. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing all records lying within (or optionally outside) the perimeter. The 
            file may be the same as the IN file for in-place operations, unless extra fields ( ATTRIB1-4) 
            the perimeter file are being added. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field in IN file defining the X co-ordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field in IN file defining the Y co-ordinate. 
            Default=Undefined
            Required=Yes
        attrib1: Undefined : Undefined
            Field from the perimeter file to be placed into the output file for all records which are 
            Up to 4 words may be entered, which may be 4 numeric fields or a mixture of alphanumeric and 
            fields totalling 4 words. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Second field from the perimeter file to be placed into the output file for all records selected 
            the perimeter. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Third field from the perimeter file to be placed into the output file for all records selected by 
            perimeter. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Fourth field from the perimeter file to be placed into the output file for all records selected 
            the perimeter. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        outside: 
            Option Description 1 Copies records of a file which have X and Y co-ordinates lying outside the 
            (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        perim: 
            Set to the required PVALUE field to select a particular perimeter from PERIM. If PERIM is not 
            then all perimeters will be processed. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        print: 
            >=1 Display summary stats for each perimeter and DDs. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "selexy "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if perim == "required":
            raise ValueError("perim is required.")

        command += " &perim=" + perim 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if outside != "optional":
            command += " @outside=" + str(outside) 

        if perim != "optional":
            command += " @perim=" + str(perim) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def selper(self,
               in_='required',
               perimin='required',
               out='optional',
               x='required',
               y='required',
               z='required',
               dplus='optional',
               dminus='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               attrib5='optional',
               outside=0,
               pvalue="optional",
               clip=0,
               dplus="optional",
               dminus="optional",
               print_=0,
               retrieval='optional'):

        """
        SELPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file for selection. Must have explicit numeric fields X , Y and Z. If sample clipping is to 
            used then it must also contain A0, B0 and LENGTH fields. 
            Required=Yes
        perimin: Input
            Perimeter file to control selection. The fields required are XP, YP, ZP, PTN and PVALUE (i.e. 
            perimeter format). The file may also contain fields ATTRIB1-5 which can be carried across to 
            output file. The value of these fields at the first point is used. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing all records lying within (or optionally outside) the perimeter. The 
            file may be the same as the IN file for in-place operations, unless extra fields ( ATTRIB1-5) 
            the perimeter file are being added. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            Field in IN file defining the X co-ordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field in IN file defining the Y co-ordinate. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Field in IN file defining the Z co-ordinate. 
            Default=Undefined
            Required=Yes
        dplus: Numeric : PERIMIN
            Field in PERIMIN defining the search distance measured in the increasing direction of the 
            axis. The default field name is DPLUS, which will be used if it exists in the PERIMIN file. 
            Default=DPLUS
            Required=No
        dminus: Numeric : PERIMIN
            Field in PERIMIN defining the search distance measured in the decreasing direction of the 
            axis. The default field name is DMINUS, which will be used if it exists in the PERIMIN file. 
            Default=DMINUS
            Required=No
        attrib1: Undefined : Undefined
            Field from the perimeter file to be placed into the output file for all records which are 
            This may be a multi-word alpha field. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Second field from the perimeter file to be placed into the output file for all records selected 
            the perimeter. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Third field from the perimeter file to be placed into the output file for all records selected by 
            perimeter. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Fourth field from the perimeter file to be placed into the output file for all records selected 
            the perimeter. 
            Default=Undefined
            Required=No
        attrib5: Undefined : Undefined
            Fifth field from the perimeter file to be placed into the output file for all records selected by 
            perimeter. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        outside: 
            Option Description 1 Copies only those records of a file lying outside the perimeter (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        pvalue: 
            Set to the required PVALUE to select a particular perimeter from PERIMIN. If PVALUE is not set, 
            all perimeters will be processed. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        clip: 
            Option Description 1 Clip samples at the perimeter boundary (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dplus: 
            The search distance measured in the increasing direction of the perpendicular axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        dminus: 
            The search distance measured in the decreasing direction of the perpendicular axis. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        print: 
            >=1 Display summary statistics for each perimeter (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "selper "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 

        if out != "optional":
            command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if dplus != "optional":
            command += " *dplus=" + dplus 

        if dminus != "optional":
            command += " *dminus=" + dminus 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if attrib5 != "optional":
            command += " *attrib5=" + attrib5 

        if outside != "optional":
            command += " @outside=" + str(outside) 

        if pvalue != "optional":
            command += " @pvalue=" + str(pvalue) 

        if clip != "optional":
            command += " @clip=" + str(clip) 

        if dplus != "optional":
            command += " @dplus=" + str(dplus) 

        if dminus != "optional":
            command += " @dminus=" + str(dminus) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def seltri(self,
               in_='required',
               wiretr='required',
               wirept='required',
               out='required',
               x='required',
               y='required',
               z='required',
               zone='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               zone="optional",
               select=3,
               toleranc=0.001,
               retrieval='optional'):

        """
        SELTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input point file for selection. Must have explicit numeric fields X , Y and Z. Processing will be 
            if this file is sorted on X. 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file 
            Required=Yes
        wirept: Input
            Input wireframe point file 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file of selected records. File may contain additional fields, including the ZONE 
            
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Field in IN file defining the X co-ordinate. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Field in IN file defining the Y co-ordinate. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Field in IN file defining the Z co-ordinate. 
            Default=Undefined
            Required=Yes
        zone: Undefined : Undefined
            Field in WIRETR file used to identify individual surfaces and solid models. If there is more 
            one surface or solid model and ZONE is not specified, a point may be selected more than once, one 
            each model. If this field is specified and ZONE is not, the ZONE field is copied to the output 
            
            Default=Undefined
            Required=No
        attrib1: Undefined : Undefined
            Field from the WIRETR file to be placed into the output file for all records which are selected. 
            to 4 words may be entered, which may be 4 numeric fields or a mixture of alphanumeric and numeric 
            totalling 4 words. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Second field from the WIRETR file to be placed into the output file for all records selected. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Third field from the WIRETR file to be placed into the output file for all records selected. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Fourth field from the WIRETR file to be placed into the output file for all records selected. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        zone: 
            Used to select one of a number of surface or wireframe models. This parameter must be specified 
            WIRETR contains a mix of surface and solid models. The SELECT parameter will determine whether 
            model is treated as a surface or wireframe. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        select: 
            Option Description 1 select points above a surface 2 select points below a surface 3 select 
            inside a solid 4 select points outside a solid. 
            Range=1,4
            Values=1,2,3,4
            Default=3
            Required=Yes
        toleranc: 
            Tolerance for selection criteria. A positive tolerance will enhance point selection 
            
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        """


        command = "seltri "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if zone != "optional":
            command += " *zone=" + zone 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 

        if zone != "optional":
            command += " @zone=" + str(zone) 


        # Required parameter error check

        if select == "required":
            raise ValueError("select is required.")

        command += " @select=" + str(select) 

        if toleranc != "optional":
            command += " @toleranc=" + str(toleranc) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def selwf(self,
              in_='required',
              wiretr='required',
              wirept='required',
              retrieval='optional'):

        """
        SELWF
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Undefined 
            Required=Yes
        wiretr: Input
            Wireframe Triangle 
            Required=Yes
        wirept: Input
            Wireframe Points 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "selwf "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def setenv(self):

        """
        SETENV
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "setenv "


        self.run_command(command)

    def setval(self,
               in_='required',
               out='required',
               multifld=0,
               retrieval='optional'):

        """
        SETVAL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. If this is the same file as the input, then values will be set in place. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        multifld: 
            Allow multiple field names to be specified if non-zero (0). Up to 20 fields can be supplied. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "setval "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if multifld != "optional":
            command += " @multifld=" + str(multifld) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def sgsim(self,
              in_='optional',
              vmodparm='required',
              proto='optional',
              refdist='optional',
              secfile='optional',
              points='required',
              model='optional',
              trandist='optional',
              stat_tbl='optional',
              x='required',
              y='required',
              z='required',
              grade='required',
              dcwgt='optional',
              secfld1='optional',
              secfld2='optional',
              refgrade='optional',
              refwgt='optional',
              mingrade=0,
              maxgrade="optional",
              trantype=1,
              minsimgr=0,
              maxsimgr="optional",
              lotail=1,
              lopar=1,
              uptail=1,
              uppar=1,
              nsim=1,
              xpppc=1,
              ypppc=1,
              zpppc=1,
              xmin=1,
              ymin=1,
              zmin=1,
              xsize=1,
              ysize=1,
              zsize=1,
              nx=10,
              ny=10,
              nz=10,
              seed="optional",
              mindatpt=1,
              maxdatpt=12,
              maxsimpt=12,
              sstrat=0,
              multgrid=0,
              maxperoc=0,
              sdist1=50,
              sdist2=50,
              sdist3=50,
              sangle1=0,
              sangle2=0,
              sangle3=0,
              ktype=0,
              vmodnum=1,
              corcoeff=0,
              varred=1,
              rectgrid=0,
              dbglevel=0,
              retrieval='optional'):

        """
        SGSIM
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data file. This must include the coordinate fields X , Y , Z and the grade field GRADE 
            may also include the declustering weights field DCWGT and the secondary field SECFLD1 .If an IN 
            Required=No
        vmodparm: Input
            Variogram model parameter file. Each record in this file defines a variogram model type and its 
            
            Required=Yes
        proto: Input
            Input prototype model file to define the regular grid for the simulated points. If the PROTO 
            contains records then simulated points are created for all parent cells that contain at least 
            subcell.If the PROTO file does not contain any records then simulated points are created for 
            parent cells.The number of simulated points per parent cell is defined by the parameters XPPPC 
            YPPPC , ZPPPC .If the file is not specified then the grid is defined by the parameters XMIN , XSIZE 
            NX etc. 
            Required=No
        refdist: Input
            Input reference distribution to define required transformation.As well as specifying the 
            parameter TRANTYPE must be set to 2.The file must include the field REFGRADE , to define the 
            distribution, and may also include the field REFWGT to define declustering weights. 
            Required=No
        secfile: Input
            Secondary file, required if KTYPE = 2,3 or 4. This contains the locally varying mean ( KTYPE =2), 
            external drift variable ( KTYPE =3) or the secondary variable for collocated cokriging ( KTYPE 
            must be a block model file with a cell or subcell (and data value) at each simulated point.- if the 
            of simulated points is defined by the PROTO file and the file does not contain any records then 
            SECFILE file should have the same model parameters (XMORIG, XINC, NX, etc) as the PROTO file and 
            have subcells as defined by parameters XPPPC , YPPPC , ZPPPC at every possible location.- if the 
            file contains records then the SECFILE file must still have the same model parameters and 
            defined by parameters XPPPC , YPPPC , ZPPPC .However the subcells need only cover a 3D 
            volume as defined by the minimum and maximum parent cell in each of the X, Y and Z directions.- if 
            grid of simulated points is defined by parameters XMIN , XSIZE , NX etc then the SECFILE model 
            include a cell or subcell, and data value, at every grid location. The model parameters do not 
            as long as there is a cell or subcell at all grid points. 
            Required=No

        Output Files:
        -------------

        points: Point Data
            Output points file containing simulated points. As well as the coordinate fields XPT, YPT, ZPT 
            file will contain the simulated value GRADE and field SIMNUM giving the simulation 
            number.This is an integer, starting at 1, with a maximum of NSIM . 
            Required=Yes
        model: Block Model
            Output block model file containing simulated points. This contains the same data as the POINTS 
            but in block model format.If multiple realizations have been selected ( NSIM greater than 1) 
            the field name for each realization will be SIM1, SIM2, SIM3, etc. A maximum of 44 realizations 
            allowed in the MODEL file in the single precision version of your project, or 200 in the double 
            version.If the grid of simulated points is defined by the PROTO file then the MODEL file will 
            the same model parameters (XMORIG, XINC, NX, etc); otherwise the model parameters will be 
            on parameters XMIN , XSIZE , NX etc. 
            Required=No
        trandist: Table
            Output file for the transformation table.This will contain the grade field GRADE from the IN 
            file and the field TRANDATA giving the transformed value.The file will be sorted by GRADE . 
            Required=No
        stat_tbl: Table
            Output statistics table giving statistics for the input sample data and the output simulated 
            
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of the GRADE field in the IN sample file. 
            Default=X
            Required=Yes
        y: Numeric : IN
            Y coordinate of the GRADE field in the IN sample file. 
            Default=Y
            Required=Yes
        z: Numeric : IN
            Z coordinate of the GRADE field in the IN sample file. 
            Default=Z
            Required=Yes
        grade: Undefined : Undefined
            Field in the IN sample file defining the grade to be simulated.This may contain either the 
            sample values or the normal score values, depending on parameter TRANTYPE . 
            Default=Undefined
            Required=Yes
        dcwgt: Undefined : Undefined
            Optional declustering weights field in the IN sample file. 
            Default=Undefined
            Required=No
        secfld1: Undefined : Undefined
            Optional secondary field in the IN sample file.The contents of this field depend on the value of 
            KTYPE . 
            Default=Undefined
            Required=No
        secfld2: Undefined : Undefined
            Field in secondary file SECFILE .This is required if KTYPE = 2,3 or 4. The field contains the 
            varying mean ( KTYPE =2), the external drift variable ( KTYPE =3) or the secondary variable for 
            cokriging ( KTYPE =4) . 
            Default=Undefined
            Required=No
        refgrade: Undefined : Undefined
            Reference grade field, defining the reference distribution, in the REFDIST file. 
            Default=Undefined
            Required=No
        refwgt: Undefined : Undefined
            Optional reference weight field, defining declustering weights, in the REFDIST file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        mingrade: 
            Minimum GRADE value input from the IN sample file. Values less than the minimum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxgrade: 
            Maximum GRADE value input from the IN sample file. Values greater than the maximum are ignored. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        trantype: 
            Transform data option: 0 = no transformation; the field GRADE in the IN sample file is assumed to 
            a standard normal distribution, and the simulated value GRADE in the output POINTS file will 
            be untransformed. 1 = transform the GRADE values using the standard normal distribution. 2 = 
            the GRADE values using the distribution defined in the input file REFDIST . 
            Range=0,2
            Values=0,2
            Default=1
            Required=No
        minsimgr: 
            Minimum simulated grade value.This is used to restrict values in the back-transformation 
            
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        maxsimgr: 
            999999 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        lotail: 
            Back-transformation method in the lower tail of the distribution to a minimum grade of 
            . 1 = Linear interpolation. 2 = Power model interpolation.The power used is defined by LOPAR . 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        lopar: 
            Power parameter used in back-transformation of grades in the lower tail of the distribution to 
            minimum of MINSIMGR .LOTAIL must be set to 2. 
            Range=0,+
            Values=Undefined
            Default=1
            Required=No
        uptail: 
            Back-transformation method in the upper tail of the distribution to a maximum grade of 
            . 1 = Linear interpolation. 2 = Power model interpolation.The power used is defined by UPPAR . 4 = 
            model extrapolation using power parameter defined by UPPAR . 
            Range=1,4
            Values=1,2,4
            Default=1
            Required=No
        uppar: 
            Power parameter used in back-transformation of grades in the upper tail of the distribution to 
            maximum of MAXSIMGR .UPTAIL must be set to 2 or 4. 
            Range=0,+
            Values=Undefined
            Default=1
            Required=No
        nsim: 
            Number of realizations to generate.If a MODEL file has been selected then the maximum number of 
            is 44 for the single precision version of Datamine Studio packages or 200 for the double 
            version. If a MODEL file has not been selected then there is no limit on the maximum number of 
            
            Range=1,+
            Values=Undefined
            Default=1
            Required=No
        xpppc: 
            The number of simulated points per parent cell to be created in the X direction in the output 
            file. This corresponds to the number of subcells per parent cell in the X direction.The value of 
            XPPPC is also stored as the default value of implicit field XPPPC in the output POINTS file so 
            it can be accessed by subsequent processes eg CSMODEL. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ypppc: 
            The number of simulated points per parent cell to be created in theY direction in the output 
            file. This corresponds to the number of subcells per parent cell in the Y direction.The value of 
            YPPPC is also stored as the default value of implicit field YPPPC in the output POINTS file so 
            it can be accessed by subsequent processes eg CSMODEL. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zpppc: 
            The number of simulated points per parent cell to be created in the Z direction in the output 
            file. This corresponds to the number of subcells per parent cell in the Z direction.The value of 
            ZPPPC is also stored as the default value of implicit field ZPPPC in the output POINTS file so 
            it can be accessed by subsequent processes eg CSMODEL. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xmin: 
            Minimum X coordinate of the regular grid of simulated points created in the output POINTS and 
            files. If a PROTO file is specified this parameter is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ymin: 
            Minimum Y coordinate of the regular grid of simulated points created in the output POINTS and 
            files. If a PROTO file is specified this parameter is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zmin: 
            Minimum Z coordinate of the regular grid of simulated points created in the output POINTS and 
            files. If a PROTO file is specified this parameter is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xsize: 
            Spacing between simulated points inthe X direction. If a PROTO file is specified this 
            is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ysize: 
            Spacing between simulated points inthe Y direction. If a PROTO file is specified this 
            is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zsize: 
            Spacing between simulated points inthe Z direction. If a PROTO file is specified this 
            is ignored. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        nx: 
            Number of simulated points in the X direction. If a PROTO file is specified this parameter is 
            
            Range=1,+
            Values=Undefined
            Default=10
            Required=No
        ny: 
            Number of simulated points in the Y direction.If a PROTO file is specified this parameter is 
            
            Range=1,+
            Values=Undefined
            Default=10
            Required=No
        nz: 
            Number of simulated points in the Z direction. If a PROTO file is specified this parameter is 
            
            Range=1,+
            Values=Undefined
            Default=10
            Required=No
        seed: 
            nan 
            Range=1,+
            Values=Undefined
            Default=Undefined
            Required=No
        mindatpt: 
            The minimum number of original data to be used to simulate a grid node. If there are fewer than 
            data points the node is not simulated. 
            Range=1,+
            Values=Undefined
            Default=1
            Required=No
        maxdatpt: 
            The maximum number of original data to be used to simulate a grid node. If there are more than 
            data points the nearest points are selected. 
            Range=1,48
            Values=Undefined
            Default=12
            Required=No
        maxsimpt: 
            The maximum number of previously simulated nodes to use for the simulation of another node. 
            Range=1,48
            Values=Undefined
            Default=12
            Required=No
        sstrat: 
            Search strategy: 0 = data and previously simulated grid nodes are searched separately.Data 
            searched with a super block search and previously simulated nodes with a spiral search. 1 = data 
            relocated to grid nodes and a spiral search is used.MINDATPT and MAXDATPT are not then 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        multgrid: 
            Search strategy for previously simulated nodes: 0 = spiral search ifgreater than or equal to 1 
            MULTGRID defines the number of grids for a multiple grid simulation. 
            Range=nan
            Values=0,9 Value: 0,1,2,3,4,5,6,7,8,9
            Default=0
            Required=No
        maxperoc: 
            Maximum number of original data points per octant.If set to zero then octant search is not 
            octant search is used then MAXDATPT is ignored. 
            Range=0,+
            Values=Undefined
            Default=0
            Required=No
        sdist1: 
            Search distance in the X direction. This may be a rotated X direction if parameters SANGLE1 , 
            or SANGLE3 are non zero. 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        sdist2: 
            Search distance in the Y direction. This may be a rotated Y direction if parameters SANGLE1 , 
            or SANGLE3 are non zero. 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        sdist3: 
            Search distance in the Z direction. This may be a rotated Z direction if parameters SANGLE1 , 
            or SANGLE3 are non zero. 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        sangle1: 
            First rotation angle for search ellipsoid.The rotation must be around the Z axis. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        sangle2: 
            Second rotation angle for search ellipsoid. The rotation must be around the X axis. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        sangle3: 
            Third rotation angle for search ellipsoid. The rotation must be around the Y axis. 
            Range=-360,360
            Values=Undefined
            Default=0
            Required=No
        ktype: 
            Kriging type: 0 = simple kriging 1 = ordinary kriging 2 = simple kriging with a locally varying 
            where the mean is defined by field SECFLD2 in file SECFILE . 3 = kriging with an external drift 
            the drift is defined by field SECFLD2 in file SECFILE . 4 = collocated cokriging with one 
            grade defined by field SECFLD2 in file SECFILE . 
            Range=0,4
            Values=0,1,2,3,4
            Default=0
            Required=No
        vmodnum: 
            Variogram model number in VMODPARM file. 
            Range=nan
            Values=Undefined
            Default=1
            Required=No
        corcoeff: 
            Correlation coefficient used for collocated kriging (ie when KTYPE = 4). 
            Range=nan
            Values=Undefined
            Default=0
            Required=No
        varred: 
            Variance reduction factor used for collocated kriging (ie when KTYPE = 4) . 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        rectgrid: 
            Rectangular grid flag. This only applies if there are cells in the input PROTO model. Option 
            0 Simulated points will only be output where the points 1 Simulated points will be output at all 
            No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        dbglevel: 
            Debug level.Controls the amount of debug information written to the debug file _sgsdbg.txt. 0 
            the minimum and 3 the maximum. 
            Range=0,3
            Values=0,1,2,3
            Default=0
            Required=No
        """


        command = "sgsim "

        if in_ != "optional":
            command += " &in=" + in_ 


        # Required input error check

        if vmodparm == "required":
            raise ValueError("vmodparm is required.")

        command += " &vmodparm=" + vmodparm 

        if proto != "optional":
            command += " &proto=" + proto 

        if refdist != "optional":
            command += " &refdist=" + refdist 

        if secfile != "optional":
            command += " &secfile=" + secfile 


        # Required output error check

        if points == "required":
            raise ValueError("points is required.")

        command += " &points=" + points 

        if model != "optional":
            command += " &model=" + model 

        if trandist != "optional":
            command += " &trandist=" + trandist 

        if stat_tbl != "optional":
            command += " &stat_tbl=" + stat_tbl 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if dcwgt != "optional":
            command += " *dcwgt=" + dcwgt 

        if secfld1 != "optional":
            command += " *secfld1=" + secfld1 

        if secfld2 != "optional":
            command += " *secfld2=" + secfld2 

        if refgrade != "optional":
            command += " *refgrade=" + refgrade 

        if refwgt != "optional":
            command += " *refwgt=" + refwgt 

        if mingrade != "optional":
            command += " @mingrade=" + str(mingrade) 

        if maxgrade != "optional":
            command += " @maxgrade=" + str(maxgrade) 

        if trantype != "optional":
            command += " @trantype=" + str(trantype) 

        if minsimgr != "optional":
            command += " @minsimgr=" + str(minsimgr) 

        if maxsimgr != "optional":
            command += " @maxsimgr=" + str(maxsimgr) 

        if lotail != "optional":
            command += " @lotail=" + str(lotail) 

        if lopar != "optional":
            command += " @lopar=" + str(lopar) 

        if uptail != "optional":
            command += " @uptail=" + str(uptail) 

        if uppar != "optional":
            command += " @uppar=" + str(uppar) 

        if nsim != "optional":
            command += " @nsim=" + str(nsim) 

        if xpppc != "optional":
            command += " @xpppc=" + str(xpppc) 

        if ypppc != "optional":
            command += " @ypppc=" + str(ypppc) 

        if zpppc != "optional":
            command += " @zpppc=" + str(zpppc) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if zmin != "optional":
            command += " @zmin=" + str(zmin) 

        if xsize != "optional":
            command += " @xsize=" + str(xsize) 

        if ysize != "optional":
            command += " @ysize=" + str(ysize) 

        if zsize != "optional":
            command += " @zsize=" + str(zsize) 

        if nx != "optional":
            command += " @nx=" + str(nx) 

        if ny != "optional":
            command += " @ny=" + str(ny) 

        if nz != "optional":
            command += " @nz=" + str(nz) 

        if seed != "optional":
            command += " @seed=" + str(seed) 

        if mindatpt != "optional":
            command += " @mindatpt=" + str(mindatpt) 

        if maxdatpt != "optional":
            command += " @maxdatpt=" + str(maxdatpt) 

        if maxsimpt != "optional":
            command += " @maxsimpt=" + str(maxsimpt) 

        if sstrat != "optional":
            command += " @sstrat=" + str(sstrat) 

        if multgrid != "optional":
            command += " @multgrid=" + str(multgrid) 

        if maxperoc != "optional":
            command += " @maxperoc=" + str(maxperoc) 

        if sdist1 != "optional":
            command += " @sdist1=" + str(sdist1) 

        if sdist2 != "optional":
            command += " @sdist2=" + str(sdist2) 

        if sdist3 != "optional":
            command += " @sdist3=" + str(sdist3) 

        if sangle1 != "optional":
            command += " @sangle1=" + str(sangle1) 

        if sangle2 != "optional":
            command += " @sangle2=" + str(sangle2) 

        if sangle3 != "optional":
            command += " @sangle3=" + str(sangle3) 

        if ktype != "optional":
            command += " @ktype=" + str(ktype) 

        if vmodnum != "optional":
            command += " @vmodnum=" + str(vmodnum) 

        if corcoeff != "optional":
            command += " @corcoeff=" + str(corcoeff) 

        if varred != "optional":
            command += " @varred=" + str(varred) 

        if rectgrid != "optional":
            command += " @rectgrid=" + str(rectgrid) 

        if dbglevel != "optional":
            command += " @dbglevel=" + str(dbglevel) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def slimod(self,
               proto='required',
               in_='required',
               out='required',
               retrieval='optional'):

        """
        SLIMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Input prototype model describing the model parameters. Normally set up by PROTOM. Must 
            the numeric fields XC, YC, ZC, IJK (explicit) and XMORIG, YMORIG, ZMORIG, NX, NY, NZ (implicit) 
            XINC, YINC, ZINC as explicit fields. 
            Required=Yes
        in: Input
            Input model file. 
            Required=Yes

        Output Files:
        -------------

        out: Block Model
            Output model file. This will be sorted on IJK. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "slimod "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def sliper(self,
               perimin='required',
               intersec='optional',
               perimout='optional',
               mode=1,
               startpos="optional",
               stepsize="optional",
               numsteps="optional",
               close=1,
               retrieval='optional'):

        """
        SLIPER
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file containing at least 2 perimeters. This must be in standard DATAMINE 
            [XP,YP,ZP,PTN,PVALUE, all numeric and explicit] with XP and YP variable and ZP fixed for each 
            The file must contain at least two perimeters with different ZP values. 
            Required=Yes

        Output Files:
        -------------

        intersec: Undefined
            An optional output intersections file containing the coordinates X1,Y1,Z1 of the end points 
            each intersection line, and the PVALUE of the intersected perimeter. At least 1 output file 
            be specified. 
            Required=No
        perimout: String
            An optional output perimeter file in standard datamine format containing the intersection 
            At least 1 output file must be specified. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        mode: 
            Option Description 1 FOR A PLAN TO NS CONVERSION. 2 FOR A PLAN TO EW CONVERSION. 3 FOR A NS TO EW 
            4 FOR A NS TO PLAN CONVERSION. 5 FOR A EW TO NS CONVERSION. 6 FOR A EW TO PLAN CONVERSION. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=1
            Required=Yes
        startpos: 
            Starting position for intersection planes. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        stepsize: 
            Interval between intersection planes. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        numsteps: 
            Number of intersection planes. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        close: 
            nan 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "sliper "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 

        if intersec != "optional":
            command += " &intersec=" + intersec 

        if perimout != "optional":
            command += " &perimout=" + perimout 


        # Required parameter error check

        if mode == "required":
            raise ValueError("mode is required.")

        command += " @mode=" + str(mode) 


        # Required parameter error check

        if startpos == "required":
            raise ValueError("startpos is required.")

        command += " @startpos=" + str(startpos) 


        # Required parameter error check

        if stepsize == "required":
            raise ValueError("stepsize is required.")

        command += " @stepsize=" + str(stepsize) 


        # Required parameter error check

        if numsteps == "required":
            raise ValueError("numsteps is required.")

        command += " @numsteps=" + str(numsteps) 

        if close != "optional":
            command += " @close=" + str(close) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def smuhis(self,
               in_='required',
               vmodparm='optional',
               perim='optional',
               out='required',
               value='required',
               variance='required',
               pcode='optional',
               dvmethod=3,
               vartype=1,
               smudist=1,
               disvar=0,
               density=1,
               addcon=0,
               recovery=1,
               binsize=1,
               minimum=0,
               numbins=50,
               vmodnum=1,
               log=0,
               smuxinc=1,
               smuyinc=1,
               smuzinc=1,
               xstep=1,
               ystep=1,
               zstep=1,
               ipoints=6,
               jpoints=6,
               kpoints=6,
               datamean="optional",
               infoeff="optional",
               retrieval='optional'):

        """
        SMUHIS
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. 
            Required=Yes
        vmodparm: Input
            Variogram model parameter file. A variogram model is only required if DVMETHOD = 2 or 3. 
            Required=No
        perim: Input
            Optional bench perimeter file. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output file. This will contain one record for each histogram bin plus one record for the total 
            
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            A field in the model file which contains the kriged grade estimate. 
            Default=Undefined
            Required=Yes
        variance: Undefined : Undefined
            A field in the model file which contains the kriging variance (eg as created by ESTIMA). 
            Default=Undefined
            Required=Yes
        pcode: Undefined : Undefined
            Optional perimeter key field. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        dvmethod: 
            Method for calculating dispersion variance (3) Option Description 1 by parameter DISVAR 2 
            defines the variogram model and the dimensions of the SMU by parameter. A single dispersion 
            is calculated for the SMU within a parent cell, and this value is used for all cells and subcells. 
            user defines the variogram model and the dimensions of the SMU by parameter. A dispersion 
            is calculated for the SMU within each cell and subcell in the model. 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        vartype: 
            Method for calculating the variance of a sample in a cell (1). This only applies if DVMETHOD = 3. 
            Description 1 the exact dimensions of the cell are used 2 the cell is approximated to one of a 
            number of cells. The values for these cells are stored to avoid the need for recalculation for 
            cell of the same size. This gives a large speed improvement 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        smudist: 
            Distribution of SMUs: (1) Option Description 1 normal 2 lognormal 3 truncated normal 
            Range=1, 3
            Values=1, 2,3
            Default=1
            Required=No
        disvar: 
            Dispersion variance value. (0) This is only required if DVMETHOD =1. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        density: 
            Default density if no density field is defined in the model. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        addcon: 
            Additive constant for three parameter lognormal distribution of SMUs. (0). This only applies 
            SMUDIST =2. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        recovery: 
            Value for recovered fraction (1). If the recovered fraction is greater than this value then the 
            block is considered above cut-off. If the recovered fraction is less than 1- RECOVERY then none 
            the block is considered to be above cut-off. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        binsize: 
            Bin width for histogram. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        minimum: 
            Lower bound of first bin. If SMUDIST =3, then MINIMUM must be set to zero. (0) 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        numbins: 
            Number of bins, maximum 200. (50) 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        vmodnum: 
            Variogram model reference number as defined by the VREFNUM field in the VMODPARM file. This 
            applies if DVMETHOD = 2 or 3. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        log: 
            Log/Normal variogram flag. Default(0). The variogram model, as defined by VGRAM , is Normal if 
            =0 or Lognormal if LOG =1. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        smuxinc: 
            X dimension of the Selective Mining Unit (1). This only applies if DVMETHOD = 2 or 3. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        smuyinc: 
            Y dimension of the Selective Mining Unit (1) This only applies if DVMETHOD 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        smuzinc: 
            Z dimension of the Selective Mining Unit (1) This only applies if DVMETHOD 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xstep: 
            X step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in X. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ystep: 
            Y step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in Y. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zstep: 
            Z step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in Z. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ipoints: 
            Number of discretisation points in X dimension to simulate model cell (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        jpoints: 
            Number of discretisation points in Y dimension to simulate model cell (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        kpoints: 
            Number of discretisation points in Z dimension to simulate model cell (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        datamean: 
            Mean grade of the input data (*VALUE). This is compulsory if both a normal variogram model is 
            (@LOG=0) and a lognormal distribution of SMUs is selected (@SMUDIST=3). The value is used in 
            calculation of the variance. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        infoeff: 
            nan 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "smuhis "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 

        if perim != "optional":
            command += " &perim=" + perim 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if variance == "required":
            raise ValueError("variance is required.")

        command += " *variance=" + variance 

        if pcode != "optional":
            command += " *pcode=" + pcode 

        if dvmethod != "optional":
            command += " @dvmethod=" + str(dvmethod) 

        if vartype != "optional":
            command += " @vartype=" + str(vartype) 

        if smudist != "optional":
            command += " @smudist=" + str(smudist) 

        if disvar != "optional":
            command += " @disvar=" + str(disvar) 

        if density != "optional":
            command += " @density=" + str(density) 

        if addcon != "optional":
            command += " @addcon=" + str(addcon) 

        if recovery != "optional":
            command += " @recovery=" + str(recovery) 

        if binsize != "optional":
            command += " @binsize=" + str(binsize) 

        if minimum != "optional":
            command += " @minimum=" + str(minimum) 

        if numbins != "optional":
            command += " @numbins=" + str(numbins) 

        if vmodnum != "optional":
            command += " @vmodnum=" + str(vmodnum) 

        if log != "optional":
            command += " @log=" + str(log) 

        if smuxinc != "optional":
            command += " @smuxinc=" + str(smuxinc) 

        if smuyinc != "optional":
            command += " @smuyinc=" + str(smuyinc) 

        if smuzinc != "optional":
            command += " @smuzinc=" + str(smuzinc) 

        if xstep != "optional":
            command += " @xstep=" + str(xstep) 

        if ystep != "optional":
            command += " @ystep=" + str(ystep) 

        if zstep != "optional":
            command += " @zstep=" + str(zstep) 

        if ipoints != "optional":
            command += " @ipoints=" + str(ipoints) 

        if jpoints != "optional":
            command += " @jpoints=" + str(jpoints) 

        if kpoints != "optional":
            command += " @kpoints=" + str(kpoints) 

        if datamean != "optional":
            command += " @datamean=" + str(datamean) 

        if infoeff != "optional":
            command += " @infoeff=" + str(infoeff) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def smumod(self,
               in_='required',
               vmodparm='optional',
               out='required',
               value='required',
               variance='required',
               frrec='required',
               valrec='required',
               cutoff=1.0,
               dvmethod=3,
               vartype=1,
               smudist=1,
               disvar=0,
               addcon=0,
               vmodnum=1,
               log=0,
               smuxinc=1,
               smuyinc=1,
               smuzinc=1,
               xstep=1,
               ystep=1,
               zstep=1,
               ipoints=6,
               jpoints=6,
               kpoints="optional",
               datamean="optional",
               infoeff="optional",
               retrieval='optional'):

        """
        SMUMOD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file containing the kriged grade estimate and the kriging variance. 
            Required=Yes
        vmodparm: Input
            Variogram model parameter file. A variogram model is only required if DVMETHOD = 2 or 3. 
            Required=No

        Output Files:
        -------------

        out: Block Model
            Output model file. 
            Required=Yes

        Fields:
        -------

        value: Undefined : Undefined
            A field in the model file which contains the kriged grade estimate. 
            Default=Undefined
            Required=Yes
        variance: Undefined : Undefined
            A field in the model file which contains the kriging variance (eg as created by ESTIMA). 
            Default=Undefined
            Required=Yes
        frrec: Undefined : Undefined
            The field to be created in the output model to store the recovered fraction. 
            Default=Undefined
            Required=Yes
        valrec: Undefined : Undefined
            The field to be created in the output model to store the grade of the recovered fraction. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        cutoff: 
            Cut-off grade for calculation of recovered fraction and grade. 
            Range=0.000001,+
            Values=Undefined
            Default=1.0
            Required=No
        dvmethod: 
            Method for calculating dispersion variance (3) Option Description 1 by parameter DISVAR 2 
            defines variogram model and the dimensions of the SMU by parameter. A single dispersion 
            is calculated for the SMU within a parent cell, and this value is used for all cells and subcells. 
            user defines variogram model and the dimensions of the SMU by parameter. A dispersion variance 
            calculated for the SMU within each cell and subcell in the model. 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        vartype: 
            Method for calculating the variance of a sample in a cell (1). This only applies if DVMETHOD = 3. 
            Description 1 the exact dimensions of the cell are used 2 the cell is approximated to one of a 
            number of cells. The values for these cells are stored to avoid the need for recalculation for 
            cell of the same size. This gives a large speed improvement 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        smudist: 
            Distribution of SMUs: (1) =1 normal =2 lognormal =3 truncated normal 
            Range=1, 3
            Values=1, 2,3
            Default=1
            Required=No
        disvar: 
            Dispersion variance value. (0) This is only required if DVMETHOD =1. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        addcon: 
            Additive constant for three parameter lognormal distribution of SMUs. (0). This only applies 
            SMUDIST =2. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        vmodnum: 
            Variogram model reference number as defined by the VREFNUM field in the VMODPARM file. This 
            applies if DVMETHOD = 2 or 3. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        log: 
            Log/Normal variogram flag. Default(0). The variogram model, as defined by VMODNUM is, Normal 
            LOG =0 Lognormal if LOG =1. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        smuxinc: 
            X dimension of the Selective Mining Unit (1). This only applies if DVMETHOD = 2 or 3. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        smuyinc: 
            Y dimension of the Selective Mining Unit (1) This only applies if DVMETHOD 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        smuzinc: 
            Z dimension of the Selective Mining Unit (1) This only applies if DVMETHOD 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        xstep: 
            X step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in X. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ystep: 
            Y step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in Y. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        zstep: 
            Z step size for subcell approximation in variance calculations. This is only used if DVMETHOD 
            and VARTYPE =2. This must be less than the parent cell dimension in Z. (1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ipoints: 
            Number of discretisation points in X to simulate model cell (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        jpoints: 
            Number of discretisation points in Y to simulate model cell (6) 
            Range=Undefined
            Values=Undefined
            Default=6
            Required=No
        kpoints: 
            nan 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        datamean: 
            Mean grade of the input data (*VALUE). This is compulsory if both a normal variogram model is 
            (@LOG=0) and a lognormal distribution of SMUs is selected (@SMUDIST=3). The value is used in 
            calculation of the variance. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        infoeff: 
            nan 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "smumod "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required field error check

        if variance == "required":
            raise ValueError("variance is required.")

        command += " *variance=" + variance 


        # Required field error check

        if frrec == "required":
            raise ValueError("frrec is required.")

        command += " *frrec=" + frrec 


        # Required field error check

        if valrec == "required":
            raise ValueError("valrec is required.")

        command += " *valrec=" + valrec 

        if cutoff != "optional":
            command += " @cutoff=" + str(cutoff) 

        if dvmethod != "optional":
            command += " @dvmethod=" + str(dvmethod) 

        if vartype != "optional":
            command += " @vartype=" + str(vartype) 

        if smudist != "optional":
            command += " @smudist=" + str(smudist) 

        if disvar != "optional":
            command += " @disvar=" + str(disvar) 

        if addcon != "optional":
            command += " @addcon=" + str(addcon) 

        if vmodnum != "optional":
            command += " @vmodnum=" + str(vmodnum) 

        if log != "optional":
            command += " @log=" + str(log) 

        if smuxinc != "optional":
            command += " @smuxinc=" + str(smuxinc) 

        if smuyinc != "optional":
            command += " @smuyinc=" + str(smuyinc) 

        if smuzinc != "optional":
            command += " @smuzinc=" + str(smuzinc) 

        if xstep != "optional":
            command += " @xstep=" + str(xstep) 

        if ystep != "optional":
            command += " @ystep=" + str(ystep) 

        if zstep != "optional":
            command += " @zstep=" + str(zstep) 

        if ipoints != "optional":
            command += " @ipoints=" + str(ipoints) 

        if jpoints != "optional":
            command += " @jpoints=" + str(jpoints) 

        if kpoints != "optional":
            command += " @kpoints=" + str(kpoints) 

        if datamean != "optional":
            command += " @datamean=" + str(datamean) 

        if infoeff != "optional":
            command += " @infoeff=" + str(infoeff) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def sortx(self,
              in_='required',
              out='required',
              key1='required',
              key2='optional',
              key3='optional',
              key4='optional',
              key5='optional',
              key6='optional',
              key7='optional',
              key8='optional',
              key9='optional',
              key10='optional',
              order=1,
              keysfrst=1,
              roworder=1,
              retrieval='optional'):

        """
        SORTX
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be sorted. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Sorted file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for sorting on. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        order: 
            Option Description 1 for ascending order 2 for descending order (1) 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        keysfrst: 
            Option Description 0 output fields in the same order as the input table 1 output key fields first 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        roworder: 
            Option Description 0 Rows which contain duplicate key field values could be in any order 
            1 Rows which contain duplicate key field values will be in the input file order (slower) (1) 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "sortx "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if order != "optional":
            command += " @order=" + str(order) 

        if keysfrst != "optional":
            command += " @keysfrst=" + str(keysfrst) 

        if roworder != "optional":
            command += " @roworder=" + str(roworder) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def splat(self,
              in1='required',
              in2='required',
              retrieval='optional'):

        """
        SPLAT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First input file. 
            Required=Yes
        in2: Input
            Second input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "splat "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def splico(self,
               proto='optional',
               bound='optional',
               wiretr='optional',
               wirept='optional',
               model='optional',
               plot='required',
               string='optional',
               x='optional',
               y='optional',
               field='optional',
               seam='optional',
               cmin="optional",
               cmax="optional",
               ci="optional",
               gridinc="optional",
               plane="optional",
               position="optional",
               top="optional",
               bottom="optional",
               hilight="optional",
               hi="optional",
               charsize=3.5,
               nan=1,
               ndc=-1,
               power=2,
               radius=0,
               pvalst=1.0,
               pvalinc=1.0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               append=0,
               retrieval='optional'):

        """
        SPLICO
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. Optional only if APPEND=1 
            Required=No
        bound: Input
            Optional bounding perimeter. No contours will produced outside this perimeter. Must contain 
            XP, YP, ZP, PTN and PVALUE. This file must contain only one perimeter, must be clockwise and must 
            be closed. 
            Required=No
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=No
        wirept: Input
            Input wireframe or raw data point file. The raw data point file must be sorted on X field. 
            Required=No
        model: Input
            Input model file. Must contain fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, ZMORIG, NX, 
            NZ, IJK + FIELD field. 
            Required=No

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes
        string: String
            Optional output string file. If selected this file be written out as well as the plot file and 
            contain fields XP, YP, ZP, PTN and PVALUE. The value of PVALUE field is determined from the 
            and PVALINC parameters. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            X field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Y field in input point file. Only required if contouring raw data. 
            Default=Undefined
            Required=No
        field: Undefined : Undefined
            Field to be contoured. Only required if contouring raw data or solid model. 
            Default=Undefined
            Required=No
        seam: Undefined : Undefined
            Seam ID field. Only required if contouring solid model. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        cmin: 
            Minimum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        cmax: 
            Maximum contour value in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        ci: 
            Contour interval in user data units. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        gridinc: 
            Grid interval of mesh in user data units. This value is used to set up an internal mesh using input 
            It is important to note that this mesh is used for contouring and not the original data. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        plane: 
            Plane, 'XY', 'XZ' or 'YZ' through the model. Default is the XY plane. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        position: 
            Position of the plane. For example if the XY plane is used a Z position is needed. Only required if 
            TOP nor BOTTOM are specified. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        top: 
            Value of FIELD for which top of seam contour required. Only required if neither POSITION nor 
            appear. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        bottom: 
            Value of FIELD for which base of seam contour required. Only required if neither POSITION nor 
            appear. Both TOP and BOTTOM set for an isopach. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hilight: 
            Highlight every Nth contour with HI. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        hi: 
            Colour [as 'pen' number] for highlighting. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        charsize: 
            Character size in millimetres (3.5). 
            Range=Undefined
            Values=Undefined
            Default=3.5
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        ndc: 
            Number of dec. places for annotation. Default value is for no annotation(-1). 
            Range=Undefined
            Values=Undefined
            Default=-1
            Required=No
        power: 
            Interpolation power. Used for solid model or raw data contouring (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        radius: 
            Interpolation search radius. Used for solid model or raw data contouring (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        pvalst: 
            If STRING file requested, for the first string to be written PVALUE will be set to PVALST. For the 
            strings PVALUE is incremented by PVALINC (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        pvalinc: 
            If STRING file requested, PVALUE value increment (1.0). 
            Range=Undefined
            Values=Undefined
            Default=1.0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimeter. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimeter. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "splico "

        if proto != "optional":
            command += " &proto=" + proto 

        if bound != "optional":
            command += " &bound=" + bound 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 

        if wirept != "optional":
            command += " &wirept=" + wirept 

        if model != "optional":
            command += " &model=" + model 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if string != "optional":
            command += " &string=" + string 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if field != "optional":
            command += " *field=" + field 

        if seam != "optional":
            command += " *seam=" + seam 


        # Required parameter error check

        if cmin == "required":
            raise ValueError("cmin is required.")

        command += " @cmin=" + str(cmin) 


        # Required parameter error check

        if cmax == "required":
            raise ValueError("cmax is required.")

        command += " @cmax=" + str(cmax) 


        # Required parameter error check

        if ci == "required":
            raise ValueError("ci is required.")

        command += " @ci=" + str(ci) 


        # Required parameter error check

        if gridinc == "required":
            raise ValueError("gridinc is required.")

        command += " @gridinc=" + str(gridinc) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if position != "optional":
            command += " @position=" + str(position) 

        if top != "optional":
            command += " @top=" + str(top) 

        if bottom != "optional":
            command += " @bottom=" + str(bottom) 

        if hilight != "optional":
            command += " @hilight=" + str(hilight) 

        if hi != "optional":
            command += " @hi=" + str(hi) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if ndc != "optional":
            command += " @ndc=" + str(ndc) 

        if power != "optional":
            command += " @power=" + str(power) 

        if radius != "optional":
            command += " @radius=" + str(radius) 

        if pvalst != "optional":
            command += " @pvalst=" + str(pvalst) 

        if pvalinc != "optional":
            command += " @pvalinc=" + str(pvalinc) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 

        if append != "optional":
            command += " @append=" + str(append) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def split(self,
              in_='required',
              fnames='optional',
              key='required',
              ndp=0,
              maxfiles=50,
              retrieval='optional'):

        """
        SPLIT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. This file does not have to be sorted on the key field. 
            Required=Yes
        fnames: Input
            Input file defining the file names to be used for each unique value in the KEYVALUE field. Must be 
            by FILENAME and have the fields; FILENAME A - Output file name to be created. KEYVALUE A/N- Value 
            the key field which will be written to the file defined in FILENAME. This field can be either 
            or numeric but must be the same type as the KEY field. A record in the IN file may be written to more 
            one output file by having multiple records with the same KEYVALUE and different FILENAMEs in 
            FNAMES file. Similarly, records with different key values can be written to the same file by 
            multiple records with different KEYVALUEs and the same FILENAME. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        key: Undefined : Undefined
            Alphanumeric or numeric key field in the IN file used for selecting data. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        ndp: 
            Number of decimal places to be used for creating file names from a numeric KEY field (0). Option 
            0 do not display any digits after the decimal point. >0= replace the decimal point by the letter 
            and display the specified number of digits following it. -1= create a file name using 
            notation. 
            Range=-1,1
            Values=-1,1
            Default=0
            Required=No
        maxfiles: 
            Maximum number of files which will be created (50). If this maximum is exceeded an error message 
            printed and the process is terminated. The maximum allowed value is 250 files. Rules for 
            file names from KEY field; If KEY field is alphanumeric: - only the first eight characters will 
            used. - if a blank is encountered in the KEY value only those characters preceding the blank will 
            used. - if a decimal point is encountered only the character imediately following the decimal 
            will be used. If KEY field is numeric: - all file names are preceeded by one of two letters; P = plus 
            = minus - file names that are too long due to a large number of decimal places will use only the 
            eight characters. - all numbers with more than 7 digits preceeding the decimal point will be 
            to scientific notation. ie. 1.23456E+09 becomes P1235P06 - trace (TR) are written to the file 
            - maximum values (+) are written to PLUS. - undefined values (-) are written to MINUS. 
            Range=Undefined
            Values=Undefined
            Default=50
            Required=No
        """


        command = "split "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fnames != "optional":
            command += " &fnames=" + fnames 


        # Required field error check

        if key == "required":
            raise ValueError("key is required.")

        command += " *key=" + key 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if maxfiles != "optional":
            command += " @maxfiles=" + str(maxfiles) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def st1gx(self,
              in_='required',
              value='required',
              binsize="optional",
              minimum="optional",
              sturgess=0,
              logmode=0,
              retrieval='optional'):

        """
        ST1GX
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        value: Undefined : Undefined
            Field for statistics. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        binsize: 
            Bin width for histogram [computed]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        minimum: 
            Minimum bin limit [computed]. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        sturgess: 
            Option Description 1 class interval [bin width] and minimum class value [bin limit] are 
            according to the following equation: Class interval = 1 + 3.3 log N [Sturgess Rule] and values 
            each bin are placed at the mid-point of each class (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        logmode: 
            Option Description 1 log transformation [base 10] is calculated (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "st1gx "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if binsize != "optional":
            command += " @binsize=" + str(binsize) 

        if minimum != "optional":
            command += " @minimum=" + str(minimum) 

        if sturgess != "optional":
            command += " @sturgess=" + str(sturgess) 

        if logmode != "optional":
            command += " @logmode=" + str(logmode) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def statnp(self,
               in_='required',
               fieldlst='optional',
               f1='optional',
               f2='optional',
               f3='optional',
               f4='optional',
               f5='optional',
               f6='optional',
               f7='optional',
               f8='optional',
               f9='optional',
               f10='optional',
               fieldnam='optional',
               plot=0,
               retrieval='optional'):

        """
        STATNP
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        f1: Undefined : Undefined
            First field for statistics. No fields specified means all. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field for statistics. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field for statistics. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field for statistics. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field for statistics. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field for statistics. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field for statistics. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field for statistics. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Ninth field for statistics. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field for statistics. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        plot: 
            Option Description 1 send cumulative frequency plots to printer or print No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "statnp "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if plot != "optional":
            command += " @plot=" + str(plot) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def stats(self,
              in_='required',
              fieldlst='optional',
              out='optional',
              f1='optional',
              f2='optional',
              f3='optional',
              f4='optional',
              f5='optional',
              f6='optional',
              f7='optional',
              f8='optional',
              f9='optional',
              f10='optional',
              f11='optional',
              f12='optional',
              f13='optional',
              f14='optional',
              f15='optional',
              f16='optional',
              f17='optional',
              f18='optional',
              f19='optional',
              f20='optional',
              fieldnam='optional',
              key1='optional',
              key2='optional',
              key3='optional',
              key4='optional',
              key5='optional',
              key6='optional',
              key7='optional',
              key8='optional',
              key9='optional',
              key10='optional',
              weight='optional',
              retrieval='optional'):

        """
        STATS
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes
        fieldlst: Input
            File to supply selected fields. 
            Required=No

        Output Files:
        -------------

        out: Table
            Output file. This will contain the fields: FIELD: field for which statistics have been 
            NRECORDS: total number of records in the input data (including those excluded by retrieval 
            NSAMPLES: number of records (samples) used to calculate the statistics NMISVALS: number of 
            values - either absent or excluded by retrieval criteria NUMTRACE: number of samples equal to 
            MINIMUM: minimum sample value MAXIMUM: maximum sample value RANGE: range of the sample values 
            sum of the sample values MEAN: mean of sample values VARIANCE: variance of the sample values 
            if fewer than two sample values) STANDDEV: standard deviation of the input sample values 
            standard error of the input sample values SKEWNESS: skewness of the sample values KURTOSIS: 
            of the sample values GEOMEAN: geometric mean of the input sample values SUMLOG: sum of the 
            log values MEANLOG: mean of the sample log values LOGVAR: variance of the sample log values (If 
            than one sample value) LOGESTM: log estimate of the mean COVARTN%: coefficient of variation in 
            MIDRANGE: value mid-way between the minimum and maximum values EQUAL0: number of samples with 
            value of zero NEGATIVE: number of negative samples WGTFIELD: weight field used DATAFILE: name 
            the input data file If keyfields have been specified then they will also be included. There will 
            one record for each numeric field for every combination of keyfields. 
            Required=No

        Fields:
        -------

        f1: Undefined : Undefined
            First field for statistics. If no fields are specified then all fields will be used. 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second field for statistics. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third field for statistics. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth field for statistics. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth field for statistics. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth field for statistics. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh field for statistics. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth field for statistics. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Nineth field for statistics. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth field for statistics. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Eleventh field for statistics. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Twelfth field for statistics. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Thirteenth field for statistics. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Fourteenth field for statistics. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Fifteenth field for statistics. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Sixteenth field for statistics. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Seventeenth field for statistics. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Eighteenth field for statistics. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Nineteenth field for statistics. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Twentieth field for statistics. 
            Default=Undefined
            Required=No
        fieldnam: Undefined : Undefined
            Field in FIELDLST to identify selected fields. 
            Default=Undefined
            Required=No
        key1: Undefined : Undefined
            Keyfield 1 for statistics. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Keyfield 2 for statistics. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3 for statistics. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4 for statistics. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5 for statistics. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6 for statistics. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7 for statistics. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8 for statistics. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9 for statistics. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10 for statistics. 
            Default=Undefined
            Required=No
        weight: Undefined : Undefined
            Weighting field. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "stats "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 

        if out != "optional":
            command += " &out=" + out 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if fieldnam != "optional":
            command += " *fieldnam=" + fieldnam 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 

        if weight != "optional":
            command += " *weight=" + weight 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def subjoi(self,
               in1='required',
               in2='required',
               out='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        SUBJOI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First file to be updated (sorted on required keyfields). 
            Required=Yes
        in2: Input
            Second file (update file) (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for matching on. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "subjoi "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def subwve(self,
               in1='required',
               in2='required',
               out='required',
               key1='required',
               key2='optional',
               key3='optional',
               key4='optional',
               key5='optional',
               key6='optional',
               key7='optional',
               key8='optional',
               key9='optional',
               key10='optional',
               retrieval='optional'):

        """
        SUBWVE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First file to be updated (sorted on required keyfields). 
            Required=Yes
        in2: Input
            Second file (update file) (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for matching on. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "subwve "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def supes2(self,
               in_='required',
               pvalue='optional',
               xp='optional',
               yp='optional',
               zp='optional',
               strbrk='optional',
               d0='optional',
               d1='optional',
               d2='optional',
               retrieval='optional'):

        """
        SUPES2
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input perimeter file with the fields STRNO,PTN,XP,YP,ZP and optionally STRBRK, 
            
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        pvalue: Numeric : IN
            String number field. This would be PVALUE for a standard perimeter file or STRNO for a file that 
            from SURPAC (PVALUE) 
            Default=PVALUE
            Required=No
        xp: Numeric : IN
            Standard perimeter field XP (XP). 
            Default=XP
            Required=No
        yp: Numeric : IN
            Standard perimeter field YP (YP). 
            Default=YP
            Required=No
        zp: Numeric : IN
            Standard perimeter field ZP (ZP). 
            Default=ZP
            Required=No
        strbrk: Undefined : Undefined
            Field identifying breaks in strings that should be output as 'isolations'. This would be 
            for a file that originated from SURPAC. 
            Default=Undefined
            Required=No
        d0: Undefined : Undefined
            First field to be included in the string file comment. 
            Default=Undefined
            Required=No
        d1: Undefined : Undefined
            Second field to be included in the string file comment. 
            Default=Undefined
            Required=No
        d2: Undefined : Undefined
            Third field to be included in the string file comment. Fields up to D9 can be specified. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "supes2 "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if pvalue != "optional":
            command += " *pvalue=" + pvalue 

        if xp != "optional":
            command += " *xp=" + xp 

        if yp != "optional":
            command += " *yp=" + yp 

        if zp != "optional":
            command += " *zp=" + zp 

        if strbrk != "optional":
            command += " *strbrk=" + strbrk 

        if d0 != "optional":
            command += " *d0=" + d0 

        if d1 != "optional":
            command += " *d1=" + d1 

        if d2 != "optional":
            command += " *d2=" + d2 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def supest(self,
               in_='required',
               xp='optional',
               yp='optional',
               zp='optional',
               desc1='optional',
               desc2='optional',
               desc3='optional',
               strno=0,
               retrieval='optional'):

        """
        SUPEST
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input perimeter file with the standard fields PVALUE,PTN,XP,YP,ZP and optionally PCODE. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        xp: Numeric : IN
            Standard perimeter field XP (XP). 
            Default=XP
            Required=No
        yp: Numeric : IN
            Standard perimeter field YP (YP). 
            Default=YP
            Required=No
        zp: Numeric : IN
            Standard perimeter field ZP (ZP). 
            Default=ZP
            Required=No
        desc1: Undefined : Undefined
            First field to be included in the string file comment. 
            Default=Undefined
            Required=No
        desc2: Undefined : Undefined
            Second field to be included in the string file comment. 
            Default=Undefined
            Required=No
        desc3: Undefined : Undefined
            Third field to be included in the string file comment. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        strno: 
            Method of calculating SURPAC string number (0). SURPAC string numbers are in the range 1-98. 
            uses the PVALUE field STRNO=n increments the PVALUE from n. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        """


        command = "supest "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if xp != "optional":
            command += " *xp=" + xp 

        if yp != "optional":
            command += " *yp=" + yp 

        if zp != "optional":
            command += " *zp=" + zp 

        if desc1 != "optional":
            command += " *desc1=" + desc1 

        if desc2 != "optional":
            command += " *desc2=" + desc2 

        if desc3 != "optional":
            command += " *desc3=" + desc3 

        if strno != "optional":
            command += " @strno=" + str(strno) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def supoob(self,
               in_='required',
               ptn='optional',
               xp='required',
               yp='required',
               zp='required',
               desc1='optional',
               desc2='optional',
               desc3='optional',
               retrieval='optional'):

        """
        SUPOOB
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input point file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        ptn: Undefined : Undefined
            Point number field. 
            Default=Undefined
            Required=No
        xp: Undefined : Undefined
            Easting coordinate field. 
            Default=Undefined
            Required=Yes
        yp: Undefined : Undefined
            Northing coordinate field. 
            Default=Undefined
            Required=Yes
        zp: Undefined : Undefined
            RL coordinate field. 
            Default=Undefined
            Required=Yes
        desc1: Undefined : Undefined
            First field to be included in the string file comment. 
            Default=Undefined
            Required=No
        desc2: Undefined : Undefined
            Second field to be included in the string file comment. 
            Default=Undefined
            Required=No
        desc3: Undefined : Undefined
            Third field to be included in the string file comment. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "supoob "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if ptn != "optional":
            command += " *ptn=" + ptn 


        # Required field error check

        if xp == "required":
            raise ValueError("xp is required.")

        command += " *xp=" + xp 


        # Required field error check

        if yp == "required":
            raise ValueError("yp is required.")

        command += " *yp=" + yp 


        # Required field error check

        if zp == "required":
            raise ValueError("zp is required.")

        command += " *zp=" + zp 

        if desc1 != "optional":
            command += " *desc1=" + desc1 

        if desc2 != "optional":
            command += " *desc2=" + desc2 

        if desc3 != "optional":
            command += " *desc3=" + desc3 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def suppcorr(self,
                 graph='optional',
                 stats='optional',
                 grade='required',
                 weight='optional'):

        """
        SUPPCORR
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------

        graph: Undefined
            A file containing the data required to construct scatter plot and histogram graphs relating to 
            locally-conditioned SMU model. 
            Required=No
        stats: Undefined
            A file containing summary statistical data (in Datamine binary format) relating to a 
            SMU model. 
            Required=No

        Fields:
        -------

        grade: Undefined : Undefined
            The grade field (present in the samples file) that will be considered during the process of 
            Conditioning. 
            Default=Undefined
            Required=Yes
        weight: Undefined : Undefined
            An optional weighting field. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "suppcorr "

        if graph != "optional":
            command += " &graph=" + graph 

        if stats != "optional":
            command += " &stats=" + stats 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if weight != "optional":
            command += " *weight=" + weight 


        self.run_command(command)

    def surcal(self,
               in_='required',
               out='required',
               calctype=0,
               angle=1,
               recalc=0,
               weight=0,
               adjust=0,
               ndec=2,
               print_=0,
               retrieval='optional'):

        """
        SURCAL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file of reduced survey observations. This file will contain the following fields ((N) 
            Numeric, (A,8) denotes Alphanumeric field type and length):- INSTSTN (A,8) Survey station 
            for the instrument location. INSTHT (N) Instrument height. (Negative for instruments set 
            the survey station). RO (A,8) Survey station identifier for the reference object survey 
            TARGET (A,8) Identifier of the survey station located. HZA (N) Mean horizontal angle 
            made to the target station. WCB (N) Whole Circle Bearing from INSTSTN to TARGET. QB 
            Bearing INSTSTN to TARGET. WCBERR (N) Mean standard error or range of the measurements taken to 
            the Whole Circle Bearing INSTSTN - TARGET. VA (N) Mean vertical angle measurement made to the 
            station. HDIST (N) Mean horizontal distance from INSTSTN to TARGET. HDERR (N) Mean standard 
            or range of horizontal distances from slope distances and vertical angles. RDIST (N) 
            plane distance from INSTSTN to TARGET as computed from the horizontal distance HDIST. VDIFF 
            Mean difference in elevation from INSTSTN to TARGET. VDERR (N) Mean standard error or range of 
            height differences from INSTSTN to TARGET. PLANE (N) Reference plane used to compute RDIST 
            HDIST. If absent, RDIST = HDIST. FACTOR (N) Scale factor used to compute RDIST after reduction 
            PLANE. The default must be 1. REFRACT (N) Coefficient of refraction used to adjust vertical 
            where single measurements are made. ERRFLAG (N) Error flag field. Four digits may be set as 
            ABCD e.g. 1001 A Horizontal angle tolerance was/was not exceeded. 1/0 B Vertical angle or 
            difference tolerances were /were not exceeded. 1/0 C Horizontal distance tolerance was/was 
            exceeded. 1/0 D The previous base-line (INSTSTN to RO) carried/ did not carry errors. >1/0 This 
            file may have been created as output from the SUROBS process. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file of newly coordinated survey stations. This file will contain the following 
            STATION (A,8) Survey station identifier. X (N) X coordinate value. Y (N) Y coordinate value. Z 
            Z coordinate value. RO (A,8) Identity of station used to locate STATION. WCB (N) Whole Circle 
            from STATION to RO. Referred to as azimuth elsewhere in your application. QB (A,12)Quadrant 
            STATION to RO. (e.g. N 45.0000 E). HDIST (N) Horizontal distance from STATION to RO. RDIST (N) 
            distance from STATION to RO, as computed at PLANE elevation. VDIFF (N) Vertical difference in 
            from STATION to RO. PLANE (N) Elevation to which HDIST has reduced to compute RDIST. If absent 
            no further reduction has been computed. FACTOR (N) Scale factor used to compute RDIST. REFRACT 
            Coefficient of refraction used to compute VDIFF where only a single forward vertical angle is 
            HDERR (N) Mean standard error or range horizontal distances from RO to STATION. WCBERR (N) Mean 
            error or range of horizontal angles used in computing the bearing from RO to STATION. VAERR (N) 
            standard error or range of vertical angles used in computing VDIFF from RO to STATION. ERRFLAG 
            Flag to identify when a measurement tolerance is exceeded. LOXORIG (N) Implicit local X origin 
            LOYORIG (N) Implicit local Y origin field. LOZORIG (N) Implicit local Z origin field. ADJUST 
            Numeric field to identify final or temporary coordinates. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        calctype: 
            Numeric flag to identify the method of coordinate computation to be used: 0 = Automatic. 1 = 
            and distance method. 2 = Angle and distance method. 3 = Resection by angles. 4 = Distance 
            5 = Bearing intersection. 6 = Angle intersection. 7 = Resection by distances. The default is the 
            method (0). 
            Range=0,7
            Values=0,1,2,3,4,5,6,7
            Default=0
            Required=Yes
        angle: 
            Units of angle measurements : 1 = Degrees, minutes and seconds. [0-360] in the form DDD.MMSS 2 = 
            [0-400] The default angle unit is degrees, minutes and seconds (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        recalc: 
            Optional numeric flag to allow recalculation of stations established from a resurveyed base 
            The default is not to have recalculation (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        weight: 
            Optional flag numeric to allow assignment of weights proportional to the error values in the 
            file. The default is not to have weights assignment (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        adjust: 
            Optional numeric flag to allow coordinate adjustment where redundant measurements occur. 
            adjustment is done by the least square error method. The default is to have coordinates 
            from a single set of measurements (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        ndec: 
            Number of decimals in the output results summary. Only used if parameter PRINT is set to one (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        print: 
            Set to one to display a summary of results to the screen and print file. The default is not to print 
            results (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "surcal "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required parameter error check

        if calctype == "required":
            raise ValueError("calctype is required.")

        command += " @calctype=" + str(calctype) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if recalc != "optional":
            command += " @recalc=" + str(recalc) 

        if weight != "optional":
            command += " @weight=" + str(weight) 

        if adjust != "optional":
            command += " @adjust=" + str(adjust) 

        if ndec != "optional":
            command += " @ndec=" + str(ndec) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def surfip(self,
               proto='required',
               in_='required',
               trend='optional',
               perimin='optional',
               model='required',
               x='required',
               y='required',
               upper='required',
               lower='required',
               label='required',
               radius="optional",
               above="optional",
               within="optional",
               below="optional",
               power=2,
               minnop=5,
               maxstep="optional",
               splits=3,
               print_=0,
               retrieval='optional'):

        """
        SURFIP
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Prototype model. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, XMORIG, YMORIG, 
            NX, NY, NZ, IJK. 
            Required=Yes
        in: Input
            Input intersection data. Must contain the fields X , Y , UPPER , LOWER. 
            Required=Yes
        trend: Input
            Trend coefficients file (as produced from process TREND) defining a surface to be subtracted 
            the data before interpolation and added back to the interpolated values for each cell or 
            The field names are C0, CX, CY, CXY, CX2, CY2, CX2Y, CY2X etc. 
            Required=No
        perimin: Input
            Input perimeter file defining fault boundaries, or surface limits. One pass through the 
            process is made for each perimeter on file, using only data lying within the perimeter, and 
            only (sub-)cells lying within this perimeter. At the boundary, cells will be split into 
            controlled by the SPLITS parameter. 
            Required=No

        Output Files:
        -------------

        model: Block Model
            Output interpolated seam model. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Name of intersection X field. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Name of intersection Y field. 
            Default=Undefined
            Required=Yes
        upper: Undefined : Undefined
            Name of intersection roof elevation field. Enter - or dummy if only LOWER supplied. 
            Default=Undefined
            Required=Yes
        lower: Undefined : Undefined
            Name of intersection floor elevation field. Enter - or dummy if only UPPER supplied. 
            Default=Undefined
            Required=Yes
        label: Undefined : Undefined
            Name of numeric field to be generated with values corresponding to ABOVE , WITHIN , BELOW. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        radius: 
            Search radius. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        above: 
            Value of LABEL above seam. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        within: 
            Value of LABEL within seam. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        below: 
            Value of LABEL below seam. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        power: 
            Weighting power (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        minnop: 
            Minimum number of samples (5). 
            Range=Undefined
            Values=Undefined
            Default=5
            Required=No
        maxstep: 
            Max. elevation difference before sub-cells interpolated in horizontal plane [0.5 seam 
            If MAXSTEP is exactly 0, then splitting will take place over the entire model generated, as 
            by SPLITS. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        splits: 
            Controls splitting of sub-cells. The maximum number of sub-cells will be 2** SPLITS in X and Y. 
            =3 [i.e. 2**3] = a max of 8*8 subcells in the XY plane (3). 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        print: 
            Option Description 1 summary of parameters and average seam thickness displayed (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "surfip "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if trend != "optional":
            command += " &trend=" + trend 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if upper == "required":
            raise ValueError("upper is required.")

        command += " *upper=" + upper 


        # Required field error check

        if lower == "required":
            raise ValueError("lower is required.")

        command += " *lower=" + lower 


        # Required field error check

        if label == "required":
            raise ValueError("label is required.")

        command += " *label=" + label 


        # Required parameter error check

        if radius == "required":
            raise ValueError("radius is required.")

        command += " @radius=" + str(radius) 

        if above != "optional":
            command += " @above=" + str(above) 

        if within != "optional":
            command += " @within=" + str(within) 

        if below != "optional":
            command += " @below=" + str(below) 

        if power != "optional":
            command += " @power=" + str(power) 

        if minnop != "optional":
            command += " @minnop=" + str(minnop) 

        if maxstep != "optional":
            command += " @maxstep=" + str(maxstep) 

        if splits != "optional":
            command += " @splits=" + str(splits) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def surlog(self):

        """
        SURLOG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "surlog "


        self.run_command(command)

    def surobs(self,
               header='required',
               observ='required',
               control='required',
               tol='optional',
               out='required',
               error='optional',
               angle=1,
               vadmean=1,
               errtype=1,
               plane=-,
               factor=1,
               refract=-,
               print_=0,
               retrieval='optional'):

        """
        SUROBS
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        header: Input
            Input header information, containing survey job and location information. This file may have 
            created by the SURLOG process (input of field recorder data) or the screen editor process AED. 
            file must contain the following fields ((N) denotes Numeric, (A,8) denotes Alphanumeric 
            type and length):- JOBNUM (N) Survey job number. SURVEYOR (A,8) Surveyor's name. LEVEL (A,8) 
            of survey. SECTION (A,8) Area of survey. INSTTYPE (A,4) Survey instrument or methods used. 
            Required=Yes
        observ: Input
            Input file of survey measurements. This file must contain the following fields ((N) denotes 
            (A,8) denotes Alphanumeric field type and length):- JOBNUM (N) Survey job number. INSTSTN 
            Survey station identifier for the instrument location. INSTHT (N) Instrument height. 
            for instruments set below the survey station). RO (A,8) Survey station identifier for the 
            object survey station. TARGET (A,8) Identifier of the survey station located. HZTARG (N) 
            direction measured to the target. VATARG (N) Vertical direction measured to the target. 
            (N) Slope distance measured to the target. TARGHT (N) Target height. (Negative for target set 
            the target point). HZRO (N) Horizontal direction measured to the reference object. VARO (N) 
            direction measured to the reference object. SDRO (N) Slope distance measured to the referenec 
            ROHT (N) Target height at the reference object. (Negative for target set below the target 
            This file file may have been created as output from the SURLOG process. 
            Required=Yes
        control: Input
            Input file of survey control stations. This file must contain the following fields ((N) 
            Numeric, (A,8) denotes Alphanumeric field type and length):- STATION (A,8) Survey station 
            X (N) X coordinate value. Y (N) Y coordinate value. Z (N) Z coordinate value. RO (A,8) Identity of 
            used to locate STATION. WCB (N) Whole Circle Bearing from STATION to RO. Referred to as azimuth 
            in your application. QB (A,12)Quadrant Bearing STATION to RO. (e.g. N 45.0000 E). HDIST (N) 
            distance from STATION to RO. RDIST (N) Reduced distance from STATION to RO, as computed at PLANE 
            VDIFF (N) Vertical difference in height from STATION to RO. PLANE (N) Elevation to which HDIST 
            reduced to compute RDIST. If absent (-), no further reduction has been computed. FACTOR (N) 
            factor used to compute RDIST. REFRACT (N) Coefficient of refraction used to compute VDIFF 
            only a single forward vertical angle is used. HDERR (N) Mean standard error or range of 
            distances from RO to STATION. WCBERR (N) Mean standard error or range of horizontal angles used 
            computing the bearing from RO to STATION. VAERR (N) Mean standard error or range of vertical 
            used in computing VDIFF from RO to STATION. VDERR (N) Mean standard error or range of computed 
            from RO to STATION. ERRFLAG (N) Flag to identify when a measurement tolerance is exceeded. 
            (N) Flag to identify if the station coordinates are adjusted. LOXORIG (N) Implicit local X 
            field. LOYORIG (N) Implicit local Y origin field. LOZORIG (N) Implicit local Z origin field. 
            Required=Yes
        tol: Input
            Optional file of measurement tolerances for the flagging of errors in measurements processed 
            the input OBSERV file, and written to the output ERROR file, if supplied. This file must contain 
            following fields:- INSTTYPE (A,4) Survey instrument or methods used. STNTYPE (A,4) Must 
            a value RO or TARGET, to allow different tolerances to be specified for checks onto existing 
            (RO) and the establishment of new base- lines (TARGET). HDTOL (N) Maximum mean standard error 
            observed horizontal distance measurements. HZTOL (N) Maximum mean standard error of 
            horizontal angle measurements. VATOL (N) Maximum mean standard error of observed vertical 
            measurements. VDTOL (N) Maximum mean standard error of computed differences in elevation. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output file of reduced survey observations. This file may be used as input to the SURCAL 
            in order to compute survey station coordinates. This file will contain the following fields:- 
            (A,8) Survey station identifier for the instrument location. INSTHT (N) Instrument height. 
            for instruments set below the survey station). RO (A,8) Survey station identifier for the 
            object survey station. TARGET (A,8) Identifier of the survey station located. HZA (N) Mean 
            angle measurement made to the target station. WCB (N) Whole Circle Bearing from INSTSTN to 
            QB (A,12)Quadrant Bearing INSTSTN to TARGET. WCBERR (N) Mean standard error or range of 
            taken to establish the Whole Circle Bearing INSTSTN - TARGET. VA (N) Mean vertical angle 
            made to the target station. HDIST (N) Mean horizontal distance from INSTSTN to TARGET. HDERR 
            Mean standard error or range of horizontal distances from slope distances and vertical 
            RDIST (N) Reference plane distance from INSTSTN to TARGET as computed from the horizontal 
            HDIST. VDIFF (N) Mean difference in elevation from INSTSTN to TARGET. VDERR (N) Mean standard 
            or range of computed height differences from INSTSTN to TARGET. PLANE (N) Reference plane used 
            compute RDIST from HDIST. If absent, RDIST = HDIST. FACTOR (N) Scale factor used to compute 
            after reduction to PLANE. The default must be 1. REFRACT (N) Coefficient of refraction used to 
            vertical angles where single measurements are made. ERRFLAG (N) Error flag field. Four digits 
            be set as follows:- ABCD e.g. 1001 A Horizontal angle tolerance was/was not exceeded. 1/0 B 
            angle or vertical difference tolerances were /were not exceeded. 1/0 C Horizontal distance 
            was/was not exceeded. 1/0 D The previous base-line (INSTSTN to RO) carried/ did not carry 
            >1/0 
            Required=Yes
        error: Undefined
            Optional output file of measurements that do not meet the tolerances specified in the input 
            file ( TOL). If this file is not defined, all measurements will be sent to the output file . This 
            will contain the same fields as the output file of reduced survey measurements ( OUT). 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        angle: 
            Units of angle measurements : 1 = Degrees, minutes and seconds. [0-360] in the form DDD.MMSS 2 = 
            [0-400] The default angle unit is degrees, minutes and seconds (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        vadmean: 
            Compute the mean of both forward and reverse angle and measurements if available. This will 
            the need to adjust for curvature and refract, defined in parameter REFRACT. The default is (1), 
            use forward and reverse measurements. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        errtype: 
            Sets the error fields to report the mean standard error [1] or the range [2] of measurements. The 
            is to report mean standard errors (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        plane: 
            Optional reference plane elevation to which horizontal distances will be computed. The 
            is not to reduce horizontal distances to reference plane (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        factor: 
            Optional scale factor that may be applied to the reduced distance RDIST. The default setting is 
            
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        refract: 
            Optional coeficient of refraction used for adjustment of vertical angles. The default is not 
            apply correction to vertical angle (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        print: 
            Set to one to display a summary of results to the screen. The default is not to print summary 
            (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "surobs "


        # Required input error check

        if header == "required":
            raise ValueError("header is required.")

        command += " &header=" + header 


        # Required input error check

        if observ == "required":
            raise ValueError("observ is required.")

        command += " &observ=" + observ 


        # Required input error check

        if control == "required":
            raise ValueError("control is required.")

        command += " &control=" + control 

        if tol != "optional":
            command += " &tol=" + tol 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if error != "optional":
            command += " &error=" + error 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if vadmean != "optional":
            command += " @vadmean=" + str(vadmean) 

        if errtype != "optional":
            command += " @errtype=" + str(errtype) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if refract != "optional":
            command += " @refract=" + str(refract) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def surpoi(self,
               in_='required',
               elev='required',
               trend='optional',
               out='required',
               xin='required',
               yin='required',
               radius="optional",
               power=2,
               minnop=1,
               retrieval='optional'):

        """
        SURPOI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            The input data file, which must contain at least two fields which define the two- dimensional 
            of a series of points. 
            Required=Yes
        elev: Input
            Input file containing elevation data that will be used to control the interpolation. It must 
            the fields X, Y and UPPER, and may optionally contain the field LOWER. 
            Required=Yes
        trend: Input
            Optional input trend file. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Output file that will contain all the fields that were in the input file, plus the interpolated 
            fields. 
            Required=Yes

        Fields:
        -------

        xin: Undefined : Undefined
            Name of the X field in the input data file. 
            Default=Undefined
            Required=Yes
        yin: Undefined : Undefined
            Name of the Y field in the input data file. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        radius: 
            Search radius for interpolation [the default is the mean spacing between the elevation data 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        power: 
            Power to be used for inverse power of distance weighting (2). 
            Range=Undefined
            Values=Undefined
            Default=2
            Required=No
        minnop: 
            Minimum number of samples required for interpolation (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "surpoi "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if elev == "required":
            raise ValueError("elev is required.")

        command += " &elev=" + elev 

        if trend != "optional":
            command += " &trend=" + trend 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if xin == "required":
            raise ValueError("xin is required.")

        command += " *xin=" + xin 


        # Required field error check

        if yin == "required":
            raise ValueError("yin is required.")

        command += " *yin=" + yin 

        if radius != "optional":
            command += " @radius=" + str(radius) 

        if power != "optional":
            command += " @power=" + str(power) 

        if minnop != "optional":
            command += " @minnop=" + str(minnop) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def surtac(self,
               control='required',
               in_='required',
               attribut='required',
               pointou='required',
               segou='required',
               stype='optional',
               svalue='optional',
               station='optional',
               obtype=1,
               angle=1,
               voffset=1,
               period="optional",
               pidstart=1,
               pidincr=1,
               pvstart=1,
               pvincr=1,
               plane=-,
               factor=1,
               rocheck=0,
               update=0,
               retrieval='optional'):

        """
        SURTAC
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        control: Input
            Input control survey station file. This must contain the numeric fields X, Y and Z. A field 
            the station name is required and may be of type numeric or alpha-numeric. The default station 
            field is STATION of type numeric. 
            Required=Yes
        in: Input
            Input tacheometry observation file. This must contain fields: INSTSTN Numeric survey 
            identifier of instrument location.. INSTHT Numeric instrument height. (Negative for 
            set below the survey station). RO Numeric survey station identifier of reference object. 
            Numeric or alpha-numeric identifier of the point located. Additionally; if OBTYPE=1: HZTARG 
            horizontal direction measured to the target. VATARG Numeric vertical direction measured to 
            target. SDTARG Numeric slope distance measured to the target. TARGHT Numeric target height. 
            for target set below the target point). Optionally; check measurements to the reference 
            station (RO),if OBTYPE=1: HZRO Numeric horizontal direction measured to the reference 
            VARO Numeric vertical direction measured to the reference object. SDRO Numeric slope 
            measured to the referenec object. ROHT Numeric target height at the reference object. 
            if OBTYPE=2: HZTARG Numeric horizontal direction measured to the target. VDTARG Numeric 
            distance from the survey instrument to the target. HDTARG Numeric horizontal distance 
            to the target. TARGHT Numeric target height. (Negative for target set below the target point). 
            check measurements to the reference survey station (RO),if OBTYPE=2: HZRO Numeric 
            direction measured to the reference object. VDRO Numeric vertical distance from the survey 
            to the reference object. HDRO Numeric horizontal distance measured to the reference object. 
            Numeric target height at the reference object. (Negative for target set below the target 
            Additionally; if OBTYPE=3: HZTARG Numeric horizontal direction measured to the target. 
            Numeric vertical direction measured to the target. UPPERS Numeric upper stadia staff 
            MIDDLES Numeric middle stadia staff reading. LOWERS Numeric lower stadia staff reading. 
            Numeric multiplication factor for the theodolite.. VFACTOR Numeric vertical difference 
            AFACTOR Numeric additive constant for theodolite. Additionally; if OBTYPE=4: XO Numeric X 
            of the target. YO Numeric Y coordinate of the target. ZO Numeric Z coordinate of the target. IF 
            or 2, offset measurements may included. All measurements are taken at the measured point, in 
            directions indicated by the field names (LEFT,RIGHT UP,DOWN). LEFT and RIGHT offsets are 
            perpendicular to the measured line, while UP and DOWN offsets may be perpendicular or vertical 
            on the VOFFSET parameter. If offsets are measured, the following fields must be exist in the 
            LEFT Numeric distance left of line INSTSTN-TARGET, at SDTARG/HDTARG position. RIGHT Numeric 
            right of line INSTSTN-TARGET, at SDTARG/HDTARG position. UP Numeric distance above line 
            at SDTARG/HDTARG position. DOWN Numeric distance below line INSTSTN-TARGET, at 
            position. This file may have been created as output from the SURLOG process. 
            Required=Yes
        attribut: Input
            Input attribute file. This must contain PTYPE, PTEXT, PSYMBOL, PSYMSZE, PCODE and P. May also 
            an alpha-numeric string type field. 
            Required=Yes

        Output Files:
        -------------

        pointou: Undefined
            Output point file. This will contain fields PID, X, Y, Z, PSYMBOL, PSYMSZE, P and PERIOD 
            explicit). 
            Required=Yes
        segou: Undefined
            Output string segment file. This will contain fields PID1, PID2, PVALUE, PTYPE, PTEXT, PCODE, 
            and PERIOD. 
            Required=Yes

        Fields:
        -------

        stype: Undefined : Undefined
            Optional key field in ATTRIBUT and IN file for assignment of point and string attributes. If 
            field is not supplied by the user, PTYPE will be used by default and must exist in the input file. 
            Default=Undefined
            Required=No
        svalue: Undefined : Undefined
            Optional key field in IN file for assignment of numeric string identifiers to the output string 
            If this field is not supplied, field PVALUE will be used and must exist in the input file. 
            Default=Undefined
            Required=No
        station: Undefined : Undefined
            Optional alphanumeric survey station identifier in the input CONTROL survey station file. If 
            field is not supplied the default numeric field STATION will be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        obtype: 
            Input tacheometry observation type. This will be one of: 1 = Horizontal, vertical angles and 
            distance measurements. 2 = Horizontal angle and distance and vertical difference. 3 = 
            vertical angles and staff/stadia intercepts. 4 = Reduced X,Y,Z coordinates. The default 
            type will be (1). 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=Yes
        angle: 
            Angle units used. This will be one of: 1 = Degrees, minutes and seconds; 0-360 2 = Gradians; 0-400 
            default angle unit will be Degrees, minutes and seconds (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        voffset: 
            Measurement method for UP/DOWN offsets. This will be one of:- 1 = UP/DOWN offsets measured 
            above/below distance measurement. 2 = UP/DOWN offsets measured perpendicular to the 
            measurement. The default method will be vertical offset measurements (1). 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        period: 
            Numeric integer period number to be stored with output point and string segment data. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        pidstart: 
            Optional start point number for output to point file, field PID, if a numeric TARGET field does 
            exist in the input file. The default start number is 1.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        pidincr: 
            Optional point number increment, if no TARGET field exists in the input file. The default 
            is 1.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        pvstart: 
            Optional start string number for output to string file, field PVALUE, if no PVALUE field exists 
            the input file. The default start number is 1.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        pvincr: 
            Optional string number increment, if no PVALUE field exists in the input file. The default 
            is 1.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        plane: 
            Optional reference plane elevation to which horizontal distances will be reduced prior to 
            of grid distance and point coordinates. The default is absent data [-], no futher reductions 
            made to the horizontal distance.(-) 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        factor: 
            Optional scale factor to be applied to the plane distance, to compute the grid distance, prior 
            computation of point coordinates. The default value is 1.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        rocheck: 
            Optional flag = 1 to compare computed base line distance components with check measurements 
            The default is 0, not to compare check base measurements, if present .(0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        update: 
            Optional flag = 1 to append computed points to the CONTROL file, if they are subsequently 
            by the survey instrument for continuation of the detail survey during execution of the 
            The default is 0, not to append any computed points to the input CONTROL file. (0) 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "surtac "


        # Required input error check

        if control == "required":
            raise ValueError("control is required.")

        command += " &control=" + control 


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if attribut == "required":
            raise ValueError("attribut is required.")

        command += " &attribut=" + attribut 


        # Required output error check

        if pointou == "required":
            raise ValueError("pointou is required.")

        command += " &pointou=" + pointou 


        # Required output error check

        if segou == "required":
            raise ValueError("segou is required.")

        command += " &segou=" + segou 

        if stype != "optional":
            command += " *stype=" + stype 

        if svalue != "optional":
            command += " *svalue=" + svalue 

        if station != "optional":
            command += " *station=" + station 


        # Required parameter error check

        if obtype == "required":
            raise ValueError("obtype is required.")

        command += " @obtype=" + str(obtype) 

        if angle != "optional":
            command += " @angle=" + str(angle) 

        if voffset != "optional":
            command += " @voffset=" + str(voffset) 

        if period != "optional":
            command += " @period=" + str(period) 

        if pidstart != "optional":
            command += " @pidstart=" + str(pidstart) 

        if pidincr != "optional":
            command += " @pidincr=" + str(pidincr) 

        if pvstart != "optional":
            command += " @pvstart=" + str(pvstart) 

        if pvincr != "optional":
            command += " @pvincr=" + str(pvincr) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if rocheck != "optional":
            command += " @rocheck=" + str(rocheck) 

        if update != "optional":
            command += " @update=" + str(update) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def surtri(self,
               perimin='optional',
               string='optional',
               pointin='optional',
               wiretr='required',
               wirept='required',
               xpt='optional',
               ypt='optional',
               zpt='optional',
               surface=1,
               boundary=0,
               system=3,
               dmax="optional",
               maxlink="optional",
               tol="optional",
               cog=0,
               errtrace=0,
               hbratio=0.05,
               maxpts=-,
               check=1,
               retrieval='optional'):

        """
        SURTRI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file containing XP,YP,ZP,PTN, PVALUE and optional BOUNDARY fields. 
            may be included in the triangulation and/or used as boundaries.ALL are assumed closed. The 
            field may have the values : - missing (use BOUNDARY) , 0 edge constraint, 1 external boundary or 2 
            boundary. 
            Required=No
        string: Input
            Input string file containing XP,YP,ZP,PTN and PVALUE fields. String segments are included in 
            triangulation as 3D edge constraints, breaklines. Strings may be open or closed. Note that a 
            of 60,000 strings is set for this input file. 
            Required=No
        pointin: Input
            Input point file containing XPT,YPT,ZPT fields. 
            Required=No

        Output Files:
        -------------

        wiretr: Wireframe Triangle
            Output wireframe triangle file. May include additional XBAR,YBAR and ZBAR fields. 
            Required=Yes
        wirept: Wireframe Points
            Output wireframe point file. 
            Required=Yes

        Fields:
        -------

        xpt: Undefined : Undefined
            X field in input point file. 
            Default=Undefined
            Required=No
        ypt: Undefined : Undefined
            Y field in input point file. 
            Default=Undefined
            Required=No
        zpt: Undefined : Undefined
            Z field in input point file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        surface: 
            Optional surface identifier, +1 for upper surface, -1 for lower (1). 
            Range=-1, 1
            Values=-1,1
            Default=1
            Required=No
        boundary: 
            Default boundary specifier for perimeters. Used if the BOUNDARY field does not exist in 
            or has a missing value (0). 0 edge constraints, must be 3D, 1 external boundary or 2 internal 
            
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        system: 
            Defines the treatment of boundary perimeters BOUNDARY= 1 or 2 from PERIMIN (3). 2 perimeters 
            2D and used only as constraints. 3 perimeters are 3D and are included in the triangulation. 
            Range=2,3
            Values=2,3
            Default=3
            Required=No
        dmax: 
            The maximum separation of additional points interpolated into long string segments to 
            the triangulation. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxlink: 
            Maximum separation of points that will be joined by a triangle. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tol: 
            Tolerance distance below which points are considered to be duplicated. If too small this value 
            automatically be increased by the program. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        cog: 
            Used to include extra fields containing the coordinates of the centre of gravity of each 
            in output triangle file (0): Option Description 0 - do not include XBAR,YBAR or ZBAR . 1 - include 
            only. 2 - include XBAR,YBAR No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        errtrace: 
            Used to control the amount of error messages and the creation of a system file SURTRI.TRC 
            a dump of points and edges for tracing errors. Also may be used to force the creation of output 
            and triangle records despite a serious error(0). Option Description 0 - no error trace, 
            error messages. 1 - create SURTRI.TRC, force output, full error reporting. 2 - as 1 plus include 
            plot records. No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        hbratio: 
            Height to base ratio of triangles created to resolve crossing strings (0.05). 
            Range=Undefined
            Values=Undefined
            Default=0.05
            Required=No
        maxpts: 
            Overwrite the program limitation on maximum points per partition with a smaller value. May be 
            to force partitioning for testing (-). 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        check: 
            nan 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "surtri "

        if perimin != "optional":
            command += " &perimin=" + perimin 

        if string != "optional":
            command += " &string=" + string 

        if pointin != "optional":
            command += " &pointin=" + pointin 


        # Required output error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required output error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if xpt != "optional":
            command += " *xpt=" + xpt 

        if ypt != "optional":
            command += " *ypt=" + ypt 

        if zpt != "optional":
            command += " *zpt=" + zpt 

        if surface != "optional":
            command += " @surface=" + str(surface) 

        if boundary != "optional":
            command += " @boundary=" + str(boundary) 

        if system != "optional":
            command += " @system=" + str(system) 

        if dmax != "optional":
            command += " @dmax=" + str(dmax) 

        if maxlink != "optional":
            command += " @maxlink=" + str(maxlink) 

        if tol != "optional":
            command += " @tol=" + str(tol) 

        if cog != "optional":
            command += " @cog=" + str(cog) 

        if errtrace != "optional":
            command += " @errtrace=" + str(errtrace) 

        if hbratio != "optional":
            command += " @hbratio=" + str(hbratio) 

        if maxpts != "optional":
            command += " @maxpts=" + str(maxpts) 

        if check != "optional":
            command += " @check=" + str(check) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def survig(self,
               pointin='optional',
               segin='optional',
               pointup='optional',
               segup='optional',
               section='optional',
               profile='optional',
               pointou='required',
               segou='required',
               eval='optional',
               period="optional",
               iprcol=5,
               isccol="optional",
               addpoint=500,
               coortyp=0,
               loxorig=0,
               loyorig=0,
               lozorig=0,
               retrieval='optional'):

        """
        SURVIG
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        pointin: Input
            Optional input point file or prototype, containing at least the numeric fields: PID Unique 
            identification number. X Y Z Coordinate position of point. PSYMBOL Point symbol number 91 : 
            92 : Cross (+) 93 : Cross (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 98 : Pie Segment PSYMSZE 
            symbol size in millimetres. P Colour number (1-16) for symbol. PERIOD Period number 
            
            Required=No
        segin: Input
            Optional input string segment file or prototype, containing at least the numeric fields: PID1 
            point of segment. PID2 Second point of segment. PVALUE String identifier. PTYPE String type. 
            String linestyle: 1001 = Solid line 1002 = Broad line 1003 = Long Dash line 1004 = Dotted line 1005 
            Dash Dotted line 1006 = Medium Dash line 1007 = Dash with two dots 1008 = Short Dash line P String 
            (1-16). 
            Required=No
        pointup: Input
            Optional input point file of update data. 
            Required=No
        segup: Input
            Optional input string segment file of update data. 
            Required=No
        section: Undefined
            Optional input/output section file defining sections for display, profile string 
            and volume analysis, containing fields: SVALUE Section number XCENTRE X Coordinate of 
            centre point YCENTRE Y Coordinate of section centre point ZCENTRE Z Coordinate of section 
            point SAZI Azimuth of the direction of dip. SDIP Dip of the section plane (90). STHICK 
            distance between adjacent sections. HSIZE Horizontal extent of section. VSIZE Vertical 
            of section. 
            Required=No
        profile: Undefined
            Optional input/output file of strings formed from section/terrain model slicing This file 
            contain standard perimeter fields XP, YP, ZP, PTN, PVALUE, and additional fields PTYPE, P, 
            and PERIOD. 
            Required=No

        Output Files:
        -------------

        pointou: Point Data
            Output point file. 
            Required=Yes
        segou: Undefined
            Output string segment file. 
            Required=Yes
        eval: Undefined
            File for output evaluations in format for input to TABRES process. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        period: 
            Integer period number for storing with the updated point/string data and section profiles. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        iprcol: 
            Colour of primary perimeters (5). 
            Range=1,64
            Values=Undefined
            Default=5
            Required=No
        isccol: 
            7 
            Range=1,64
            Values=Undefined
            Default=Undefined
            Required=No
        addpoint: 
            Maximum number additional points/strings that are likely to be required to be defined in the 
            (500). 
            Range=Undefined
            Values=Undefined
            Default=500
            Required=No
        coortyp: 
            Parameter to be set to 1 for the use of the LO coordinate system (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        loxorig: 
            Local X origin to be used for internal coordinate calculations (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        loyorig: 
            Local Y origin to be used for internal coordinate calculations (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        lozorig: 
            Local Z origin to be used for internal coordinate calculations (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        """


        command = "survig "

        if pointin != "optional":
            command += " &pointin=" + pointin 

        if segin != "optional":
            command += " &segin=" + segin 

        if pointup != "optional":
            command += " &pointup=" + pointup 

        if segup != "optional":
            command += " &segup=" + segup 

        if section != "optional":
            command += " &section=" + section 

        if profile != "optional":
            command += " &profile=" + profile 


        # Required output error check

        if pointou == "required":
            raise ValueError("pointou is required.")

        command += " &pointou=" + pointou 


        # Required output error check

        if segou == "required":
            raise ValueError("segou is required.")

        command += " &segou=" + segou 

        if eval != "optional":
            command += " &eval=" + eval 


        # Required parameter error check

        if period == "required":
            raise ValueError("period is required.")

        command += " @period=" + str(period) 

        if iprcol != "optional":
            command += " @iprcol=" + str(iprcol) 

        if isccol != "optional":
            command += " @isccol=" + str(isccol) 

        if addpoint != "optional":
            command += " @addpoint=" + str(addpoint) 

        if coortyp != "optional":
            command += " @coortyp=" + str(coortyp) 

        if loxorig != "optional":
            command += " @loxorig=" + str(loxorig) 

        if loyorig != "optional":
            command += " @loyorig=" + str(loyorig) 

        if lozorig != "optional":
            command += " @lozorig=" + str(lozorig) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def survin(self,
               perimin='required',
               pointou='required',
               segou='required',
               period="optional",
               tol=0.1,
               ptype=1,
               pcode=1001,
               p=1,
               psymbol=92,
               psymsze="optional",
               retrieval='optional'):

        """
        SURVIN
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        perimin: Input
            Input perimeter file. Must contain the fields XP, YP, ZP, PTN and PVALUE (numeric, explicit). 
            fields PTYPE, PCODE, P, PSYMBOL, and PSYMSZE will be used, if present. Additional fields found 
            be added to the output point and string files. 
            Required=Yes

        Output Files:
        -------------

        pointou: Undefined
            Output point file. This will contain fields PID, X, Y, Z, PSYMBOL, PSYMSZE, P and PERIOD 
            explicit). 
            Required=Yes
        segou: Undefined
            Output string segment file. This will contain the fields PID1, PID2, PVALUE, PTYPE, PCODE, P 
            PERIOD (numeric, explicit). 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        period: 
            Numeric integer period number for to be assigned to the input perimeters. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        tol: 
            Points in the perimeter file less than TOL distance apart will be deemed duplicate and 
            
            Range=Undefined
            Values=Undefined
            Default=0.1
            Required=No
        ptype: 
            PTYPE field value [numeric] to be stored in the string file, representing a string type, if not 
            in perimeter file.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        pcode: 
            PCODE field value to be stored in string file, representing a line code 1001-1008, if not found 
            the perimeter file.(1001) 
            Range=Undefined
            Values=Undefined
            Default=1001
            Required=No
        p: 
            P field value [numeric] to be stored in point and string files, representing a point symbol and 
            line colour, if not found in perimeter file.(1) 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        psymbol: 
            PSYMBOL field value [numeric] to be stored in the point file, representing a point symbol 
            91-98, if not found in the perimeter file.(92) Point symbol number 91 : Circle (o) 92 : Cross (+) 
            : Cross (x) 94 : Triangle 95 : Box 96 : Diamond 97 : Star ( ) 
            Range=91,98
            Values=91,92,93,94,95,96,97,98
            Default=92
            Required=No
        psymsze: 
            1.5 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "survin "


        # Required input error check

        if perimin == "required":
            raise ValueError("perimin is required.")

        command += " &perimin=" + perimin 


        # Required output error check

        if pointou == "required":
            raise ValueError("pointou is required.")

        command += " &pointou=" + pointou 


        # Required output error check

        if segou == "required":
            raise ValueError("segou is required.")

        command += " &segou=" + segou 


        # Required parameter error check

        if period == "required":
            raise ValueError("period is required.")

        command += " @period=" + str(period) 

        if tol != "optional":
            command += " @tol=" + str(tol) 

        if ptype != "optional":
            command += " @ptype=" + str(ptype) 

        if pcode != "optional":
            command += " @pcode=" + str(pcode) 

        if p != "optional":
            command += " @p=" + str(p) 

        if psymbol != "optional":
            command += " @psymbol=" + str(psymbol) 

        if psymsze != "optional":
            command += " @psymsze=" + str(psymsze) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def survou(self,
               pointin='required',
               segin='required',
               perimou='required',
               pointou='required',
               retrieval='optional'):

        """
        SURVOU
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        pointin: Input
            Input point file. This will contain fields PID, X, Y, Z, PSYMBOL, PSYMSZE, P and PERIOD 
            explicit). 
            Required=Yes
        segin: Input
            Input string segment file. This will contain PID1, PID2, PVALUE, PTYPE, PCODE, P. 
            Required=Yes

        Output Files:
        -------------

        perimou: String
            Output perimeter file. This will contain the fields XP, YP, ZP, PTN, PVALUE, PTYPE, PCODE, P, 
            and PSYMSZE. Additional fields found in the input files will be added to the output perimeter 
            
            Required=Yes
        pointou: Undefined
            Output point file. This will contain fields PID, XP, YP, ZP, PSYMBOL, PSYMSZE, P and PERIOD 
            explicit). 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "survou "


        # Required input error check

        if pointin == "required":
            raise ValueError("pointin is required.")

        command += " &pointin=" + pointin 


        # Required input error check

        if segin == "required":
            raise ValueError("segin is required.")

        command += " &segin=" + segin 


        # Required output error check

        if perimou == "required":
            raise ValueError("perimou is required.")

        command += " &perimou=" + perimou 


        # Required output error check

        if pointou == "required":
            raise ValueError("pointou is required.")

        command += " &pointou=" + pointou 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def swathplt(self,
                 model='required',
                 sample='optional',
                 swath1='required',
                 swath2='required',
                 swathstr='optional',
                 samplex='optional',
                 sampley='optional',
                 samplez='optional',
                 grade1='required',
                 grade2-10='optional',
                 sgrade1 - 10='optional',
                 dcweight='optional',
                 retrieval='optional'):

        """
        SWATHPLT
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        model: Input
            Input block model file 
            Required=Yes
        sample: Input
            Optional Input sample data file. This must be a set of samples with X, Y and Z locations, it may a 
            drillhole file. 
            Required=No

        Output Files:
        -------------

        swath1: Plot File
            Output swath plot data file. This file contains the Swath Plot data in a structure that is 
            for creating a plot using Studio's scatter/line plot function in the Plots views. 
            Required=Yes
        swath2: Plot File
            Alternative output swath plot data file. This file contains the Swath Plot data in a structure 
            is suitable for graphing in Excel. 
            Required=Yes
        swathstr: String File
            Optional output string file showing the location of the Swath slices and the relative grade 
            
            Required=No

        Fields:
        -------

        samplex: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No
        sampley: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No
        samplez: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No
        grade1: Undefined : Undefined
            nan 
            Default=Undefined
            Required=Yes
        grade2-10: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No
        sgrade1 - 10: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No
        dcweight: Undefined : Undefined
            nan 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "swathplt "


        # Required input error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if sample != "optional":
            command += " &sample=" + sample 


        # Required output error check

        if swath1 == "required":
            raise ValueError("swath1 is required.")

        command += " &swath1=" + swath1 


        # Required output error check

        if swath2 == "required":
            raise ValueError("swath2 is required.")

        command += " &swath2=" + swath2 

        if swathstr != "optional":
            command += " &swathstr=" + swathstr 

        if samplex != "optional":
            command += " *samplex=" + samplex 

        if sampley != "optional":
            command += " *sampley=" + sampley 

        if samplez != "optional":
            command += " *samplez=" + samplez 


        # Required field error check

        if grade1 == "required":
            raise ValueError("grade1 is required.")

        command += " *grade1=" + grade1 

        if grade2-10 != "optional":
            command += " *grade2-10=" + grade2-10 

        if sgrade1 - 10 != "optional":
            command += " *sgrade1 - 10=" + sgrade1 - 10 

        if dcweight != "optional":
            command += " *dcweight=" + dcweight 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def syspar(self):

        """
        SYSPAR
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "syspar "


        self.run_command(command)

    def tabres(self,
               results='required',
               print_=0,
               retrieval='optional'):

        """
        TABRES
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        results: Input
            The input results file. This must contain at least the following fields:- MODEL A,8 : Model name 
            PERIMIN A,8 : Perimeter file name (implicit). TYPE A,8 : Blank or BALANCE. PLANE A,8 : LEVEL, 
            ROW, SECTION. NUMBER N : Plane number. SEQUENCE N : Evaluation number in plane. PERIMID N : 
            identifier. DENSITY N : Mean density. VOLUME N : Total volume evaluated. TONNES N : Total 
            evaluated. Optional fields: INTERVAL N : Grade Interval number. LOWER N : Lower bound 
            UPPER N : Upper bound (excluded). <rocktype> A/N : Rocktype field. <grade1> N : First grade 
            TONNESA N : Tonnes for first grade. <grade2> N : Second grade field. TONNESB N : Tonnes for second 
            ---- repeated for each grade field ----- 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        print: 
            >=1 : print all tables, even if volumes are zero. Default is omit zero tables (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "tabres "


        # Required input error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def tblin(self,
              exdef='required',
              filter='optional',
              protodd='optional',
              fieldlst='optional',
              out='required',
              error='optional',
              layout=1,
              delim="optional",
              fs="optional",
              skiphd=0,
              findpg=0,
              eod="optional",
              trace=0,
              retrieval='optional'):

        """
        TBLIN
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        exdef: Input
            External field definition table. Specifies names, types and locations of input data fields. 
            criteria, if any, operate on EXDEF. EXDEF must contain at least the following :- TPLNAME A8 
            template name. FIELD A8 Logical name given to field in external file. START N Start position for 
            based layout (inclusive). END N End position for char based layout (inclusive). EXTFLDNR N 
            field number for field based layout. TYPE A1 Field type alpha/numeric {A,a,N,n} only. MIN N 
            value < "MIN" , output to ERROR if true. MAX N Check value > "MAX" , output to ERROR if true. ALPHJST 
            Required justification for output string {L,l,R,r,N,n} ALPHWID N Required output field 
            ALPHDEF A12 If input field empty or blank, set to "ALPHADEF" Optional filter fields for 
            on numeric output fields:- ABSENT A12 Search for "ABSENT" and replace with '-'. TRACE A12 
            for "TRACE" and replace with 'TR'. CVTZERO A12 Search for zero value and replace with 
            CVTBLANK A12 Search for "whitespace" and replace with "CVTBLANK" CVTNEG A12 Search for "-ve 
            and replace with "CVTNEG" If "CVTNEG"=KEEP, make no conversion. If "CVTNEG"=RGCE, convert 
            values with the formula : RESULT=ABS(VALUE)/2 CONST N Add "CONST" to the input value. FACTOR N 
            result by "FACTOR". SHIFT N Add "SHIFT" to result, and store this value. 
            Required=Yes
        filter: Input
            Optional input data filter table. Must contain at least the following fields :- FIELD A8 Name of 
            for filtering. USERIN A16 Value, key or pattern to search for in "FIELD" USEROUT A16 If "USERIN" 
            replace with "USEROUT" USERIN Keywords (reserved words entered in square brackets [] ):- 
            : search for "0" and replace with USEROUT. [CVTBLANK] : search for "whitespace" and replace 
            USEROUT. [CVTNEG] : search for -ve values and replace with USEROUT. [CONST] : add "USEROUT" to 
            value (step 1) [FACTOR] : multiply "USEROUT" with input value (step 2) [SHIFT] : add "USEROUT" 
            input value (step 3) [char] : search for char,if present anywhere, replace with USEROUT. user 
            : match entire string (ignore leading and trailing blanks), and replace with USEROUT. USEROUT 
            :- - : use Datamine Missing Value for USEROUT. TR : use Datamine Trace Value for USEROUT. [RGCE] : 
            formula USEROUT=ABS(input)/2 (Only with [CVTNEG]) user string : use the supplied value for 
            Multiple USERIN/USEROUT pairs can be supplied for any field. If USERIN consists of the 
            sequence [char], then any input data containing "char" will be replaced with "USEROUT". eg 
            will replace <0.01 with TR. FIELD for USERIN=[char] or user string can specify a numeric or an 
            input field. 
            Required=No
        protodd: Input
            Optional prototype data definition. Selects fields to be created in OUT. If not supplied, data 
            is created for all fields defined in EXDEF. Implicit fields defined in EXDEF are made explicit. 
            field lengths are taken from EXDEF. 
            Required=No
        fieldlst: Input
            Optional field subset list. Selects fields to be created in OUT. If not supplied, data 
            is define for all fields in EXDEF. Maximum of one of PROTODD , FIELDLST can be specified. 
            must contain at least the following field:- FIELD A8 Name of field for output. (must be subset of 
            
            Required=No

        Output Files:
        -------------

        out: Table
            Output database file to be created. 
            Required=Yes
        error: Undefined
            Optional output file for error records. If not supplied, data which is outside MIN...MAX 
            is placed in OUT. 
            Required=No

        Fields:
        -------


        Parameters:
        -----------

        layout: 
            Input file organisation method. 1=Char Each field located by START, END. 2=Free Datamine 
            "free" format. 3=Comma Fields separated by commas, no quotes 4=Single Fields sep. by commas, 
            with ' 5=Double Fields sep. by commas, quote with " 6=White Fields separated by spaces/tabs 
            Supply FS and/or DELIM explicitly 
            Range=1,7
            Values=1,2,3,4,5,6,7
            Default=1
            Required=Yes
        delim: 
            Optional field delimiter. Max 4 chars. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        fs: 
            Optional field separator. Max 4 chars. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        skiphd: 
            >=1 Omit n lines of header (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        findpg: 
            >=1 Scan for "page breaks" and omit headers and footers from all pages (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        eod: 
            Optional end of data string. Max 4 char. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        trace: 
            >=1 Display each nth input record (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "tblin "


        # Required input error check

        if exdef == "required":
            raise ValueError("exdef is required.")

        command += " &exdef=" + exdef 

        if filter != "optional":
            command += " &filter=" + filter 

        if protodd != "optional":
            command += " &protodd=" + protodd 

        if fieldlst != "optional":
            command += " &fieldlst=" + fieldlst 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if error != "optional":
            command += " &error=" + error 


        # Required parameter error check

        if layout == "required":
            raise ValueError("layout is required.")

        command += " @layout=" + str(layout) 

        if delim != "optional":
            command += " @delim=" + str(delim) 

        if fs != "optional":
            command += " @fs=" + str(fs) 

        if skiphd != "optional":
            command += " @skiphd=" + str(skiphd) 

        if findpg != "optional":
            command += " @findpg=" + str(findpg) 

        if eod != "optional":
            command += " @eod=" + str(eod) 

        if trace != "optional":
            command += " @trace=" + str(trace) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def tdin(self):

        """
        TDIN
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "tdin "


        self.run_command(command)

    def tdout(self,
              in_='required',
              value='required',
              zone='optional',
              retrieval='optional'):

        """
        TDOUT
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        value: Undefined : Undefined
            Economic value field. 
            Default=Undefined
            Required=Yes
        zone: Undefined : Undefined
            Ore-body identification field. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "tdout "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 

        if zone != "optional":
            command += " *zone=" + zone 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def terplt(self,
               in_='required',
               f1='required',
               f2='required',
               f3='required',
               plot=0,
               print_=0,
               retrieval='optional'):

        """
        TERPLT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------

        f1: Undefined : Undefined
            First input field of ternary plot (top apex). 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            Second input field of ternary plot (bottom left). 
            Default=Undefined
            Required=Yes
        f3: Undefined : Undefined
            Third input field of ternary plot (bottom right). 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        plot: 
            Option Description 1 output of ternary plot to printer or print file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            Option Description 1 output of data values to printer or print file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "terplt "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 


        # Required field error check

        if f2 == "required":
            raise ValueError("f2 is required.")

        command += " *f2=" + f2 


        # Required field error check

        if f3 == "required":
            raise ValueError("f3 is required.")

        command += " *f3=" + f3 

        if plot != "optional":
            command += " @plot=" + str(plot) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def tongrad(self,
                in_='required',
                out='required',
                csvout='optional',
                tgcumtiv='optional',
                f1='optional',
                f2='optional',
                f3='optional',
                f4='optional',
                f5='optional',
                f6='optional',
                f7='optional',
                f8='optional',
                f9='optional',
                f10='optional',
                f11='optional',
                f12='optional',
                f13='optional',
                f14='optional',
                f15='optional',
                f16='optional',
                f17='optional',
                f18='optional',
                f19='optional',
                f20='optional',
                key1='optional',
                key2='optional',
                key3='optional',
                key4='optional',
                key5='optional',
                orefrac='optional',
                density='optional',
                addf1-10='optional',
                factor=1,
                density=1,
                column=0,
                row=0,
                bench=0,
                cogstep=0,
                trename=0,
                setabsnt=0,
                retrieval='optional'):

        """
        TONGRAD
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input model file 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output reserves file. 
            Required=Yes
        csvout: Table
            Optional CSV Output file. This is a system file, not a Datamine (.dm) file. It contains the same 
            as the Datamine OUT file, but it is a Comma Separated Variable (CSV) file, suitable for input to a 
            The extension .CSV will be added automatically to the file name. 
            Required=No
        tgcumtiv: Table
            Output tonnes grade curve cumulative data file. This can only be output if the @COGSTEP 
            is set to define cutoffs. This table can be used to create tonnage grade curves. 
            Required=No

        Fields:
        -------

        f1: Undefined : Undefined
            First (main) grade field for evaluation 
            Default=Undefined
            Required=No
        f2: Undefined : Undefined
            Second grade field for evaluation 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            Third grade field for evaluation 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            Fourth grade field for evaluation 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            Fifth grade field for evaluation 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            Sixth grade field for evaluation 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            Seventh grade field for evaluation 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            Eighth grade field for evaluation 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            Nineth grade field for evaluation 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            Tenth grade field for evaluation 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            Eleventh grade field for evaluation 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            Twelfth grade field for evaluation 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            Thirteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            Fourteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            Fifteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            Sixteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            Seventeenth grade field for evaluation 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            Eighteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            Nineteenth grade field for evaluation 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            Twentieth grade field for evaluation Up to 60 fields can be selected using *F21 etc from a macro 
            script. 
            Default=Undefined
            Required=No
        key1: Undefined : Undefined
            First key field for reserve classification. 
            Default=Undefined
            Required=No
        key2: Undefined : Undefined
            Second key field for reserve classification. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Third key field for reserve classification. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Fourth key field for reserve classification. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Five key field for reserve classification. 
            Default=Undefined
            Required=No
        orefrac: Undefined : Undefined
            Ore fraction field - containing values between 0 and 1. 
            Default=Undefined
            Required=No
        density: Numeric : IN
            Field containing density values. If a field is not selected then the value specified by the 
            parameter will be used. 
            Default=DENSITY
            Required=No
        addf1-10: Numeric : IN
            1st to 10th fields to be treated as additive. 
            Default=DENSITY
            Required=No

        Parameters:
        -----------

        factor: 
            Scaling factor to adjust the units of the Volume and Tonnage in the output files. Volume and 
            are divided by this factor. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        density: 
            Density value to be used for tonnage calculations if a DENSITY field is not used. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        column: 
            Set to 1 for additional COLUMN (YZ slices by X) categorisation. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        row: 
            Set to 1 for additional ROW (XZ slices by Y) categorisation. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        bench: 
            Set to 1 for additional BENCH (XY slices by Z) categorisation. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        cogstep: 
            Cut-off grade step, which applied to main F1 grade field, and then used for categorisation of 
            
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        trename: 
            The @TRENAME parameter can be used to change the output field name of TONNES to reflect the use of 
            @FACTOR parameter. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        setabsnt: 
            Set to 1 to allow TONGRAD to reset absent grade and Density values. If this is used, absent grade 
            are set to their default values. If the default value is absent grade values are set to zero. If 
            values are absent the default DENSITY parameter value is used. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        """


        command = "tongrad "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if csvout != "optional":
            command += " &csvout=" + csvout 

        if tgcumtiv != "optional":
            command += " &tgcumtiv=" + tgcumtiv 

        if f1 != "optional":
            command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if key1 != "optional":
            command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if orefrac != "optional":
            command += " *orefrac=" + orefrac 

        if density != "optional":
            command += " *density=" + density 

        if addf1-10 != "optional":
            command += " *addf1-10=" + addf1-10 

        if factor != "optional":
            command += " @factor=" + str(factor) 

        if density != "optional":
            command += " @density=" + str(density) 

        if column != "optional":
            command += " @column=" + str(column) 

        if row != "optional":
            command += " @row=" + str(row) 

        if bench != "optional":
            command += " @bench=" + str(bench) 

        if cogstep != "optional":
            command += " @cogstep=" + str(cogstep) 

        if trename != "optional":
            command += " @trename=" + str(trename) 

        if setabsnt != "optional":
            command += " @setabsnt=" + str(setabsnt) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def trend(self,
              in_='required',
              out='required',
              x='required',
              y='required',
              value='required',
              order=1,
              print_=0,
              select=1,
              retrieval='optional'):

        """
        TREND
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input data file. Must contain the fields X , Y , and VALUE. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file containing the surface coefficients. The fields are C0, CX, CY, CXY, CX2, CY2, 
            CXY2, CX3, CY3. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            X Co-ordinate fieldname. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Y Co-ordinate fieldname. 
            Default=Undefined
            Required=Yes
        value: Undefined : Undefined
            Field to be fitted. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        order: 
            Order of surface (1,2, or 3). 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=Yes
        print: 
            >0, displays original samples, fitted points and differences (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        select: 
            Allows the user to select every nth record, where n=SELECT (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        """


        command = "trend "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if value == "required":
            raise ValueError("value is required.")

        command += " *value=" + value 


        # Required parameter error check

        if order == "required":
            raise ValueError("order is required.")

        command += " @order=" + str(order) 

        if print_ != "optional":
            command += " @print=" + str(print_) 

        if select != "optional":
            command += " @select=" + str(select) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def tricon(self,
               in_='optional',
               wirept='optional',
               wiretr='optional',
               proto='required',
               plot='required',
               x='optional',
               y='optional',
               value='optional',
               vmin="optional",
               vmax="optional",
               cint="optional",
               dmax="optional",
               surface=+1,
               optimise=0,
               boundary="optional",
               dupelim=0,
               tol="optional",
               ndp=0,
               charsize=3,
               aspratio=0.9,
               nan=1,
               append=0,
               xmin="optional",
               xmax="optional",
               ymin="optional",
               ymax="optional",
               xscale="optional",
               yscale="optional",
               retrieval='optional'):

        """
        TRICON
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Optional input data file. Must contain fields X, Y, VALUE. 
            Required=No
        wirept: Input
            Optional input wireframe point file. 
            Required=No
        wiretr: Input
            Optional input wireframe triangle file. 
            Required=No
        proto: Input
            Plot prototype file. Must contain the fields X, Y, S1, S2, CODE (numeric, explicit) and XMIN, 
            YMIN, YMAX, XSCALE, YSCALE (numeric, implicit). If these last 6 values set in PROTO , then 
            parameters need not be set. If no plot prototype file, then XMIN, XMAX, YMIN, YMAX taken from the 
            file on IN. 
            Required=Yes

        Output Files:
        -------------

        plot: Plot
            Output plot file. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            X co-ordinate field in input file. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            Y co-ordinate field in input file. 
            Default=Undefined
            Required=No
        value: Undefined : Undefined
            Field to be contoured. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        vmin: 
            Minimum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        vmax: 
            Maximum contour value. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        cint: 
            Contour interval. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        dmax: 
            Maximum separation of points to be joined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        surface: 
            Optional surface identifier. +1 for upper surface, -1 for lower surface (+1). 
            Range=-1, 1
            Values=-1, 1
            Default=+1
            Required=No
        optimise: 
            Linear or quadratic contour tracing; =0 linear; =1 quadratic (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        boundary: 
            Option Description 0 no boundary plotted; =1 boundary of data area plotted. 
            Range=0,1
            Values=Undefined
            Default=Undefined
            Required=No
        dupelim: 
            Set to 1 to allow elimination of duplicate points (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        tol: 
            0.00001 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ndp: 
            Number of decimal places for annotation (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        charsize: 
            Character size in millimeters (3). 
            Range=Undefined
            Values=Undefined
            Default=3
            Required=No
        aspratio: 
            Aspect ratio, width / ht. for chars (0.9). 
            Range=Undefined
            Values=Undefined
            Default=0.9
            Required=No
        nan: 
            Colour [as 'pen' number] for plot (1). 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        append: 
            Plot append flag. If set to 1 then the new plot will be appended to the PLOT file, if it exists and is 
            valid plot file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        xmin: 
            Minimum value of X for plot. None of XMIN, XMAX, YMIN, YMAX, XSCALE, YSCALE need be set if this 
            is already in the prototype. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xmax: 
            Maximum value of X for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymin: 
            Minimum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        ymax: 
            Maximum value of Y for plot. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        xscale: 
            X scale in user data units per millimeter. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        yscale: 
            Y scale in user data units per millimeter. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        """


        command = "tricon "

        if in_ != "optional":
            command += " &in=" + in_ 

        if wirept != "optional":
            command += " &wirept=" + wirept 

        if wiretr != "optional":
            command += " &wiretr=" + wiretr 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required output error check

        if plot == "required":
            raise ValueError("plot is required.")

        command += " &plot=" + plot 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if value != "optional":
            command += " *value=" + value 


        # Required parameter error check

        if vmin == "required":
            raise ValueError("vmin is required.")

        command += " @vmin=" + str(vmin) 


        # Required parameter error check

        if vmax == "required":
            raise ValueError("vmax is required.")

        command += " @vmax=" + str(vmax) 


        # Required parameter error check

        if cint == "required":
            raise ValueError("cint is required.")

        command += " @cint=" + str(cint) 

        if dmax != "optional":
            command += " @dmax=" + str(dmax) 

        if surface != "optional":
            command += " @surface=" + str(surface) 

        if optimise != "optional":
            command += " @optimise=" + str(optimise) 

        if boundary != "optional":
            command += " @boundary=" + str(boundary) 

        if dupelim != "optional":
            command += " @dupelim=" + str(dupelim) 

        if tol != "optional":
            command += " @tol=" + str(tol) 

        if ndp != "optional":
            command += " @ndp=" + str(ndp) 

        if charsize != "optional":
            command += " @charsize=" + str(charsize) 

        if aspratio != "optional":
            command += " @aspratio=" + str(aspratio) 

        if nan != "optional":
            command += " @nan=" + str(nan) 

        if append != "optional":
            command += " @append=" + str(append) 

        if xmin != "optional":
            command += " @xmin=" + str(xmin) 

        if xmax != "optional":
            command += " @xmax=" + str(xmax) 

        if ymin != "optional":
            command += " @ymin=" + str(ymin) 

        if ymax != "optional":
            command += " @ymax=" + str(ymax) 

        if xscale != "optional":
            command += " @xscale=" + str(xscale) 

        if yscale != "optional":
            command += " @yscale=" + str(yscale) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def trifil(self,
               proto='required',
               wiretr='required',
               wirept='required',
               perimin='optional',
               model='required',
               zone='optional',
               modltype=1,
               zone="optional",
               maxdip=0,
               splits=3,
               plane='XY',
               xsubcell=1,
               ysubcell=1,
               zsubcell=1,
               pvalue="optional",
               resol=0,
               checkrot=0,
               retrieval='optional'):

        """
        TRIFIL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Model prototype file. 
            Required=Yes
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes
        perimin: Input
            Optional perimeter input file to control area over which model is generated. 
            Required=No

        Output Files:
        -------------

        model: Block Model
            Output model file to be created. 
            Required=Yes

        Fields:
        -------

        zone: Undefined : Undefined
            Name of zone field for wireframe with multiple zones to be filled. The field can be either 
            or alpha. However if the field is an alpha field then it can contain a maximum of 4 characters. If 
            specified and a field ZONE exists in WIRETR then it will automatically be used. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        modltype: 
            Type of wireframe model to be filled; one of the following options, with default of (1) :- Option 
            1 solid 3d, interior to be filled with cells 2 solid 3d, exterior to be filled with cells 3 
            cells to be filled below (for XY), to south (for XZ), or to west (for YZ) 4 surface, cells to be 
            above (for XY), to north (for XZ), or to east (for YZ) 5 two surfaces, cells to be fill between. 6 
            surfaces, cells to be filled above upper surface and below lower surface. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=1
            Required=Yes
        zone: 
            Zone code to be inserted into output model ZONE field. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        maxdip: 
            Maximum gradient for any triangle intersecting a cell before splitting into subcells (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        splits: 
            Maximum amount of splitting to be allowed (3), within range 0 [for 1 x 1] to 3 [for 8 x 8]. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        plane: 
            Optional alpha parameter defining orientation 'XY', 'XZ', or 'YZ', of plane in which subcell 
            is to be performed. Please note that care must be taken in selection of the plane to be used if the 
            of the wireframe have not been linked, as the wireframe model is then partially 'hollow' when 
            from certain directions. 
            Range=Undefined
            Values=Undefined
            Default='XY'
            Required=No
        xsubcell: 
            Cell division in X direction (1). Max 100. 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        ysubcell: 
            Cell division in Y direction (1). Max 100. 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        zsubcell: 
            Cell division in Z direction (1). Max 100. 
            Range=1,100
            Values=Undefined
            Default=1
            Required=No
        pvalue: 
            PVALUE of single perimeter to be selected from the PERIMIN file. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        resol: 
            Defines boundary resolution in direction perpendicular to plane of filling. =(0) - precise 
            location. = N - boundary rounded to nearest 1/Nth of parent cell size. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        checkrot: 
            Set to 1 to automatically detect and correctly process rotated models. Using this parameter 
            that the input wireframe points file no longer needs to be transformed into the model space 
            using TRIFIL. The default value is 0. This means that any existing macros that already 
            the wireframe points file will still work as in Studio 3. 
            Range=0, 1
            Values=0, 1
            Default=0
            Required=No
        """


        command = "trifil "


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if modltype == "required":
            raise ValueError("modltype is required.")

        command += " @modltype=" + str(modltype) 

        if zone != "optional":
            command += " @zone=" + str(zone) 

        if maxdip != "optional":
            command += " @maxdip=" + str(maxdip) 

        if splits != "optional":
            command += " @splits=" + str(splits) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if xsubcell != "optional":
            command += " @xsubcell=" + str(xsubcell) 

        if ysubcell != "optional":
            command += " @ysubcell=" + str(ysubcell) 

        if zsubcell != "optional":
            command += " @zsubcell=" + str(zsubcell) 

        if pvalue != "optional":
            command += " @pvalue=" + str(pvalue) 

        if resol != "optional":
            command += " @resol=" + str(resol) 

        if checkrot != "optional":
            command += " @checkrot=" + str(checkrot) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def tripoi(self,
               in_='required',
               wiretr='required',
               wirept='required',
               out='required',
               x='required',
               y='required',
               z='required',
               keep=0,
               retrieval='optional'):

        """
        TRIPOI
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file to be intersected. Must contain fields X , Y , Z. Must be sorted on X. 
            Required=Yes
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Output file with additional elevation field. 
            Required=Yes

        Fields:
        -------

        x: Undefined : Undefined
            Name of intersection X field in IN. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Name of intersection Y field in IN. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Name of output elevation field in OUT. 
            Default=Undefined
            Required=Yes

        Parameters:
        -----------

        keep: 
            To carry through points not intersected by any triangle, with Z 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "tripoi "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if keep != "optional":
            command += " @keep=" + str(keep) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def trival(self,
               modeli='required',
               wiretr='required',
               wirept='required',
               results='required',
               modelo='optional',
               zone='optional',
               density=nan,
               fullcell=0,
               mine=0,
               plane="XY",
               incrment=0,
               modltype=0,
               chkovlap=0,
               checkrot=0,
               nosid=0,
               print_=0,
               retrieval='optional'):

        """
        TRIVAL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        modeli: Input
            Model file for evaluation. Must contain at least the fields XC, YC, ZC, XINC, YINC, ZINC, 
            YMORIG, ZMORIG, NX, NY, NZ, IJK. 
            Required=Yes
        wiretr: Input wireframe triangle file.
            Wireframe Triangle 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes

        Output Files:
        -------------

        results: Undefined
            The output results file, in a format suitable for input into the TABRES process 
            Required=Yes
        modelo: Block Model
            Optional output model file. This may be the same as the input, if the MINED field exists in the 
            file. The MINED field will be created in the output file if it does not exist. 
            Required=No

        Fields:
        -------

        zone: Undefined : Undefined
            Optional zone identifier field (numeric or single-word alpha) in the WIRETR triangle file, 
            individual wire-frame zone models. This field will be added to the results file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        density: 
            Set required density value. This will only be used if there is no DENSITY field in the input 
            If there is no DENSITY field, and no DENSITY parameter, then a value of 1.0 is used. 
            Range=nan
            Values=nan
            Default=nan
            Required=Yes
        fullcell: 
            = 0 : partial cell evaluation = 1 : whole cell evaluation in place of partial cell evaluation 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        mine: 
            Optional; if non-zero, output proportion mined in MINED field of MODELO file (0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        plane: 
            Optional alpha parameter defining slice orientation to be used in classification of results 
            'XZ', or 'YZ'. 
            Range=nan
            Values=XY, YZ, XZ
            Default="XY"
            Required=No
        incrment: 
            (0) If non-zero, mining is assumed to be incremental, and for any (sub-)cell the amount mined in 
            pass must be greater than the total mined so far for it to be recorded. If zero, mining is assumed 
            be additive, subject to a total mined fraction of 1. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        modltype: 
            Type of wireframe model to be evaluated; one of the following options:- =1 : solid 3d, interior 
            be evaluated. =3 : surface, cells to be evaluated below [for XY], to south [for XZ], or to west 
            YZ]. =4 : surface, cells to be evaluated above [for XY], to north [for XZ], or to east [for YZ]. 
            Range=nan
            Values=1, 3, 4
            Default=0
            Required=No
        chkovlap: 
            Control checking of overlapping triangles. This applies only to model types of 3 and 4. If set to 
            then checking of triangle overlaps is performed. If set to zero then no checking will occur. 
            should be done where DTMs curve over themselves as in some seam models. Checking can be turned 
            for DTMs where this is known not to occur, such as in an open pit wireframe. If checking is turned 
            the process will run faster. (1). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        checkrot: 
            Set to 1 to automatically check for and correctly process rotated models. The default value is 
            If this is not set to 1 and the model is rotated then the wireframe points need to be transformed 
            the model coordinate space using CDTRAN before running TRIFIL. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        nosid: 
            Option Description 1 Disables checking of SIDs for increased speed. Use for single surfaces 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        print: 
            =1 : ; Show a line for each cell evaluated in each perimeter.(0). 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "trival "


        # Required input error check

        if modeli == "required":
            raise ValueError("modeli is required.")

        command += " &modeli=" + modeli 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if results == "required":
            raise ValueError("results is required.")

        command += " &results=" + results 

        if modelo != "optional":
            command += " &modelo=" + modelo 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if density == "required":
            raise ValueError("density is required.")

        command += " @density=" + str(density) 

        if fullcell != "optional":
            command += " @fullcell=" + str(fullcell) 

        if mine != "optional":
            command += " @mine=" + str(mine) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if incrment != "optional":
            command += " @incrment=" + str(incrment) 

        if modltype != "optional":
            command += " @modltype=" + str(modltype) 

        if chkovlap != "optional":
            command += " @chkovlap=" + str(chkovlap) 

        if checkrot != "optional":
            command += " @checkrot=" + str(checkrot) 

        if nosid != "optional":
            command += " @nosid=" + str(nosid) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def trivol(self,
               wiretr='required',
               wirept='required',
               perimin='optional',
               out='optional',
               zone='optional',
               zbase="optional",
               nosid=1,
               dtm=1,
               retrieval='optional'):

        """
        TRIVOL
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Input wireframe triangle file. 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes
        perimin: Input
            Optional input perimeter file containing XP,YP,ZP fields, defining perimeter(s) within 
            volume is to be computed. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Optional output file, which will contain the fields VOLUME, UPPERVOL, LOWAREA, UPAREA, 
            MINZ, MAXZ, MINX, MAXX, MINY, MAXY, MINDIP, MAXDIP, NUMTRI, and the optional zone definition 
            if one is specified. 
            Required=No

        Fields:
        -------

        zone: Undefined : Undefined
            Zone definition field in triangle file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        zbase: 
            Base elevation above which volumes are computed. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        nosid: 
            Option Description 1 Disables checking of SIDs for increased speed. Use No 1 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        dtm: 
            Option Description 1 Disables checking of overlaps for specified DTM No 1 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "trivol "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if perimin != "optional":
            command += " &perimin=" + perimin 

        if out != "optional":
            command += " &out=" + out 

        if zone != "optional":
            command += " *zone=" + zone 


        # Required parameter error check

        if zbase == "required":
            raise ValueError("zbase is required.")

        command += " @zbase=" + str(zbase) 

        if nosid != "optional":
            command += " @nosid=" + str(nosid) 

        if dtm != "optional":
            command += " @dtm=" + str(dtm) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def truethk(self,
                in_='required',
                out='required',
                retrieval='optional'):

        """
        TRUETHK
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Sample/composite data file. 
            Required=Yes

        Output Files:
        -------------

        out: Sample data
            Sample/composite data with calculated true, vertical and horizontal thickness fields. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "truethk "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def unfold(self,
               in_='required',
               string='required',
               unitdef='optional',
               out='required',
               quads='optional',
               x='optional',
               y='optional',
               z='optional',
               section='optional',
               boundary='optional',
               wstag='optional',
               bstag='optional',
               tag='optional',
               unitname='optional',
               hangwall='optional',
               footwall='optional',
               ucsa='optional',
               ucsb='optional',
               ucsc='optional',
               linkmode=3,
               ucsamode=2,
               ucsbmode=3,
               ucscmode=2,
               plane=1,
               hangid="optional",
               footid="optional",
               unitid="optional",
               tolrnc=0,
               ucsalimt=1,
               orgtag=-,
               retrieval='optional'):

        """
        UNFOLD
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input file containing the X,Y and Z fields of points in the world coordinate system which are to 
            transformed to the UCS. 
            Required=Yes
        string: Input
            Input string file holding the boundary strings which define the stratified unit[s]. 7 fields 
            compulsory: SECTION , BOUNDARY , PVALUE,XP,YP,ZP and PTN. 3 optional fields are WSTAG , BSTAG 
            TAG. The file must be sorted on SECTION , BOUNDARY PTN, with SECTION being the primary keyfield. 
            is assumed that the section numbering system is such that sorting on SECTION will ensure that 
            adjacent sections are adjacent in the STRING file. 
            Required=Yes
        unitdef: Input
            Optional input file containing the BOUNDARY value for the hangingwall and footwall of each 
            unit. It must contain the 3 fields: UNITNAME , HANGWALL and FOOTWALL. If UNITDEF is not defined, 
            stratified unit must be defined by UNITID , HANGID , 
            Required=No

        Output Files:
        -------------

        out: Undefined
            The output file contains all the fields from the IN file plus the UCS coordinate fields UCSA , 
            and UCSC , and the UNITNAME field. The OUT file must be different from the IN file. 
            Required=Yes
        quads: Undefined
            Optional output file containing the quadrilaterals linking hangingwall and footwall points 
            and between sections. The file contains 8 fields: PVALUE, PTN, XP, YP, ZP BLOCKTYP, SECTION and 
            
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            The numeric field name in the IN file holding the data X co-ordinate, in world coordinates. The 
            field name is X. 
            Default=Undefined
            Required=No
        y: Undefined : Undefined
            The numeric field name in the IN file holding the data Y co-ordinate, in world coordinates. The 
            field name is Y. 
            Default=Undefined
            Required=No
        z: Undefined : Undefined
            The numeric field name in the IN file holding the data Z co-ordinate, in world coordinates. The 
            field name is Z. 
            Default=Undefined
            Required=No
        section: Undefined : Undefined
            The numeric field name in the STRING file holding the section identifier. The default field 
            is SECTION. 
            Default=Undefined
            Required=No
        boundary: Undefined : Undefined
            The numeric field name in the STRING file holding the boundary identifier. The default field 
            is BOUNDARY. 
            Default=Undefined
            Required=No
        wstag: Undefined : Undefined
            Within Section TAG. A numeric tag field in the STRING file, defining the stratigraphical links 
            hangingwall and footwall points on strings within the same section. A value of 0 or - means that 
            point is not linked. The default field name is WSTAG. 
            Default=Undefined
            Required=No
        bstag: Undefined : Undefined
            Between Section TAG. A numeric tag field in the STRING file, defining the stratigraphical 
            between 2 points on strings on adjacent sections with the same BOUNDARY. A value of 0 or - means 
            the point is not linked. The default field name is BSTAG. 
            Default=Undefined
            Required=No
        tag: Undefined : Undefined
            A numeric tag field in the STRING file, defining both the stratigraphical links between points 
            strings within the same section, and between points on adjacent sections with the same 
            A value of 0 or - means that the point is not linked. The default field name is TAG. 
            Default=Undefined
            Required=No
        unitname: Undefined : Undefined
            An alpha or numeric field in the UNITDEF file defining the name or number of the unit. The default 
            name is UNITNAME. 
            Default=Undefined
            Required=No
        hangwall: Undefined : Undefined
            A numeric field in the UNITDEF file which defines the BOUNDARY value of the hangingwall for each 
            The default field name is HANGWALL. 
            Default=Undefined
            Required=No
        footwall: Undefined : Undefined
            A numeric field in the UNITDEF file which defines the BOUNDARY value of the footwall for each 
            The default field name is FOOTWALL. 
            Default=Undefined
            Required=No
        ucsa: Undefined : Undefined
            The name of the A coordinate field in the UCS measured perpendicular to the strings within a 
            [across strike]. The field is created in the OUT file and has the default name of UCSA. 
            Default=Undefined
            Required=No
        ucsb: Undefined : Undefined
            The name of the B coordinate field in the UCS measured parallel to the boundary strings [down 
            This field is created in the OUT file and has the default name of UCSB. 
            Default=Undefined
            Required=No
        ucsc: Undefined : Undefined
            The name of the C coordinate field in the UCS measured from section to section [along strike]. 
            field is created in the OUT file and has the default name of UCSC. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        linkmode: 
            The method by which links between strings are created. Option Description 0 - Within section 
            are defined by the WSTAG field, or by the TAG field if WSTAG does not exist. Between section links 
            defined by the BSTAG field, or by the TAG field if BSTAG does not exist. 1 - Within section links 
            defined automatically. Between section links are defined by the BSTAG field, or by the TAG 
            if BSTAG does not exist. 2 - Within section links are defined by the WSTAG field, or by the TAG 
            if WSTAG does not exist. Between section links are defined automatically. 3 - Within section 
            are defined automatically. Between section links are defined automatically. For simple 
            it is not essential to define tag points on the strings; using the default value (3) ensures that 
            linking will be applied both within and between sections. 
            Range=0,3
            Values=0,1,2,3
            Default=3
            Required=No
        ucsamode: 
            The type of UCSA coordinate written to the OUT file. Default (2). Option Description 1 - 
            are normalised. 2 - coordinates are adjusted. 3 - coordinates are true length. 4 - coordinates 
            world X value. 5 - coordinates are world Y value. 6 - coordinates are world Z value. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=2
            Required=No
        ucsbmode: 
            The type of UCSB coordinate written to the OUT file. Default (3). Option Description 1 - 
            are normalised. 2 - coordinates are adjusted. 3 - coordinates are true length. 4 - coordinates 
            world X value. 5 - coordinates are world Y value. 6 - coordinates are world Z value. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=3
            Required=No
        ucscmode: 
            The type of UCSC coordinate written to the OUT file. Default (2). Option Description 1 - 
            are normalised. 2 - coordinates are adjusted. 3 - coordinates are true length. 4 - coordinates 
            world X value. 5 - coordinates are world Y value. 6 - coordinates are world Z value. 
            Range=1,6
            Values=1,2,3,4,5,6
            Default=2
            Required=No
        plane: 
            The plane of the structural interpretations defined in the STRING file. Default (1). 1 - 
            sectional interpretation. 2 - interpretation in plan. 
            Range=1,2
            Values=1,2
            Default=1
            Required=No
        hangid: 
            The value of the field BOUNDARY in the STRING file that defines the hangingwall of the unit. It 
            be used if the UNITDEF file is not defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        footid: 
            The value of the field BOUNDARY in the STRING file that defines the footwall of the unit. It will 
            used if the UNITDEF file is not defined. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        unitid: 
            If HANGID and FOOTID are used then the corresponding unit number is defined by parameter 
            
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=No
        tolrnc: 
            Tolerance in the calculation of the UCSA coordinate expressed as a proportion of the UCSA 
            The default is (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        ucsalimt: 
            Flag to define the limits of the UCSA coordinate if UCSAMODE=1 or 2 and TOLRNC>0. The options 
            are defined in terms of the Normalized mode [UCSAMODE=1]. Default (1) Option Description 1 - 
            values can be less than 0 and greater than 1 2 - UCSA values can be less than 0. Values calculated as 
            than 1 are reset to 1 3 - UCSA values calculated as less than 0 are reset to 0. Values can be greater 
            1 4 - UCSA values calculated as less than 0 are reset to 0. Values calculated as greater than 1 are 
            to 1 
            Range=1,4
            Values=1,2,3,4
            Default=1
            Required=No
        orgtag: 
            Tag number of points which define the origin surface from which the UCSB coordinate is 
            The default surface if ORGTAG is undefined (-) is created from the first points on each of the 
            and footwall strings. 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        """


        command = "unfold "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if string == "required":
            raise ValueError("string is required.")

        command += " &string=" + string 

        if unitdef != "optional":
            command += " &unitdef=" + unitdef 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if quads != "optional":
            command += " &quads=" + quads 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 

        if section != "optional":
            command += " *section=" + section 

        if boundary != "optional":
            command += " *boundary=" + boundary 

        if wstag != "optional":
            command += " *wstag=" + wstag 

        if bstag != "optional":
            command += " *bstag=" + bstag 

        if tag != "optional":
            command += " *tag=" + tag 

        if unitname != "optional":
            command += " *unitname=" + unitname 

        if hangwall != "optional":
            command += " *hangwall=" + hangwall 

        if footwall != "optional":
            command += " *footwall=" + footwall 

        if ucsa != "optional":
            command += " *ucsa=" + ucsa 

        if ucsb != "optional":
            command += " *ucsb=" + ucsb 

        if ucsc != "optional":
            command += " *ucsc=" + ucsc 

        if linkmode != "optional":
            command += " @linkmode=" + str(linkmode) 

        if ucsamode != "optional":
            command += " @ucsamode=" + str(ucsamode) 

        if ucsbmode != "optional":
            command += " @ucsbmode=" + str(ucsbmode) 

        if ucscmode != "optional":
            command += " @ucscmode=" + str(ucscmode) 

        if plane != "optional":
            command += " @plane=" + str(plane) 

        if hangid != "optional":
            command += " @hangid=" + str(hangid) 

        if footid != "optional":
            command += " @footid=" + str(footid) 

        if unitid != "optional":
            command += " @unitid=" + str(unitid) 

        if tolrnc != "optional":
            command += " @tolrnc=" + str(tolrnc) 

        if ucsalimt != "optional":
            command += " @ucsalimt=" + str(ucsalimt) 

        if orgtag != "optional":
            command += " @orgtag=" + str(orgtag) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def unifcond(self,
                 ucmodel='required',
                 grade='required',
                 weight='optional',
                 kriging='required',
                 dispvar='required',
                 errcode='optional',
                 vrefnum=0,
                 discx=5,
                 discy=5,
                 discz=5,
                 normsill=0,
                 classes=1,
                 cutmin=0,
                 cutint=10,
                 cutnum=10,
                 numsmux=1,
                 numsmuy=1,
                 numsmuz=1,
                 gaout=1):

        """
        UNIFCOND
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------

        ucmodel: Undefined
            The output file containing the uniform conditioned panel model. 
            Required=Yes

        Fields:
        -------

        grade: Undefined : Undefined
            The grade field (present in the samples file) that will be considered during the process of 
            Conditioning. 
            Default=Undefined
            Required=Yes
        weight: Undefined : Undefined
            An optional weighting field. 
            Default=Undefined
            Required=No
        kriging: Undefined : Undefined
            The field in the input (panel) model containing kriged values to be conditioned. 
            Default=Undefined
            Required=Yes
        dispvar: Undefined : Undefined
            The field in the input (panel) model containing kriging variance data. 
            Default=Undefined
            Required=Yes
        errcode: Undefined : Undefined
            The field in the input model containing error code information, if present. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        vrefnum: 
            A reference number relating to an experimental variogram as defined in VGRAM 
            Range=nan
            Values=nan
            Default=0
            Required=No
        discx: 
            Number of discretisation points in X direction as used for calculating the covariance of a cell 
            each of the surrounding samples. This is then used in calculating the kriging weights. 
            Range=nan
            Values=nan
            Default=5
            Required=No
        discy: 
            Number of discretisation points in Y direction 
            Range=nan
            Values=nan
            Default=5
            Required=No
        discz: 
            Number of discretisation points in Z direction 
            Range=nan
            Values=nan
            Default=5
            Required=No
        normsill: 
            Use (1) or don't use (0) normalized variogram sill values during grade-tonnage curve 
            
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        classes: 
            Number of panel classes 
            Range=nan
            Values=nan
            Default=1
            Required=No
        cutmin: 
            The minimum cutoff grade to be considered during Uniform Conditioning 
            Range=nan
            Values=nan
            Default=0
            Required=No
        cutint: 
            The size of each grade cutoff interval 
            Range=nan
            Values=nan
            Default=10
            Required=No
        cutnum: 
            The number of grade cutoff intervals to considered during Uniform Conditioning 
            Range=nan
            Values=nan
            Default=10
            Required=No
        numsmux: 
            Number of selective mining units (per panel) in the X direction 
            Range=nan
            Values=nan
            Default=1
            Required=No
        numsmuy: 
            Number of selective mining units (per panel) in the Y direction 
            Range=nan
            Values=nan
            Default=1
            Required=No
        numsmuz: 
            Number of selective mining units (per panel) in the Z direction 
            Range=nan
            Values=nan
            Default=1
            Required=No
        gaout: 
            Set to 1 to include grade-above cutoffs in the output model. Set 0 to exclude grade-above 
            which allows 50% more cutoff intervals to be specified. 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        """


        command = "unifcond "


        # Required output error check

        if ucmodel == "required":
            raise ValueError("ucmodel is required.")

        command += " &ucmodel=" + ucmodel 


        # Required field error check

        if grade == "required":
            raise ValueError("grade is required.")

        command += " *grade=" + grade 

        if weight != "optional":
            command += " *weight=" + weight 


        # Required field error check

        if kriging == "required":
            raise ValueError("kriging is required.")

        command += " *kriging=" + kriging 


        # Required field error check

        if dispvar == "required":
            raise ValueError("dispvar is required.")

        command += " *dispvar=" + dispvar 

        if errcode != "optional":
            command += " *errcode=" + errcode 

        if vrefnum != "optional":
            command += " @vrefnum=" + str(vrefnum) 

        if discx != "optional":
            command += " @discx=" + str(discx) 

        if discy != "optional":
            command += " @discy=" + str(discy) 

        if discz != "optional":
            command += " @discz=" + str(discz) 

        if normsill != "optional":
            command += " @normsill=" + str(normsill) 

        if classes != "optional":
            command += " @classes=" + str(classes) 

        if cutmin != "optional":
            command += " @cutmin=" + str(cutmin) 

        if cutint != "optional":
            command += " @cutint=" + str(cutint) 

        if cutnum != "optional":
            command += " @cutnum=" + str(cutnum) 

        if numsmux != "optional":
            command += " @numsmux=" + str(numsmux) 

        if numsmuy != "optional":
            command += " @numsmuy=" + str(numsmuy) 

        if numsmuz != "optional":
            command += " @numsmuz=" + str(numsmuz) 

        if gaout != "optional":
            command += " @gaout=" + str(gaout) 


        self.run_command(command)

    def unlink(self):

        """
        UNLINK
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "unlink "


        self.run_command(command)

    def valida(self,
               in_='required',
               out='required',
               retrieval='optional'):

        """
        VALIDA
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be validated. 
            Required=Yes

        Output Files:
        -------------

        out: Table
            File containing validated records. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "valida "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def varfit(self,
               in_='required',
               out='required',
               ave.dist='optional',
               vgram='optional',
               key='optional',
               azi='optional',
               dip='optional',
               retrieval='optional'):

        """
        VARFIT
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File containing experimental variogram[s]. This will usually be created by VGRAM. The file 
            contain up to 500 variograms. 
            Required=Yes

        Output Files:
        -------------

        out: Undefined
            Input and output file for parameters of fitted models. The file contains one record per model. 
            the file already exists and contains all the required fields [53 fields in total] then any 
            models will be maintained, otherwise the file will be deleted and a new one created. The new file 
            contain the following fields: VREFNUM - variogram reference number VANGLE1 - first rotation 
            VAXIS1 - first rotation axis VANGLE2 - second rotation angle VAXIS2 - second rotation axis 
            - third rotation angle VAXIS3 - third rotation axis NUGGET - nugget variance ST1 - model type for 
            1 [1=spherical, 2=power, 3=exponential, 4=gaussian, 5= De Wijsian] ST1PAR1 - parameter 1 for 
            1 ST1PAR2 - parameter 2 for structure 1 ST1PAR3 - parameter 3 for structure 1 ST1PAR4 - parameter 
            for structure 1 ST9 - model type for structure 9 ST9PAR1 - parameter 1 for structure 9 ST9PAR2 - 
            2 for structure 9 ST9PAR3 - parameter 3 for structure 9 ST9PAR4 - parameter 4 for structure 9 
            Required=Yes

        Fields:
        -------

        ave.dist: Numeric : IN
            The field to be plotted along the X axis. Usually either LAG or AVE.DIST. The default is 
            
            Default=AVE.DIST
            Required=No
        vgram: Numeric : IN
            The field to be plotted along the Y axis. Processes VARDIR and VARHOL create fields V.GRAM, 
            and LOGVGRM. Process VGRAM creates fields VGRAM, PWRVGRAM and LOGVGRAM. The default is VGRAM. 
            Default=VGRAM
            Required=No
        key: Undefined : Undefined
            If the IN file was created using VGRAM and a KEY field was used, then the name of the KEY field 
            be specified here. 
            Default=Undefined
            Required=No
        azi: Undefined : IN
            Field containing azimuth of experimental variogram. Processes VARDIR and VARHOL create 
            DIRECTN, and VGRAM creates field AZI. The default is AZI. 
            Default=Undefined
            Required=No
        dip: Numeric : IN
            Field containing dip of experimental variogram. Usually DIP, the default. 
            Default=DIP
            Required=No

        Parameters:
        -----------

        """


        command = "varfit "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if ave.dist != "optional":
            command += " *ave.dist=" + ave.dist 

        if vgram != "optional":
            command += " *vgram=" + vgram 

        if key != "optional":
            command += " *key=" + key 

        if azi != "optional":
            command += " *azi=" + azi 

        if dip != "optional":
            command += " *dip=" + dip 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def vcontour(self,
                 in_='required',
                 retrieval='optional'):

        """
        VCONTOUR
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            File to be validated. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "vcontour "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def ver(self):

        """
        VER
        ---
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "ver "


        self.run_command(command)

    def vgram(self,
              in_='required',
              cutoff='optional',
              out='required',
              pairsout='optional',
              x='optional',
              y='optional',
              z='optional',
              f1='required',
              f2='optional',
              f3='optional',
              f4='optional',
              f5='optional',
              f6='optional',
              f7='optional',
              f8='optional',
              f9='optional',
              f10='optional',
              f11='optional',
              f12='optional',
              f13='optional',
              f14='optional',
              f15='optional',
              f16='optional',
              f17='optional',
              f18='optional',
              f19='optional',
              f20='optional',
              f21='optional',
              f22='optional',
              f23='optional',
              key='optional',
              lag="optional",
              lagtol=-,
              nlags=25,
              nsublag=0,
              nlags1=0,
              azi=0,
              horang=90,
              dip=0,
              verang=90,
              cylrad=0,
              numhor=1,
              horinc=0,
              numver=1,
              verinc=0,
              allkeys=0,
              keymeth=1,
              crossvar=0,
              indstep=0,
              indmin=0,
              indnum=0,
              nested=0,
              print_=1,
              angle1=0,
              axis1=3,
              angle2=0,
              axis2=1,
              angle3=0,
              axis3=3,
              logcon=0.001,
              addcon=0,
              laymeth=0,
              spacing=100,
              pause=-1,
              prompt=20,
              retrieval='optional'):

        """
        VGRAM
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data file. This must contain the fields X and Y , and at least one grade field F1. The Z 
            is optional. This file must also contain the KEY field, if it has been specified. 
            Required=Yes
        cutoff: Input
            This contains the cut-off grades for indicator variograms. There is a single field CUTOFF, and 
            to 24 records, one per cut-off. The file does not have to be sorted on CUTOFF. 
            Required=No

        Output Files:
        -------------

        out: Undefined
            Variogram output file. This will contain the fields described previously. The name must not be 
            same as the input file. 
            Required=Yes
        pairsout: Undefined
            The sample pairs output file containing one record for each sample pair used to calculate a 
            or cross variogram. 
            Required=No

        Fields:
        -------

        x: Numeric : IN
            X coordinate of sample data. The default field name is X. 
            Default=X
            Required=No
        y: Numeric : IN
            Y coordinate of sample data. The default field name is Y. 
            Default=Y
            Required=No
        z: Numeric : IN
            Z coordinate of sample data. This field is optional, but if field Z exists in the sample data file 
            will be used. 
            Default=Z
            Required=No
        f1: Undefined : Undefined
            First grade field for variogram and/or cross variogram. This field is compulsory. Up to 23 
            fields can be specified. 
            Default=Undefined
            Required=Yes
        f2: Undefined : Undefined
            2nd grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f3: Undefined : Undefined
            3rd grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f4: Undefined : Undefined
            4th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f5: Undefined : Undefined
            5th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f6: Undefined : Undefined
            6th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f7: Undefined : Undefined
            7th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f8: Undefined : Undefined
            8th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f9: Undefined : Undefined
            9th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f10: Undefined : Undefined
            10th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f11: Undefined : Undefined
            11th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f12: Undefined : Undefined
            12th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f13: Undefined : Undefined
            13th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f14: Undefined : Undefined
            14th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f15: Undefined : Undefined
            15th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f16: Undefined : Undefined
            16th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f17: Undefined : Undefined
            17th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f18: Undefined : Undefined
            18th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f19: Undefined : Undefined
            19th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f20: Undefined : Undefined
            20th grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f21: Undefined : Undefined
            21st grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f22: Undefined : Undefined
            22nd grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        f23: Undefined : Undefined
            23rd grade field for variogram/cross variogram. 
            Default=Undefined
            Required=No
        key: Undefined : Undefined
            Key field. Variograms are calculated for each key field value. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        lag: 
            Distance for one lag. 
            Range=Undefined
            Values=Undefined
            Default=Undefined
            Required=Yes
        lagtol: 
            Tolerance to be used when selecting sample pairs. This is specified in user data units and 
            be between 0 and half of LAG. If not specified or not within this range then half of LAG is used (-). 
            sublags are used, then the tolerance for a sublag is LAGTOL/ NSUBLAG. 
            Range=Undefined
            Values=Undefined
            Default=-
            Required=No
        nlags: 
            Number of lags. The maximum is 9999. The default is (25). 
            Range=1,9999
            Values=Undefined
            Default=25
            Required=No
        nsublag: 
            The number of sublags per lag ie the sublag distance is LAG/ NSUBLAG. Only the first NLAGS1 lags 
            divided. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        nlags1: 
            The number of lags to be divided into sublags. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        azi: 
            Azimuth of first variogram, measured in degrees from the Y axis in the rotated plane. 0 degrees 
            in the direction of the positive Y axis. 90 degrees is in the direction of the positive X axis. 
            (0). 
            Range=0,360
            Values=Undefined
            Default=0
            Required=No
        horang: 
            Azimuth regularisation angle, measured in degrees. The angle range taken is AZI + or - HORANG. 
            (90). 
            Range=Undefined
            Values=Undefined
            Default=90
            Required=No
        dip: 
            Dip direction of first variogram, measured in degrees in direction of the negative Z axis in the 
            plane. A dip angle of 0 is in the rotated X-Y plane [usually horizontal], a dip of 90 is in the 
            Z direction [vertically downwards] and a dip of -90 is in the positive Z direction [vertically 
            (0). 
            Range=-90,90
            Values=Undefined
            Default=0
            Required=No
        verang: 
            Dip regularisation angle, measured in degrees. The angle range is taken as DIP + or - VERANG. The 
            is (90). 
            Range=-90,90
            Values=Undefined
            Default=90
            Required=No
        cylrad: 
            Cylindrical search radius (0). Zero means cylindrical search constraint not applied. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        numhor: 
            Number of azimuths. The maximum number of individual variograms calculated is NUMHOR 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        horinc: 
            Azimuth increment angle in degrees measured in the rotated plane. Variograms are calculated 
            azimuths AZI , AZI + HORINC , AZI + 2 AZI + [ NUMHOR-1] 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        numver: 
            Number of dips. The maximum number of individual variograms calculated is NUMHOR 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        verinc: 
            Dip increment angle in degrees measured in the rotated plane. Variograms are calculated for 
            DIP , DIP + VERINC , DIP + 2 ......, DIP + [ NUMVER-1] 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        allkeys: 
            This parameter controls whether the individual variograms are written or whether just the 
            is written. (0). Option Description 0 only the average over all KEY field values is written 1 
            for all KEY field values and the average No 0 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        keymeth: 
            Controls how keys are applied. (1). Option Description 1 calculate variograms within the same 
            field. 2 calculate variograms using only pairs of samples 3 calculate both the within KEY and 
            KEY No 1 1,3 1,2,3 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        crossvar: 
            Controls whether variograms and/or cross variograms are to be calculated. (0). Option 
            0 only variograms. 1 only cross variograms. All possible combinations 2 both variograms and 
            variograms are calculated. No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        indstep: 
            The step size between successive indicator cutoffs. (0). =0 Do not use indicators, unless a 
            file has been specified. This is the default. >0 The step size between indicators. 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        indmin: 
            The lowest indicator cutoff value. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        indnum: 
            The number of indicators to use; ie indicator variograms will be calculated for cutoffs of 
            , INDMIN+ 1 INDSTEP , INDMIN+ 2 INDSTEP , ..... , INDMIN+ [ INDNUM - 1]* INDSTEP. A maximum of 24 
            is allowed. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        nested: 
            Method for calculating indicators. (0). Option Description 0 The normal method is used; ie not 
            1 Nested method, Bottom Up. 2 Nested Method, Top Down. No 0 0,2 0,1,2 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        print: 
            Flag to control the output sent to the display: Option Description 0 minimum output - a summary 
            the input parameters 1 As 0 plus output of all variograms and cross variograms No 1 0,1 0,1 
            Range=0,1
            Values=0,1
            Default=1
            Required=No
        angle1: 
            First rotation angle, in degrees. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        axis1: 
            First rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE1 degrees clockwise around 
            AXIS1 , when viewed along the axis from positive values towards the origin. An axis value of 0 
            no rotation. (3). 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        angle2: 
            Second rotation angle, in degrees. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        axis2: 
            Second rotation axis. 1=X, 2=Y, 3=Z. The second rotation is by ANGLE2 degrees clockwise around 
            AXIS2 , when viewed along the axis from positive values towards the origin. An axis value of 0 
            no rotation. (1). 
            Range=1,3
            Values=1,2,3
            Default=1
            Required=No
        angle3: 
            Third rotation angle, in degrees. (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        axis3: 
            Third rotation axis. 1=X, 2=Y, 3=Z. The first rotation is by ANGLE3 degrees clockwise around 
            AXIS3 , when viewed along the axis from positive values towards the origin. An axis value of 0 
            no rotation. (3). 
            Range=1,3
            Values=1,2,3
            Default=3
            Required=No
        logcon: 
            If the sample value is less than LOGCON , then it is substituted by the value of LOGCON in the 
            of the logarithmic variogram (0.001). 
            Range=Undefined
            Values=Undefined
            Default=0.001
            Required=No
        addcon: 
            Constant added to VALUE field before calculation of log variograms or log statistics (0). 
            Range=Undefined
            Values=Undefined
            Default=0
            Required=No
        laymeth: 
            The layer method. If the deposit is stratified it is often useful to calculate variograms with 
            each layer, and also the average over all layers. The base layer plane is defined by the XY plane 
            the rotations ANGLEn, AXISn have been applied. Layers are defined by 2 parameters. (0). =0 
            are not used. This is the default. =1 Layers are used, but only the average over all layers is 
            to the output file. =2 Layers are used, and the variogram for each layer and the average over all 
            are written to the output file. Field LAYER is included in the output file. It is set to - for the 
            over all layers. 
            Range=0,2
            Values=0,2
            Default=0
            Required=No
        spacing: 
            The samples are assigned a layer number relative to the rotated XY plane. Layer 1 includes all 
            between the rotated XY plane and a parallel plane whose rotated Z value is SPACING. Layer 2 
            all samples between the plane at Z= SPACING and Z=2 SPACING. The sample with the minimum Z value 
            in the rotated plane] lies on the plane which is at the base of layer 1. If SPACING = 0 then layers 
            not used. 
            Range=Undefined
            Values=Undefined
            Default=100
            Required=No
        pause: 
            Delay in seconds between output of each variogram table: =-1 Wait for user to press <ENTER>. >=0 
            in seconds. The default is (0). 
            Range=Undefined
            Values=Undefined
            Default=-1
            Required=No
        prompt: 
            The number of lines to be displayed on the screen when outputting the results. The default is 
            This does not affect the number of lines per page written to the print file. For the print file 
            variogram starts on a new page. 
            Range=Undefined
            Values=Undefined
            Default=20
            Required=No
        """


        command = "vgram "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 

        if cutoff != "optional":
            command += " &cutoff=" + cutoff 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 

        if pairsout != "optional":
            command += " &pairsout=" + pairsout 

        if x != "optional":
            command += " *x=" + x 

        if y != "optional":
            command += " *y=" + y 

        if z != "optional":
            command += " *z=" + z 


        # Required field error check

        if f1 == "required":
            raise ValueError("f1 is required.")

        command += " *f1=" + f1 

        if f2 != "optional":
            command += " *f2=" + f2 

        if f3 != "optional":
            command += " *f3=" + f3 

        if f4 != "optional":
            command += " *f4=" + f4 

        if f5 != "optional":
            command += " *f5=" + f5 

        if f6 != "optional":
            command += " *f6=" + f6 

        if f7 != "optional":
            command += " *f7=" + f7 

        if f8 != "optional":
            command += " *f8=" + f8 

        if f9 != "optional":
            command += " *f9=" + f9 

        if f10 != "optional":
            command += " *f10=" + f10 

        if f11 != "optional":
            command += " *f11=" + f11 

        if f12 != "optional":
            command += " *f12=" + f12 

        if f13 != "optional":
            command += " *f13=" + f13 

        if f14 != "optional":
            command += " *f14=" + f14 

        if f15 != "optional":
            command += " *f15=" + f15 

        if f16 != "optional":
            command += " *f16=" + f16 

        if f17 != "optional":
            command += " *f17=" + f17 

        if f18 != "optional":
            command += " *f18=" + f18 

        if f19 != "optional":
            command += " *f19=" + f19 

        if f20 != "optional":
            command += " *f20=" + f20 

        if f21 != "optional":
            command += " *f21=" + f21 

        if f22 != "optional":
            command += " *f22=" + f22 

        if f23 != "optional":
            command += " *f23=" + f23 

        if key != "optional":
            command += " *key=" + key 


        # Required parameter error check

        if lag == "required":
            raise ValueError("lag is required.")

        command += " @lag=" + str(lag) 

        if lagtol != "optional":
            command += " @lagtol=" + str(lagtol) 

        if nlags != "optional":
            command += " @nlags=" + str(nlags) 

        if nsublag != "optional":
            command += " @nsublag=" + str(nsublag) 

        if nlags1 != "optional":
            command += " @nlags1=" + str(nlags1) 

        if azi != "optional":
            command += " @azi=" + str(azi) 

        if horang != "optional":
            command += " @horang=" + str(horang) 

        if dip != "optional":
            command += " @dip=" + str(dip) 

        if verang != "optional":
            command += " @verang=" + str(verang) 

        if cylrad != "optional":
            command += " @cylrad=" + str(cylrad) 

        if numhor != "optional":
            command += " @numhor=" + str(numhor) 

        if horinc != "optional":
            command += " @horinc=" + str(horinc) 

        if numver != "optional":
            command += " @numver=" + str(numver) 

        if verinc != "optional":
            command += " @verinc=" + str(verinc) 

        if allkeys != "optional":
            command += " @allkeys=" + str(allkeys) 

        if keymeth != "optional":
            command += " @keymeth=" + str(keymeth) 

        if crossvar != "optional":
            command += " @crossvar=" + str(crossvar) 

        if indstep != "optional":
            command += " @indstep=" + str(indstep) 

        if indmin != "optional":
            command += " @indmin=" + str(indmin) 

        if indnum != "optional":
            command += " @indnum=" + str(indnum) 

        if nested != "optional":
            command += " @nested=" + str(nested) 

        if print_ != "optional":
            command += " @print=" + str(print_) 

        if angle1 != "optional":
            command += " @angle1=" + str(angle1) 

        if axis1 != "optional":
            command += " @axis1=" + str(axis1) 

        if angle2 != "optional":
            command += " @angle2=" + str(angle2) 

        if axis2 != "optional":
            command += " @axis2=" + str(axis2) 

        if angle3 != "optional":
            command += " @angle3=" + str(angle3) 

        if axis3 != "optional":
            command += " @axis3=" + str(axis3) 

        if logcon != "optional":
            command += " @logcon=" + str(logcon) 

        if addcon != "optional":
            command += " @addcon=" + str(addcon) 

        if laymeth != "optional":
            command += " @laymeth=" + str(laymeth) 

        if spacing != "optional":
            command += " @spacing=" + str(spacing) 

        if pause != "optional":
            command += " @pause=" + str(pause) 

        if prompt != "optional":
            command += " @prompt=" + str(prompt) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def weave(self,
              in1='required',
              in2='required',
              out='required',
              key1='required',
              key2='optional',
              key3='optional',
              key4='optional',
              key5='optional',
              key6='optional',
              key7='optional',
              key8='optional',
              key9='optional',
              key10='optional',
              retrieval='optional'):

        """
        WEAVE
        -----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in1: Input
            First file to be updated (sorted on required keyfields). 
            Required=Yes
        in2: Input
            Second file (update file) (sorted on required keyfields). 
            Required=Yes

        Output Files:
        -------------

        out: Table
            Output file. 
            Required=Yes

        Fields:
        -------

        key1: Undefined : Undefined
            Keyfield 1 for matching on. 
            Default=Undefined
            Required=Yes
        key2: Undefined : Undefined
            Keyfield 2. 
            Default=Undefined
            Required=No
        key3: Undefined : Undefined
            Keyfield 3. 
            Default=Undefined
            Required=No
        key4: Undefined : Undefined
            Keyfield 4. 
            Default=Undefined
            Required=No
        key5: Undefined : Undefined
            Keyfield 5. 
            Default=Undefined
            Required=No
        key6: Undefined : Undefined
            Keyfield 6. 
            Default=Undefined
            Required=No
        key7: Undefined : Undefined
            Keyfield 7. 
            Default=Undefined
            Required=No
        key8: Undefined : Undefined
            Keyfield 8. 
            Default=Undefined
            Required=No
        key9: Undefined : Undefined
            Keyfield 9. 
            Default=Undefined
            Required=No
        key10: Undefined : Undefined
            Keyfield 10. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "weave "


        # Required input error check

        if in1 == "required":
            raise ValueError("in1 is required.")

        command += " &in1=" + in1 


        # Required input error check

        if in2 == "required":
            raise ValueError("in2 is required.")

        command += " &in2=" + in2 


        # Required output error check

        if out == "required":
            raise ValueError("out is required.")

        command += " &out=" + out 


        # Required field error check

        if key1 == "required":
            raise ValueError("key1 is required.")

        command += " *key1=" + key1 

        if key2 != "optional":
            command += " *key2=" + key2 

        if key3 != "optional":
            command += " *key3=" + key3 

        if key4 != "optional":
            command += " *key4=" + key4 

        if key5 != "optional":
            command += " *key5=" + key5 

        if key6 != "optional":
            command += " *key6=" + key6 

        if key7 != "optional":
            command += " *key7=" + key7 

        if key8 != "optional":
            command += " *key8=" + key8 

        if key9 != "optional":
            command += " *key9=" + key9 

        if key10 != "optional":
            command += " *key10=" + key10 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wedgevol(self,
                 wiretr1='required',
                 wirept1='required',
                 wiretr2='required',
                 wirept2='required',
                 wiretr3='optional',
                 wirept3='optional',
                 proto='required',
                 retrieval='optional'):

        """
        WEDGEVOL
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr1: Input
            Triangle file of update wireframe surface 1 (DTM). 
            Required=Yes
        wirept1: Input
            Point file of update wireframe surface 1 (DTM). 
            Required=Yes
        wiretr2: Input
            Triangle file of update wireframe surface 2 (DTM). 
            Required=Yes
        wirept2: Input
            Point file of update wireframe surface 2 (DTM). 
            Required=Yes
        wiretr3: Input
            Triangle file of wireframe surface 3 (DTM). 
            Required=No
        wirept3: Input
            Point file of update wireframe surface 3 (DTM). 
            Required=No
        proto: Input
            Block model prototype. 
            Required=Yes

        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "wedgevol "


        # Required input error check

        if wiretr1 == "required":
            raise ValueError("wiretr1 is required.")

        command += " &wiretr1=" + wiretr1 


        # Required input error check

        if wirept1 == "required":
            raise ValueError("wirept1 is required.")

        command += " &wirept1=" + wirept1 


        # Required input error check

        if wiretr2 == "required":
            raise ValueError("wiretr2 is required.")

        command += " &wiretr2=" + wiretr2 


        # Required input error check

        if wirept2 == "required":
            raise ValueError("wirept2 is required.")

        command += " &wirept2=" + wirept2 

        if wiretr3 != "optional":
            command += " &wiretr3=" + wiretr3 

        if wirept3 != "optional":
            command += " &wirept3=" + wirept3 


        # Required input error check

        if proto == "required":
            raise ValueError("proto is required.")

        command += " &proto=" + proto 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wfcode(self,
               points='required',
               wiretr='required',
               wirept='required',
               perimin='optional',
               x='required',
               y='required',
               z='required',
               zone='optional',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               retrieval='optional'):

        """
        WFCODE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        points: Input
            Input file containing X, Y and Z coordinates to be updated with values from wireframes. This 
            may be a block model, desurveyed sample file or any points file with X,Y,Z coordinates. 
            Required=Yes
        wiretr: Input
            Input wireframe triangle file used to define the volume(s) within which to update the input 
            with new values. 
            Required=Yes
        wirept: Input
            Input wireframe point file used to to define the volume(s) within which to update the input 
            file with new values 
            Required=Yes
        perimin: Input
            Optional perimeter input file to control area over which input points are considered. Only 
            either inside or outside the supplied perimeters are coded depending on the value of the 
            parameter. 
            Required=No

        Output Files:
        -------------


        Fields:
        -------

        x: Numeric : POINTS
            Field in POINTS file defining the X co-ordinate. 
            Default=-
            Required=Yes
        y: Numeric : POINTS
            Field in POINTS file defining the Y co-ordinate. 
            Default=-
            Required=Yes
        z: Numeric : POINTS
            Field in POINTS file defining the Z co-ordinate. 
            Default=-
            Required=Yes
        zone: Numeric or Alphanumeric : WIRETR
            Field in WIRETR file used to identify individual surfaces. WIRETR does NOT have to be sorted by 
            This field can be alpha or numeric 
            Default=-
            Required=No
        attrib1: Numeric or Alphanumeric : POINTS
            Field from the WIRETR file to be placed into the output file for all records which are selected. 
            Default=-
            Required=No
        attrib2: Numeric or Alphanumeric : POINTS
            Field from the WIRETR file to be placed into the output file for all records which are selected. 
            Default=-
            Required=No
        attrib3: Numeric or Alphanumeric : POINTS
            Field from the WIRETR file to be placed into the output file for all records which are selected. 
            Default=-
            Required=No
        attrib4: Numeric or Alphanumeric : POINTS
            Field from the WIRETR file to be placed into the output file for all records which are selected. 
            Default=-
            Required=No

        Parameters:
        -----------

        """


        command = "wfcode "


        # Required input error check

        if points == "required":
            raise ValueError("points is required.")

        command += " &points=" + points 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if perimin != "optional":
            command += " &perimin=" + perimin 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if zone != "optional":
            command += " *zone=" + zone 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wfexpnd(self,
                intr='required',
                inpt='required',
                outtr='required',
                outpt='required',
                retrieval='optional'):

        """
        WFEXPND
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        intr: Input
            Input wireframe triangle file. 
            Required=Yes
        inpt: Input
            Input wireframe point file. 
            Required=Yes

        Output Files:
        -------------

        outtr: Wireframe triangle
            Output wireframe triangle file. 
            Required=Yes
        outpt: Wireframe points
            Output wireframe point file.. 
            Required=Yes

        Fields:
        -------


        Parameters:
        -----------

        """


        command = "wfexpnd "


        # Required input error check

        if intr == "required":
            raise ValueError("intr is required.")

        command += " &intr=" + intr 


        # Required input error check

        if inpt == "required":
            raise ValueError("inpt is required.")

        command += " &inpt=" + inpt 


        # Required output error check

        if outtr == "required":
            raise ValueError("outtr is required.")

        command += " &outtr=" + outtr 


        # Required output error check

        if outpt == "required":
            raise ValueError("outpt is required.")

        command += " &outpt=" + outpt 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wftrend(self,
                pointin='required',
                wiretr='required',
                wirept='required',
                pointou='optional',
                xpt='required',
                ypt='required',
                zpt='required',
                retrieval='optional'):

        """
        WFTREND
        -------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        pointin: Input
            Input point data file. 
            Required=Yes

        Output Files:
        -------------

        wiretr: Wireframe Triangle
            Output wireframe triangle file. 
            Required=Yes
        wirept: Wireframe Points
            Output wireframe point file. 
            Required=Yes
        pointou: Point Data
            Output point data file. This includes both the input point data, and the points which were 
            using the trend surface. 
            Required=No

        Fields:
        -------

        xpt: Numeric : POINTIN
            X field in input point data file. 
            Default=XPT
            Required=Yes
        ypt: Numeric : POINTIN
            Y field in input point data file. 
            Default=YPT
            Required=Yes
        zpt: Numeric : POINTIN
            Z field in input point data file. 
            Default=ZPT
            Required=Yes

        Parameters:
        -----------

        """


        command = "wftrend "


        # Required input error check

        if pointin == "required":
            raise ValueError("pointin is required.")

        command += " &pointin=" + pointin 


        # Required output error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required output error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if pointou != "optional":
            command += " &pointou=" + pointou 


        # Required field error check

        if xpt == "required":
            raise ValueError("xpt is required.")

        command += " *xpt=" + xpt 


        # Required field error check

        if ypt == "required":
            raise ValueError("ypt is required.")

        command += " *ypt=" + ypt 


        # Required field error check

        if zpt == "required":
            raise ValueError("zpt is required.")

        command += " *zpt=" + zpt 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wirefill(self,
                 proto='optional',
                 wiretr='required',
                 wirept='required',
                 model='required',
                 zone='optional',
                 zcode=1,
                 wiretype=1,
                 cellxmin=2.5,
                 cellxmax=10,
                 cellymin=2.5,
                 cellymax=10,
                 cellzmin=2.5,
                 cellzmax=10,
                 retrieval='optional'):

        """
        WIREFILL
        --------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        proto: Input
            Model prototype file. You may specify the name of an existing block model to define the model 
            settings. The process only uses the model extent and cell size fields as specified in the data 
            - any actual cells or subcells will be ignored. If a prototype model is not specified, then the 
            dimensions will be calculated automatically from the parameter described below and the 
            of the wireframe points data. 
            Required=No
        wiretr: Input
            Input wireframe triangle file. The wireframe may consist of one or more solid wireframes, or 
            or more single surface DTMs. It may not contain both solid wireframes and DTMs. 
            Required=Yes
        wirept: Input wireframe points file.
            Wireframe Points 
            Required=Yes

        Output Files:
        -------------

        model: Block Model File
            Output block model file. This will include the 13 standard model fields plus the ZONE field, if 
            
            Required=Yes

        Fields:
        -------

        zone: Undefined : Undefined
            Name of the attribute field to be created in the output model file. If this field exists in the 
            file then the wireframe attribute values will be passed from the wireframes to the model cells. 
            Default=Undefined
            Required=yes

        Parameters:
        -----------

        zcode: 
            Zone code to be inserted in the output model ZONE field. This parameter will be ignored if the 
            ZONE exists in the wireframe triangle file. 
            Range=Undefined
            Values=Undefined
            Default=1
            Required=No
        wiretype: 
            Type of wireframe model to be filled with cells. Select one of the following options, with the 
            being 1: 1: solid - create cells inside. 2: surface - create cells below. 3: surface - create 
            above. 4: surface - create cells to the south. 5: surface - create cells to the north. 6: surface - 
            cells to the west. 7: surface - create cells to the east. 
            Range=1,7
            Values=1,2,3,4,5,6,7
            Default=1
            Required=Yes
        cellxmin: 
            Minimum cell size in the X direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=0,10000
            Values=Undefined
            Default=2.5
            Required=yes
        cellxmax: 
            Maximum (ie parent) cell size in the X direction. This will be ignored if PROTO is defined. 
            Range=0.5,10000
            Values=Undefined
            Default=10
            Required=No
        cellymin: 
            Minimum cell size in the Y direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=0,10000
            Values=Undefined
            Default=2.5
            Required=yes
        cellymax: 
            Maximum (ie parent) cell size in the Y direction. This will be ignored if PROTO is defined. 
            Range=0.5,10000
            Values=Undefined
            Default=10
            Required=No
        cellzmin: 
            Minimum cell size in the Z direction. If it is set to zero then seam filling is used - ie the cell is 
            once at the wireframe boundary. Only one of the values CELLXMIN , CELLYMIN , and CELLZMIN may be 
            
            Range=0,10000
            Values=Undefined
            Default=2.5
            Required=yes
        cellzmax: 
            Maximum (ie parent) cell size in the Z direction. This will be ignored if PROTO is defined. 
            Range=0.5,1000
            Values=Undefined
            Default=10
            Required=No
        """


        command = "wirefill "

        if proto != "optional":
            command += " &proto=" + proto 


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 


        # Required output error check

        if model == "required":
            raise ValueError("model is required.")

        command += " &model=" + model 


        # Required field error check

        if zone == "required":
            raise ValueError("zone is required.")

        command += " *zone=" + zone 

        if zcode != "optional":
            command += " @zcode=" + str(zcode) 


        # Required parameter error check

        if wiretype == "required":
            raise ValueError("wiretype is required.")

        command += " @wiretype=" + str(wiretype) 


        # Required parameter error check

        if cellxmin == "required":
            raise ValueError("cellxmin is required.")

        command += " @cellxmin=" + str(cellxmin) 

        if cellxmax != "optional":
            command += " @cellxmax=" + str(cellxmax) 


        # Required parameter error check

        if cellymin == "required":
            raise ValueError("cellymin is required.")

        command += " @cellymin=" + str(cellymin) 

        if cellymax != "optional":
            command += " @cellymax=" + str(cellymax) 


        # Required parameter error check

        if cellzmin == "required":
            raise ValueError("cellzmin is required.")

        command += " @cellzmin=" + str(cellzmin) 

        if cellzmax != "optional":
            command += " @cellzmax=" + str(cellzmax) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def wirepe(self,
               wiretr='required',
               wirept='required',
               section='optional',
               perimout='required',
               attrib1='optional',
               attrib2='optional',
               attrib3='optional',
               attrib4='optional',
               retrieval='optional'):

        """
        WIREPE
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        wiretr: Input
            Input wireframe triangle file. 
            Required=Yes
        wirept: Input
            Input wireframe point file. 
            Required=Yes
        section: Input
            Optional section definition file. Required fields: SVALUE - used to select specific section. 
            - coords of centre of section. SDIP - dip of section (degrees). SAZI - azimuth of dip direction 
            STHICK - influence of section (not used). 
            Required=No

        Output Files:
        -------------

        perimout: String
            Output perimeter file. File contains XP, YP, ZP, PVALUE, PTN and fields copied from the 
            file as specified by optional field specifications ATTRIB1, ATTRIB2, ATTRIB3 and ATTRIB4. 
            Required=Yes

        Fields:
        -------

        attrib1: Undefined : Undefined
            Field #1 to be copied from triangle to perimeter file. 
            Default=Undefined
            Required=No
        attrib2: Undefined : Undefined
            Field #2 to be copied from triangle to perimeter file. 
            Default=Undefined
            Required=No
        attrib3: Undefined : Undefined
            Field #3 to be copied from triangle to perimeter file. 
            Default=Undefined
            Required=No
        attrib4: Undefined : Undefined
            Field #4 to be copied from triangle to perimeter file. Section increments may be defined by : 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        """


        command = "wirepe "


        # Required input error check

        if wiretr == "required":
            raise ValueError("wiretr is required.")

        command += " &wiretr=" + wiretr 


        # Required input error check

        if wirept == "required":
            raise ValueError("wirept is required.")

        command += " &wirept=" + wirept 

        if section != "optional":
            command += " &section=" + section 


        # Required output error check

        if perimout == "required":
            raise ValueError("perimout is required.")

        command += " &perimout=" + perimout 

        if attrib1 != "optional":
            command += " *attrib1=" + attrib1 

        if attrib2 != "optional":
            command += " *attrib2=" + attrib2 

        if attrib3 != "optional":
            command += " *attrib3=" + attrib3 

        if attrib4 != "optional":
            command += " *attrib4=" + attrib4 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

    def xrun(self):

        """
        XRUN
        ----
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------


        Output Files:
        -------------


        Fields:
        -------


        Parameters:
        -----------

        """


        command = "xrun "


        self.run_command(command)

    def xvalid(self,
               in_='required',
               srcparm='required',
               estparm='required',
               vmodparm='optional',
               vgram='optional',
               xvsamps='optional',
               xvstats='optional',
               sampout='optional',
               x='required',
               y='required',
               z='required',
               zone1_f='optional',
               zone2_f='optional',
               key='optional',
               length_f='optional',
               dens_f='optional',
               sminfac=0.0001,
               print_=0,
               retrieval='optional'):

        """
        XVALID
        ------
        This is auto-generated documentation. For more command information visit the Datamine help file.

        Input Files:
        ------------

        in: Input
            Input sample data to be cross validated. This must contain X,Y and Z fields and at least one grade 
            
            Required=Yes
        srcparm: Input
            Search volume parameter file. This contains 24 compulsory fields defining the search volume 
            the number of samples needed for grade estimation. More than one search volume may be defined. 
            fields are numeric: SREFNUM Search volume reference number. SMETHOD Search volume shape. 1 = 
            rectangle 2 = ellipsoid. SDIST1 Max search distance in direction 1. SDIST2 Max search distance 
            direction 2. SDIST3 Max search distance in direction 3. SANGLE1 First rotation angle for 
            vol. SANGLE2 Second rotation angle. SANGLE3 Third rotation angle. SAXIS1 Axis for 1st 
            (1=X,2=Y,3=Z). SAXIS2 Axis for 2nd rotation (1=X,2=Y,3=Z). SAXIS3 Axis for 3rd rotation 
            MINNUM1 Min number of samples, 1st search vol. MAXNUM1 Max number of samples, 1st search vol. 
            Axis multiplying factor,2nd search vol. MINNUM2 Min number of samples, 2nd search vol. 
            Max number of samples, 2nd search vol. SVOLFAC3 Axis multiplying factor,3rd search vol. 
            Min number of samples, 3rd search vol. MAXNUM3 Max number of samples, 3rd search vol. OCTMETH 
            method flag. 0 = no octant search, 1 = use octants. MINOCT Minimum number of octants to be filled. 
            Minimum number of samples in an octant. MAXPEROC Maximum number of samples in an octant. MAXKEY 
            number samples with same key value. 
            Required=Yes
        estparm: Input
            Estimation parameter file. Each record in the file describes an estimation method and its 
            parameters. The fields are dependent on the estimation methods selected. General fields: 
            2A4 Field to be estimated. SREFNUM N Search volume reference number. VALUE_OU 2A4 Field to be 
            in MODEL (Default is VALUE_IN). {ZONE1_F} A/N 1st field for zonal estimation. The actual name 
            the field is given by ZONE1_F on command line eg ZONE1_F(ROCK). {ZONE2_F} A/N 2nd field for 
            estimation. NUMSAM_F 2A4 Field to be created in MODEL for the number of samples. SVOL_F 2A4 
            to be created in MODEL for dynamic search volume number. VAR_F 2A4 Field to be created in MODEL 
            variance of estimate. MINDIS_F 2A4 Field to be created in MODEL for distance to nearest sample. 
            N Estimation method. 1 = Nearest neighbour (NN). 2 = Inverse power of dist (IPD). 3 = Ordinary 
            (OK). 4 = Simple kriging (SK). 5 = Sichel's t estimator. Anisotropy fields for NN and IPD: ANISO N 
            method: 0 = no anisotropy. 1 = use search vol anisotropy. 2 = use ANANGLEn. ANANGLE1 N Anisotropy 
            1. ANANGLE2 N Anisotropy angle 2. ANANGLE3 N Anisotropy angle 3. ANDIST1 N Anisotropy distance 
            ANDIST2 N Anisotropy distance 2. ANDIST3 N Anisotropy distance 3. Fields for IPD: POWER N Power 
            distance for weighting. ADDCON N Constant added to distance. Fields for kriging: VREFNUM N 
            model reference number. LOG N Lognormal variogram flag. 0 = normal kriging. 1 = lognormal 
            KRIGNEGW N Treatment of -ve weights: 0 = -ve weights kept and used. 1 = ignore samples with -ve 
            KRIGVARS N Treatment of variance > sill: 0 = write variance to MODEL. 1 = set variance to sill. 
            for lognormal kriging: GENCASE N Calculation method: 0 = Rendu's method. 1 = General case. 
            N Deposit mean [If 0 then use kriged estimate]. Fields for general case: TOL N Tolerance for 
            MAXITER N Maximum number of iterations. Fields for simple kriging: LOCALMNP N Method for 
            of local mean: 1 = use field defined in PROTO 2 = use mean within search vol. LOCALM_F 2A4 Name of 
            mean field in PROTO; used if LOCALMNP=1 
            Required=Yes
        vmodparm: Input
            Variogram model parameter file. Each record in this file defines a variogram model type and its 
            Only the VREFNUM field is compulsory. VREFNUM Model variogram reference number. VANGLE1 
            anisotropy angle 1. VANGLE2 Variogram anisotropy angle 2. VANGLE3 Variogram anisotropy 
            3. VAXIS1 Model variogram rotation axis 1. VAXIS2 Model variogram rotation axis 2. VAXIS3 
            variogram rotation axis 3. NUGGET Nugget variance. ST1 Variogram model type for structure 1. 1 
            Spherical. 2 = Power [eg 1 - linear]. 3 = Exponential. 4 = Gaussian. 5 = De Wijsian. ST1PAR1 1st 
            of structure 1 [Range 1 for spherical model]. ST1PAR2 2nd parameter of structure 1 [Range 2 for 
            model]. ST1PAR3 3rd parameter of structure 1 [Range 3 for spherical model]. ST1PAR4 4th 
            of structure 1 [C variance for spherical model]. STn Variogram model type for structure n. 
            pth parameter for structure n, where n<=9. 
            Required=No
        vgram: Input
            Experimental variogram file, as created by the variogram calculation process VGRAM. This 
            variogram file will have been used by the variogram fitting process VARFIT in order to derive 
            variogram model defined by VMODPARM . This is only required if you want to use access the 
            display and fitting process VARFIT from within XVALID. 
            Required=No

        Output Files:
        -------------

        xvsamps: Undefined
            Cross-validated output sample file. This contains all the fields from the IN sample data file, 
            each grade estimate and associated secondary fields such as kriged variance. 
            Required=No
        xvstats: Undefined
            Output file containing a summary of the input parameters and the cross-validation 
            It includes a single record for each estimate. The 23 fields in the file are summarised below. If 
            file already contains all 23 fields then additional records are appended to the file. If the 
            does not contain all 23 fields, or if the file does not exist, then a new file is created. ID - each 
            is assigned a unique numeric identifier VALUE_IN - field in sample IN file being estimated 
            - field containing estimated value IMETHOD - estimation method (1=NN, 2=IPD, 3=OK, 4= SK, 
            SREFNUM - search volume reference number VREFNUM - variogram reference number POWER - power of 
            for IPD NUM_EST - number of samples for which estimates have been made NUM_MISS - number of 
            whose values were not estimated ACT_MEAN - mean grade of the sample values (the actuals) 
            - mean grade of the estimated values DIFF - actual mean grade minus estimated mean grade PC_DIFF 
            DIFF as a percentage of the actual mean grade MAD - mean absolute difference between actual and 
            grades ACT_VAR - variance of the actual grades EST_VAR - variance of the estimated grades 
            - correlation coefficient between actuals and estimates KV_VMOD - mean of the kriged variance 
            each estimate KV_DIFF2 - mean of (Actual - Estimate)**2 KV_RATIO - ratio of KV_VMOD to KV_DIFF2 
            - constant of regression line of actual on estimate REG_SLP - slope of regression line of actual 
            estimate REG_SE - standard error of regression line of actual on estimate 
            Required=No
        sampout: Undefined
            Output sample file containing details of weights for each sample for each estimate. 
            Required=No

        Fields:
        -------

        x: Undefined : Undefined
            X coordinate of sample data in IN file. If not specified, then X is assumed. 
            Default=Undefined
            Required=Yes
        y: Undefined : Undefined
            Y coordinate of sample data in IN file. If not specified, then Y is assumed. 
            Default=Undefined
            Required=Yes
        z: Undefined : Undefined
            Z coordinate of sample data in IN file. If not specified, then Z is assumed. 
            Default=Undefined
            Required=Yes
        zone1_f: Undefined : Undefined
            First field for zonal control. The field must exist in the IN file and in the ESTPARM file. 
            Default=Undefined
            Required=No
        zone2_f: Undefined : Undefined
            Second field for zonal control. The field must exist in the IN file and in the ESTPARM file. 
            Default=Undefined
            Required=No
        key: Undefined : Undefined
            Key field used to specify the field limiting the number of samples for estimation. The field 
            exist in the IN file. 
            Default=Undefined
            Required=No
        length_f: Undefined : Undefined
            Field used for length weighting in IPD. The field must exist in the IN file. 
            Default=Undefined
            Required=No
        dens_f: Undefined : Undefined
            Field used for density weighting in IPD. The field must exist in the IN file. 
            Default=Undefined
            Required=No

        Parameters:
        -----------

        sminfac: 
            Multiplying factor which is applied to the first search volume, and used to calculate the 
            volume for estimation. Samples lying within the exclusion volume are not used for the 
            The factor must be greater than 0 and less than 1. The exclusion volume is concentric with the 
            volume. 
            Range=0,1
            Values=0,1
            Default=0.0001
            Required=No
        print: 
            Display control: Option Description 0 Minimum output. 1 Maximum output. 
            Range=0,1
            Values=0,1
            Default=0
            Required=No
        """


        command = "xvalid "


        # Required input error check

        if in_ == "required":
            raise ValueError("in_ is required.")

        command += " &in=" + in_ 


        # Required input error check

        if srcparm == "required":
            raise ValueError("srcparm is required.")

        command += " &srcparm=" + srcparm 


        # Required input error check

        if estparm == "required":
            raise ValueError("estparm is required.")

        command += " &estparm=" + estparm 

        if vmodparm != "optional":
            command += " &vmodparm=" + vmodparm 

        if vgram != "optional":
            command += " &vgram=" + vgram 

        if xvsamps != "optional":
            command += " &xvsamps=" + xvsamps 

        if xvstats != "optional":
            command += " &xvstats=" + xvstats 

        if sampout != "optional":
            command += " &sampout=" + sampout 


        # Required field error check

        if x == "required":
            raise ValueError("x is required.")

        command += " *x=" + x 


        # Required field error check

        if y == "required":
            raise ValueError("y is required.")

        command += " *y=" + y 


        # Required field error check

        if z == "required":
            raise ValueError("z is required.")

        command += " *z=" + z 

        if zone1_f != "optional":
            command += " *zone1_f=" + zone1_f 

        if zone2_f != "optional":
            command += " *zone2_f=" + zone2_f 

        if key != "optional":
            command += " *key=" + key 

        if length_f != "optional":
            command += " *length_f=" + length_f 

        if dens_f != "optional":
            command += " *dens_f=" + dens_f 

        if sminfac != "optional":
            command += " @sminfac=" + str(sminfac) 

        if print_ != "optional":
            command += " @print=" + str(print_) 


        if retrieval != "optional":
            command += "{" + retrieval + "}"

        self.run_command(command)

